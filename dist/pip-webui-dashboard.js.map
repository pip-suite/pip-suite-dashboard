{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/add_tile_dialog/AddTileDialogController.ts","src/add_tile_dialog/AddTileProvider.ts","src/add_tile_dialog/index.ts","src/common_tile/DashboardTile.ts","src/common_tile/DynamicTile.ts","src/config_tile_dialog/ConfigDialogController.ts","src/config_tile_dialog/ConfigDialogExtendComponent.ts","src/config_tile_dialog/ConfigDialogService.ts","src/config_tile_dialog/index.ts","src/dashboard/Dashboard.ts","src/draggable/Draggable.ts","src/draggable/DraggableTileService.ts","src/draggable/index.ts","src/event_tile/EventTile.ts","src/index.ts","src/menu_tile/MenuTileDirective.ts","src/menu_tile/index.ts","src/note_tile/NoteTile.ts","src/picture_slider_tile/PictureSliderTile.ts","src/position_tile/PositionTile.ts","src/statistics_tile/StatisticsTile.ts","src/tile_group/TileGroupDirective.ts","src/tile_group/TileGroupService.ts","src/tile_group/index.ts","src/utility/DashboardService.ts","src/utility/TileTemplateUtility.ts","temp/pip-webui-dashboard-html.min.js"],"names":[],"mappings":"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":"pip-webui-dashboard.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","export class AddTileDialog {\n    title: string;\n    icon: string;\n    name: string;\n    amount: number;\n}\n\nexport class AddTileDialogController implements ng.IController {\n    public defaultTiles: [AddTileDialog[]];\n    public groups: any;\n    public totalTiles: number = 0;\n\n    constructor(\n        groups: any,\n        public activeGroupIndex: number,\n        widgetList: [AddTileDialog[]],\n        public $mdDialog: angular.material.IDialogService\n    ) {\n        this.activeGroupIndex = _.isNumber(activeGroupIndex) ? activeGroupIndex : -1;\n        this.defaultTiles = _.cloneDeep(widgetList);\n        this.groups = _.map(groups, (group) => {\n            return group['title'];\n        });\n    }\n\n    public add() {\n        this.$mdDialog.hide({\n            groupIndex: this.activeGroupIndex,\n            widgets: this.defaultTiles\n        });\n    };\n\n    public cancel() {\n        this.$mdDialog.cancel();\n    };\n\n    public encrease(groupIndex: number, widgetIndex: number) {\n        const widget = this.defaultTiles[groupIndex][widgetIndex];\n        widget.amount++;\n        this.totalTiles++;\n    };\n\n    public decrease(groupIndex: number, widgetIndex: number) {\n        const widget = this.defaultTiles[groupIndex][widgetIndex];\n        widget.amount = widget.amount ? widget.amount - 1 : 0;\n        this.totalTiles = this.totalTiles ? this.totalTiles - 1 : 0;\n    };\n}","import {\n  AddTileDialog,\n  AddTileDialogController\n} from './AddTileDialogController';\n\nexport interface IAddTileDialogService {\n  show(groups, activeGroupIndex): angular.IPromise < any > ;\n}\n\nexport interface IAddTileDialogprovider {\n  configTilesList(list: [AddTileDialog[]]): void;\n}\n\n{\n  const setTranslations = function($injector: ng.auto.IInjectorService) {\n    const pipTranslate = $injector.has('pipTranslateProvider') ? $injector.get('pipTranslateProvider') : null;\n    if (pipTranslate) {\n      (<any>pipTranslate).setTranslations('en', {\n        DASHBOARD_ADD_TILE_DIALOG_TITLE: 'Add component',\n        DASHBOARD_ADD_TILE_DIALOG_USE_HOT_KEYS: 'Use \"Enter\" or \"+\" buttons on keyboard to encrease and \"Delete\" or \"-\" to decrease tiles amount',\n        DASHBOARD_ADD_TILE_DIALOG_CREATE_NEW_GROUP: 'Create new group'\n      });\n      (<any>pipTranslate).setTranslations('ru', {\n        DASHBOARD_ADD_TILE_DIALOG_TITLE: 'Добавить компонент',\n        DASHBOARD_ADD_TILE_DIALOG_USE_HOT_KEYS: 'Используйте \"Enter\" или \"+\" клавиши на клавиатуре чтобы увеличить и \"Delete\" or \"-\" чтобы уменшить количество тайлов',\n        DASHBOARD_ADD_TILE_DIALOG_CREATE_NEW_GROUP: 'Создать новую группу'\n      });\n    }\n  }\n\n  class AddTileDialogService implements IAddTileDialogService {\n    public constructor(\n      private widgetList: [AddTileDialog[]],\n      private $mdDialog: angular.material.IDialogService\n    ) {}\n\n    public show(groups, activeGroupIndex) {\n      return this.$mdDialog\n        .show({\n          templateUrl: 'add_tile_dialog/AddTile.html',\n          bindToController: true,\n          controller: AddTileDialogController,\n          controllerAs: 'dialogCtrl',\n          clickOutsideToClose: true,\n          resolve: {\n            groups: () => {\n              return groups;\n            },\n            activeGroupIndex: () => {\n              return activeGroupIndex;\n            },\n            widgetList: () => {\n              return (<any>this.widgetList);\n            }\n          }\n        });\n    };\n  }\n\n  class AddTileDialogProvider implements IAddTileDialogprovider {\n    private _service: AddTileDialogService;\n    private _tilesList: [AddTileDialog[]] = null;\n\n    constructor() {}\n\n    public configTilesList = function (list: [AddTileDialog[]]) {\n      this._tilesList = list;\n    };\n\n    public $get($mdDialog: angular.material.IDialogService) {\n      \"ngInject\";\n\n      if (this._service == null)\n        this._service = new AddTileDialogService(this._tilesList, $mdDialog);\n\n      return this._service;\n    }\n  }\n\n  angular\n    .module('pipAddDashboardTileDialog')\n    .config(setTranslations)\n    .provider('pipAddTileDialog', AddTileDialogProvider);\n}","angular\n    .module('pipAddDashboardTileDialog', ['ngMaterial']);\n\nimport './AddTileDialogController';\nimport './AddTileProvider';","export interface IDashboardTile {\n    options: any;\n    color: string;\n    size: Object | string | number;\n    menu: any;\n}\n\nexport class DashboardTile implements IDashboardTile {\n    public options: any;\n    public color: string;\n    public size: Object | string | number;\n    public menu: any = [{\n        title: 'Change Size',\n        action: angular.noop,\n        submenu: [{\n                title: '1 x 1',\n                action: () => { this.changeSize({sizeX: 1, sizeY: 1}) },\n                params: {\n                    sizeX: 1,\n                    sizeY: 1\n                }\n            },\n            {\n                title: '2 x 1',\n                action: 'changeSize',\n                params: {\n                    sizeX: 2,\n                    sizeY: 1\n                }\n            },\n            {\n                title: '2 x 2',\n                action: 'changeSize',\n                params: {\n                    sizeX: 2,\n                    sizeY: 2\n                }\n            }\n        ]\n    }];\n\n    constructor() {}\n\n    protected changeSize(params) {\n        this.options.size.colSpan = params.sizeX;\n        this.options.size.rowSpan = params.sizeY;\n    }\n}","{\n    angular.module('pipDashboard')\n        .directive('pipDynamicTile', function (\n            $templateRequest: angular.ITemplateRequestService,\n            $compile: angular.ICompileService,\n            $interpolate: angular.IInterpolateService\n        ) {\n            return {\n                restrict: 'E',\n                scope: {\n                    options: '=pipOptions'\n                },\n                templateUrl: 'common_tile/DynamicTile.html',\n                controller: '@',\n                name: 'controller',\n                controllerAs: '$ctrl',\n                bindToController: true,\n                link: function ($scope, $element, $attrs) {\n                    const DEFAULT_MENU = [{\n                        title: 'Change Size',\n                        action: angular.noop,\n                        submenu: [{\n                                title: '1 x 1',\n                                action: () => {\n                                    setSizes(1, 1);\n                                },\n                                params: {\n                                    sizeX: 1,\n                                    sizeY: 1\n                                }\n                            },\n                            {\n                                title: '2 x 1',\n                                action: () => {\n                                    setSizes(2, 1);\n                                },\n                                params: {\n                                    sizeX: 2,\n                                    sizeY: 1\n                                }\n                            },\n                            {\n                                title: '2 x 2',\n                                action: () => {\n                                    setSizes(2, 2);\n                                },\n                                params: {\n                                    sizeX: 2,\n                                    sizeY: 2\n                                }\n                            }\n                        ]\n                    }];\n\n                    angular.extend($scope['$ctrl'].options.menu, DEFAULT_MENU);\n\n                    if (angular.isDefined($attrs['controllerAs']) && $attrs['controllerAs']) {\n                        $scope[$attrs['controllerAs']] = $scope['$ctrl'];\n                    }\n\n                    if (angular.isDefined($attrs['template'])) {\n                        $templateRequest($attrs['template']).then((html) => {\n                            $element.find('pip-specific-template').replaceWith($compile(html)($scope));\n                        });\n                    }\n\n                    function setSizes(x, y) {\n                        $scope['$ctrl'].options.size.colSpan = x;\n                        $scope['$ctrl'].options.size.rowSpan = y;\n                    }\n                }\n            }\n        })\n}","\nclass TileColors {\n    static all: string[] = ['purple', 'green', 'gray', 'orange', 'blue'];\n}\n\nclass TileSizes {\n    static all: any = [{\n            name: 'DASHBOARD_TILE_CONFIG_DIALOG_SIZE_SMALL',\n            id: '11'\n        },\n        {\n            name: 'DASHBOARD_TILE_CONFIG_DIALOG_SIZE_WIDE',\n            id: '21'\n        },\n        {\n            name: 'DASHBOARD_TILE_CONFIG_DIALOG_SIZE_LARGE',\n            id: '22'\n        }\n    ];\n}\n\nexport class TileConfigDialogController {\n    public colors: string[] = TileColors.all;\n    public sizes: any = TileSizes.all;\n    public sizeId: string = TileSizes.all[0].id;\n    public onCancel: Function;\n\n    constructor(\n        public params,\n        public extensionUrl,\n        public $mdDialog: angular.material.IDialogService\n    ) {\n        \"ngInject\";\n\n        angular.extend(this, this.params);\n        this.sizeId = '' + this.params.size.colSpan + this.params.size.rowSpan;\n\n        this.onCancel = () => {\n            this.$mdDialog.cancel();\n        }\n    }\n\n    public onApply(updatedData) {\n        this['size'].sizeX = Number(this.sizeId.substr(0, 1));\n        this['size'].sizeY = Number(this.sizeId.substr(1, 1));\n        this.$mdDialog.hide(updatedData);\n    }\n}","{    \n    interface ITileConfigExtendComponentBindings {\n        [key: string]: any;\n\n        pipExtensionUrl: any;\n        pipDialogScope: any;\n        pipApply: any;\n    }\n\n    const TileConfigExtendComponentBindings: ITileConfigExtendComponentBindings = {\n        pipExtensionUrl: '<',\n        pipDialogScope: '<',\n        pipApply: '&'\n    }\n\n    class TileConfigExtendComponentChanges implements ng.IOnChangesObject, ITileConfigExtendComponentBindings {\n        [key: string]: ng.IChangesObject<any>;\n\n        pipExtensionUrl: ng.IChangesObject<string>;\n        pipDialogScope: ng.IChangesObject<ng.IScope>;\n\n        pipApply: ng.IChangesObject<({updatedData: any}) => ng.IPromise<void>>;\n    }\n\n    interface ITileConfigExtendComponentAttributes extends ng.IAttributes {\n        pipExtensionUrl: string\n    }\n\n    class TileConfigExtendComponentController implements ITileConfigExtendComponentBindings {\n        public pipExtensionUrl: string;\n        public pipDialogScope: ng.IScope;\n        public pipApply: (param: {updatedData: any}) => ng.IPromise<void>;\n\n        constructor(\n            private $templateRequest: angular.ITemplateRequestService,\n            private $compile: angular.ICompileService,\n            private $scope: angular.IScope, \n            private $element: JQuery, \n            private $attrs: ITileConfigExtendComponentAttributes\n        ) { }\n\n        public $onChanges(changes: TileConfigExtendComponentChanges) {\n            if (changes.pipDialogScope) {\n                delete changes.pipDialogScope.currentValue['$scope'];\n                angular.extend(this, changes.pipDialogScope.currentValue);\n            }\n            if (changes.pipExtensionUrl && changes.pipExtensionUrl.currentValue) {\n                this.$templateRequest(changes.pipExtensionUrl.currentValue, false).then((html) => {\n                    this.$element.find('pip-extension-point').replaceWith(this.$compile(html)(this.$scope));\n                });\n            }\n        }\n\n        public onApply() {\n            this.pipApply({updatedData: this});\n        }\n    }\n\n    const pipTileConfigComponent: ng.IComponentOptions = {\n        templateUrl: 'config_tile_dialog/ConfigDialogExtendComponent.html',\n        controller: TileConfigExtendComponentController,\n        bindings: TileConfigExtendComponentBindings\n    }\n\n    angular\n        .module('pipConfigDashboardTileDialog')\n        .component('pipTileConfigExtendComponent', pipTileConfigComponent);\n}","import { TileConfigDialogController } from './ConfigDialogController';\n\nexport interface ITileConfigService {\n    show(params: ITileConfigDialogOptions, successCallback ? : (key) => void, cancelCallback ? : () => void): any;\n}\n\nexport interface ITileConfigDialogOptions extends angular.material.IDialogOptions {\n    dialogClass?: string;\n    extensionUrl?: string;\n    event?: any;\n}\n\n{\n    const setTranslations = function($injector: ng.auto.IInjectorService) {\n        const pipTranslate = $injector.has('pipTranslateProvider') ? $injector.get('pipTranslateProvider') : null;\n        if (pipTranslate) {\n            ( < any > pipTranslate).setTranslations('en', {\n                DASHBOARD_TILE_CONFIG_DIALOG_TITLE: 'Edit tile',\n                DASHBOARD_TILE_CONFIG_DIALOG_SIZE_SMALL: 'Small',\n                DASHBOARD_TILE_CONFIG_DIALOG_SIZE_WIDE: 'Wide',\n                DASHBOARD_TILE_CONFIG_DIALOG_SIZE_LARGE: 'Large'\n            });\n            ( < any > pipTranslate).setTranslations('ru', {\n                DASHBOARD_TILE_CONFIG_DIALOG_TITLE: 'Изменить виджет',\n                DASHBOARD_TILE_CONFIG_DIALOG_SIZE_SMALL: 'Мален.',\n                DASHBOARD_TILE_CONFIG_DIALOG_SIZE_WIDE: 'Широкий',\n                DASHBOARD_TILE_CONFIG_DIALOG_SIZE_LARGE: 'Большой'\n            });\n        }\n    }\n\n    class TileConfigDialogService {\n        public constructor(\n            public $mdDialog: angular.material.IDialogService\n        ) {}\n\n        public show(params: ITileConfigDialogOptions, successCallback ? : (key) => void, cancelCallback ? : () => void) {\n            this.$mdDialog.show({\n                    targetEvent: params.event,\n                    templateUrl: params.templateUrl || 'config_tile_dialog/ConfigDialog.html',\n                    controller: TileConfigDialogController,\n                    bindToController: true,\n                    controllerAs: 'vm',\n                    locals: {\n                        extensionUrl: params.extensionUrl,\n                        params: params.locals\n                    },\n                    clickOutsideToClose: true\n                })\n                .then((key) => {\n                    if (successCallback) {\n                        successCallback(key);\n                    }\n                }, () => {\n                    if (cancelCallback) {\n                        cancelCallback();\n                    }\n                });\n        }\n    }\n\n    angular\n        .module('pipConfigDashboardTileDialog')\n        .config(setTranslations)\n        .service('pipTileConfigDialogService', TileConfigDialogService);\n}","\nangular\n    .module('pipConfigDashboardTileDialog', ['ngMaterial']);\n\nimport './ConfigDialogController';\nimport './ConfigDialogService';\nimport './ConfigDialogExtendComponent';","import {\n  ITileTemplateService\n} from '../utility/TileTemplateUtility';\nimport {\n  IAddTileDialogService,\n  IAddTileDialogprovider\n} from '../add_tile_dialog/AddTileProvider'\nimport {IDashboardService, IDashboardTileTypeOptions} from '../utility/IDashboardService';\n\n{\n  const setTranslations = function ($injector: ng.auto.IInjectorService) {\n    const pipTranslate = $injector.has('pipTranslateProvider') ? $injector.get('pipTranslateProvider') : null;\n    if (pipTranslate) {\n      ( < any > pipTranslate).setTranslations('en', {\n        DROP_TO_CREATE_NEW_GROUP: 'Drop here to create new group',\n      });\n      ( < any > pipTranslate).setTranslations('ru', {\n        DROP_TO_CREATE_NEW_GROUP: 'Перетащите сюда для создания новой группы'\n      });\n    }\n  }\n\n  const configureAvailableWidgets = function (pipAddTileDialogProvider: IAddTileDialogprovider) {\n    pipAddTileDialogProvider.configTilesList([\n      [{\n          title: 'Event',\n          icon: 'document',\n          name: 'event',\n          amount: 0\n        },\n        {\n          title: 'Position',\n          icon: 'location',\n          name: 'position',\n          amount: 0\n        }\n      ],\n      [{\n          title: 'Calendar',\n          icon: 'date',\n          name: 'calendar',\n          amount: 0\n        },\n        {\n          title: 'Sticky Notes',\n          icon: 'note-take',\n          name: 'notes',\n          amount: 0\n        },\n        {\n          title: 'Statistics',\n          icon: 'tr-statistics',\n          name: 'statistics',\n          amount: 0\n        }\n      ]\n    ]);\n  }\n\n  class draggableOptions {\n    tileWidth: number;\n    tileHeight: number;\n    gutter: number;\n    inline: boolean;\n  }\n\n  const DEFAULT_GRID_OPTIONS: draggableOptions = {\n    tileWidth: 150, // 'px'\n    tileHeight: 150, // 'px'\n    gutter: 10, // 'px'\n    inline: false\n  };\n\n  interface DashboardBindings {\n      gridOptions: any;\n      groupAdditionalActions: any;\n      groupedWidgets: any;\n  }\n\n  class DashboardController implements ng.IController, DashboardBindings {\n    private defaultGroupMenuActions: any = [{\n        title: 'Add Component',\n        callback: (groupIndex) => {\n          this.addComponent(groupIndex);\n        }\n      },\n      {\n        title: 'Remove',\n        callback: (groupIndex) => {\n          this.removeGroup(groupIndex);\n        }\n      },\n      {\n        title: 'Configurate',\n        callback: (groupIndex) => {\n          console.log('configurate group with index:', groupIndex);\n        }\n      }\n    ];\n    private _includeTpl: string = '<pip-{{ type }}-tile group=\"groupIndex\" index=\"index\"' +\n      'pip-options=\"$parent.$ctrl.groupedWidgets[groupIndex][\\'source\\'][index].opts\">' +\n      '</pip-{{ type }}-tile>';\n    private _dynamicTileTpl: string = '<pip-dynamic-tile controller=\"{{ ctrl }}\"' + \n    ' template=\"{{ tmpl }}\" class=\"{{ class }}\" controller-as=\"{{ ctrlAs }}\" ' + \n    'pip-options=\"$parent.$ctrl.groupedWidgets[groupIndex][\\'source\\'][index].opts\"></pip-dynamic-tile>';\n\n    public groupedWidgets: any;\n    public draggableGridOptions: draggableOptions;\n    public widgetsTemplates: any;\n    public groupMenuActions: any = this.defaultGroupMenuActions;\n    public widgetsContext: any;\n    public gridOptions: any;\n    public groupAdditionalActions: any;\n\n    constructor(\n      $scope: angular.IScope,\n      private $rootScope: angular.IRootScopeService,\n      private $attrs: any,\n      private $element: any,\n      private $timeout: angular.ITimeoutService,\n      private $interpolate: angular.IInterpolateService,\n      private pipAddTileDialog: IAddTileDialogService,\n      private pipTileTemplate: ITileTemplateService,\n      private pipDashboard: IDashboardService\n    ) {\n      // Add class to style scroll bar\n      $element.addClass('pip-scroll');\n\n      // Set tiles grid options\n      this.draggableGridOptions = this.gridOptions || DEFAULT_GRID_OPTIONS;\n\n      // Switch inline displaying\n      if (this.draggableGridOptions.inline === true) {\n        $element.addClass('inline-grid');\n      }\n      // Extend group's menu actions\n      if (this.groupAdditionalActions) angular.extend(this.groupMenuActions, this.groupAdditionalActions);\n\n      // Compile widgets\n      this.widgetsContext = $scope;\n      this.compileWidgets();\n\n      this.$timeout(() => {\n        this.$element.addClass('visible');\n      }, 700);\n    }\n\n    private compileWidgets() {\n      _.each(this.groupedWidgets, (group, groupIndex) => {\n        group.removedWidgets = group.removedWidgets || [],\n          group.source = group.source.map((widget, index) => {\n            let type: IDashboardTileTypeOptions;\n            let specificType: boolean = false;\n            // Establish default props\n            widget.size = widget.size || {\n              colSpan: 1,\n              rowSpan: 1\n            };\n            widget.index = index;\n            widget.groupIndex = groupIndex;\n            widget.menu = widget.menu || [];\n            if (type = this.pipDashboard.getTypeByName(widget.type)) {\n              widget.ctrl = type.controller;\n              widget.tmpl = type.templateUrl || type.template;\n              widget.ctrlAs = type.controllerAs;\n              widget.class = type.class;\n\n              specificType = true;\n            }\n            angular.extend(widget.menu, [{\n              title: 'Remove',\n              click: (item, params, object) => {\n                this.removeWidget(item, params, object);\n              }\n            }]);\n\n            return {\n              opts: widget.opts || widget,\n              template:this.pipTileTemplate.getTemplate(widget, this._dynamicTileTpl)\n            };\n          })\n      });\n    }\n\n    public addComponent(groupIndex) {\n      this.pipAddTileDialog\n        .show(this.groupedWidgets, groupIndex)\n        .then((data) => {\n          var activeGroup;\n\n          if (!data) {\n            return;\n          }\n\n          if (data.groupIndex !== -1) {\n            activeGroup = this.groupedWidgets[data.groupIndex];\n          } else {\n            activeGroup = {\n              title: 'New group',\n              source: []\n            };\n          }\n\n          this.addWidgets(activeGroup.source, data.widgets);\n\n          if (data.groupIndex === -1) {\n            this.groupedWidgets.push(activeGroup);\n          }\n\n          this.compileWidgets();\n        });\n    };\n\n    public removeGroup = (groupIndex) => {\n      this.groupedWidgets.splice(groupIndex, 1);\n    }\n\n    private addWidgets(group, widgets) {\n      widgets.forEach((widgetGroup) => {\n        widgetGroup.forEach((widget) => {\n          if (widget.amount) {\n            Array.apply(null, Array(widget.amount)).forEach(() => {\n              group.push({\n                type: widget.name\n              });\n            });\n          }\n        });\n      });\n    }\n\n    private removeWidget(item, params, object) {\n      this.groupedWidgets[params.options.groupIndex].removedWidgets = [];\n      this.groupedWidgets[params.options.groupIndex].removedWidgets.push(params.options.index);\n      this.groupedWidgets[params.options.groupIndex].source.splice(params.options.index, 1);\n      this.$timeout(() => {\n        this.groupedWidgets[params.options.groupIndex].removedWidgets = [];\n      });\n    }\n\n  }\n\n  const Dashboard: ng.IComponentOptions = {\n    bindings: {\n      gridOptions: '=pipGridOptions',\n      groupAdditionalActions: '=pipGroupActions',\n      groupedWidgets: '=pipGroups'\n    },\n    controller: DashboardController,\n    templateUrl: 'dashboard/Dashboard.html'\n  }\n\n  angular\n    .module('pipDashboard')\n    .config(configureAvailableWidgets)\n    .config(setTranslations)\n    .component('pipDashboard', Dashboard);\n\n}","declare var interact;\n\nimport {\n  DragTileService,\n  IDragTileService,\n  IDragTileConstructor\n} from './DraggableTileService';\nimport {\n  TilesGridService,\n  ITilesGridService,\n  ITilesGridConstructor\n} from '../tile_group/TileGroupService';\n\nexport const DEFAULT_TILE_WIDTH: number = 150;\nexport const DEFAULT_TILE_HEIGHT: number = 150;\nexport const UPDATE_GROUPS_EVENT = \"pipUpdateDashboardGroupsConfig\";\n\nconst SIMPLE_LAYOUT_COLUMNS_COUNT: number = 2;\nconst DEFAULT_OPTIONS = {\n  tileWidth: DEFAULT_TILE_WIDTH, // 'px'\n  tileHeight: DEFAULT_TILE_HEIGHT, // 'px'\n  gutter: 0, // 'px'\n  container: 'pip-draggable-grid:first-of-type',\n  //mobileBreakpoint       : XXX,   // Get from pipMedia Service in the constructor\n  activeDropzoneClass: 'dropzone-active',\n  groupContaninerSelector: '.pip-draggable-group:not(.fict-group)',\n};\n\n{\n  interface IDraggableBindings {\n      tilesTemplates: any;\n      tilesContext: any;\n      options: any;\n      groupMenuActions: any;\n      $container: JQuery;\n  }\n\n  interface IDraggableControllerScope extends ng.IScope {\n    $container: JQuery;\n    tilesTemplates: any;\n    options: any;\n  }\n\n  interface ITileScope extends ng.IScope {\n    index: number | string;\n    groupIndex: number | string;\n  }\n\n  class DraggableController implements ng.IComponentController, IDraggableBindings {\n    public opts: any;\n    public groups: any;\n    public sourceDropZoneElem: any = null;\n    public isSameDropzone: boolean = true;\n    public tileGroups: any = null;\n    public availableWidth: number;\n    public availableColumns: number;\n    public groupsContainers: any;\n    public container: any;\n    public activeDraggedGroup: any;\n    public draggedTile: any;\n    public containerOffset: any;\n    public tilesTemplates: any;\n    public tilesContext: any;\n    public options: any;\n    public groupMenuActions: any;\n    public $container: JQuery;\n\n    constructor(\n      private $scope: IDraggableControllerScope,\n      private $rootScope: angular.IRootScopeService,\n      private $compile: angular.ICompileService,\n      private $timeout: angular.ITimeoutService,\n      private $element: JQuery,\n      pipDragTile: IDragTileService,\n      pipTilesGrid: ITilesGridService,\n      pipMedia: pip.layouts.IMediaService\n    ) {\n      this.opts = _.merge({\n        mobileBreakpoint: pipMedia.breakpoints.xs\n      }, DEFAULT_OPTIONS, this.options);\nconsole.log('this.options', this.options);\n\nconsole.log('this.opts', this.opts);\n      this.groups = this.tilesTemplates.map((group, groupIndex) => {\n        return {\n          title: group.title,\n          editingName: false,\n          index: groupIndex,\n          source: group.source.map((tile) => {\n            const tileScope = this.createTileScope(tile);\n\n            return IDragTileConstructor(DragTileService, {\n              tpl: $compile(tile.template)(tileScope),\n              options: tile.opts,\n              size: tile.opts.size\n            });\n          })\n        };\n      });\n\n      // Add templates watcher\n      $scope.$watch('$ctrl.tilesTemplates', (newVal) => {\n        this.watch(newVal);\n      }, true);\n\n      // Initialize data\n      this.initialize();\n\n      // Resize handler TODO: replace by pip resize watchers\n      $(window).on('resize', _.debounce(() => {\n        this.availableWidth = this.getContainerWidth();\n        this.availableColumns = this.getAvailableColumns(this.availableWidth);\n\n        this.tileGroups.forEach((group) => {\n          group\n            .setAvailableColumns(this.availableColumns)\n            .generateGrid(this.getSingleTileWidthForMobile(this.availableWidth))\n            .setTilesDimensions()\n            .calcContainerHeight();\n        });\n      }, 50));\n\n      this.$rootScope.$on('draggable:start', (data, event) => {\n        this.onDragStartListener(event);\n      });\n\n      this.$rootScope.$on('draggable:move', (data, event) => {\n        this.onDragMoveListener(event);\n      });\n\n      this.$rootScope.$on('draggable:end', (data, event) => {\n        this.onDragEndListener();\n      });\n    }\n\n    // Post link function\n    public $postLink() {\n      this.$container = this.$element;\n    }\n\n    // Watch handler\n    private watch(newVal) {\n      const prevVal = this.groups;\n      let changedGroupIndex = null;\n\n      if (newVal.length > prevVal.length) {\n        this.addGroup(newVal[newVal.length - 1]);\n\n        return;\n      }\n\n      if (newVal.length < prevVal.length) {\n        this.removeGroups(newVal);\n\n        return;\n      }\n\n      for (let i = 0; i < newVal.length; i++) {\n        const groupWidgetDiff = prevVal[i].source.length - newVal[i].source.length;\n        if (groupWidgetDiff || (newVal[i].removedWidgets && newVal[i].removedWidgets.length > 0)) {\n          changedGroupIndex = i;\n\n          if (groupWidgetDiff < 0) {\n            const newTiles = newVal[changedGroupIndex].source.slice(groupWidgetDiff);\n\n            _.each(newTiles, (tile) => {\n              console.log('tile', tile);\n            });\n\n            this.addTilesIntoGroup(newTiles, this.tileGroups[changedGroupIndex], this.groupsContainers[changedGroupIndex]);\n\n            this.$timeout(() => {\n              this.updateTilesGroups();\n            });\n          } else {\n            this.removeTiles(this.tileGroups[changedGroupIndex], newVal[changedGroupIndex].removedWidgets, this.groupsContainers[changedGroupIndex]);\n            this.updateTilesOptions(newVal);\n            this.$timeout(() => {\n              this.updateTilesGroups();\n            });\n          }\n\n          return;\n        }\n      }\n\n      if (newVal && this.tileGroups) {\n        this.updateTilesOptions(newVal);\n        this.$timeout(() => {\n          this.updateTilesGroups();\n        });\n      }\n    }\n\n    // Inline edit group handlers\n    public onTitleClick(group, event) {\n      if (!group.editingName) {\n        group.oldTitle = _.clone(group.title);\n        group.editingName = true;\n        this.$timeout(() => {\n          $(event.currentTarget.children[0]).focus();\n        });\n      }\n    }\n\n    public cancelEditing(group) {\n      group.title = group.oldTitle;\n    }\n\n    public onBlurTitleInput(group) {\n      this.$timeout(() => {\n        group.editingName = false;\n        this.$rootScope.$broadcast(UPDATE_GROUPS_EVENT, this.groups);\n        // Update title in outer scope\n        this.tilesTemplates[group.index].title = group.title;\n      }, 100);\n    }\n\n    public onKyepressTitleInput(group, event) {\n      if (event.keyCode === 13) {\n        this.onBlurTitleInput(group);\n      }\n    }\n\n    // Update outer scope functions\n    private updateTilesTemplates(updateType: string, source ? : any) {\n      switch (updateType) {\n        case 'addGroup':\n          if (this.groups.length !== this.tilesTemplates.length) {\n            this.tilesTemplates.push(source);\n          }\n          break;\n        case 'moveTile':\n          const {\n            fromIndex,\n            toIndex,\n            tileOptions,\n            fromTileIndex\n          } = {\n            fromIndex: source.from.elem.attributes['data-group-id'].value,\n            toIndex: source.to.elem.attributes['data-group-id'].value,\n            tileOptions: source.tile.opts.options,\n            fromTileIndex: source.tile.opts.options.index\n          }\n          this.tilesTemplates[fromIndex].source.splice(fromTileIndex, 1);\n          this.tilesTemplates[toIndex].source.push({\n            opts: tileOptions\n          });\n\n          this.reIndexTiles(source.from.elem);\n          this.reIndexTiles(source.to.elem);\n          break;\n      }\n    }\n\n    // Manage tiles functions\n    private createTileScope(tile: any): ITileScope {\n      const tileScope = < ITileScope > this.$rootScope.$new(false, this.tilesContext);\n      tileScope.index = tile.opts.index == undefined ? tile.opts.options.index : tile.opts.index;\n      tileScope.groupIndex = tile.opts.groupIndex == undefined ? tile.opts.options.groupIndex : tile.opts.groupIndex;\n\n      return tileScope;\n    }\n\n    private removeTiles(group, indexes, container) {\n      const tiles = $(container).find('.pip-draggable-tile');\n\n      _.each(indexes, (index) => {\n        group.tiles.splice(index, 1);\n        tiles[index].remove();\n      });\n\n      this.reIndexTiles(container);\n    }\n\n    private reIndexTiles(container, gIndex ? ) {\n      const tiles = $(container).find('.pip-draggable-tile'),\n        groupIndex = gIndex === undefined ? container.attributes['data-group-id'].value : gIndex;\n\n      _.each(tiles, (tile, index) => {\n        const child = $(tile).children()[0];\n        angular.element(child).scope()['index'] = index;\n        angular.element(child).scope()['groupIndex'] = groupIndex;\n      });\n    }\n\n    private removeGroups(newGroups) {\n      const removeIndexes = [],\n        remain = [],\n        containers = [];\n\n      _.each(this.groups, (group, index) => {\n        if (_.findIndex(newGroups, (g) => {\n            return g['title'] === group.title\n          }) < 0) {\n          removeIndexes.push(index);\n        } else {\n          remain.push(index);\n        }\n      });\n\n      _.each(removeIndexes.reverse(), (index) => {\n        this.groups.splice(index, 1);\n        this.tileGroups.splice(index, 1);\n      });\n\n      _.each(remain, (index) => {\n        containers.push(this.groupsContainers[index]);\n      });\n\n      this.groupsContainers = containers;\n\n      _.each(this.groupsContainers, (container, index) => {\n        this.reIndexTiles(container, index);\n      });\n    }\n\n    private addGroup(sourceGroup, afterFict = false) {\n      const group = {\n        title: sourceGroup.title,\n        source: sourceGroup.source.map((tile) => {\n          const tileScope = this.createTileScope(tile);\n\n          return IDragTileConstructor(DragTileService, {\n            tpl: this.$compile(this.wrapComponent(tile.template))(tileScope),\n            options: tile.opts,\n            size: tile.opts.size\n          });\n        })\n      };\n\n      this.groups.push(group);\n      if (afterFict && !this.$scope.$$phase) this.$scope.$apply();\n\n      this.$timeout(() => {\n        this.groupsContainers = document.querySelectorAll(this.opts.groupContaninerSelector);\n        this.tileGroups.push(\n          ITilesGridConstructor(TilesGridService, group.source, this.opts, this.availableColumns, this.groupsContainers[this.groupsContainers.length - 1])\n          .generateGrid(this.getSingleTileWidthForMobile(this.availableWidth))\n          .setTilesDimensions()\n          .calcContainerHeight()\n        );\n      });\n\n      this.updateTilesTemplates('addGroup', sourceGroup);\n    }\n\n    private wrapComponent(content): any {\n      return $('<div>')\n          .addClass('pip-draggable-tile')\n          .attr('pip-drag', 'true')\n          .attr('pip-scroll-container', \"'.pip-dashboard-scroll'\")\n          .append(content)\n          .get(0);\n    }\n\n    private addTilesIntoGroup(newTiles, group, groupContainer) {\n      newTiles.forEach((tile) => {\n        const tileScope = this.createTileScope(tile);\n\n        const newTile = IDragTileConstructor(DragTileService, {\n          tpl: this.$compile(this.wrapComponent(tile.template))(tileScope),\n          options: tile.opts,\n          size: tile.opts.size\n        });\n\n        group.addTile(newTile);\n\n        $(newTile.getCompiledTemplate())\n          .appendTo(groupContainer);\n      });\n    }\n\n    private updateTilesOptions(optionsGroup) {\n      optionsGroup.forEach((optionGroup) => {\n        optionGroup.source.forEach((tileOptions) => {\n          this.tileGroups.forEach((group) => {\n            group.updateTileOptions(tileOptions.opts);\n          });\n        });\n      });\n    }\n\n    private initTilesGroups(tileGroups, opts, groupsContainers) {\n      return tileGroups.map((group, index) => {\n        return ITilesGridConstructor(TilesGridService, group.source, opts, this.availableColumns, groupsContainers[index])\n          .generateGrid(this.getSingleTileWidthForMobile(this.availableWidth))\n          .setTilesDimensions()\n          .calcContainerHeight();\n      });\n    }\n\n    private updateTilesGroups(onlyPosition ? , draggedTile ? ) {\n      this.tileGroups.forEach((group) => {\n        if (!onlyPosition) {\n          group.generateGrid(this.getSingleTileWidthForMobile(this.availableWidth));\n        }\n\n        group\n          .setTilesDimensions(onlyPosition, draggedTile)\n          .calcContainerHeight(this.options.tileHeight);\n      });\n    }\n\n    private getContainerWidth(): any {\n      const container = this.$container || $('body');\n      return container.width();\n    }\n\n    private getAvailableColumns(availableWidth): any {\n      return this.opts.mobileBreakpoint > availableWidth ? SIMPLE_LAYOUT_COLUMNS_COUNT :\n        Math.floor(availableWidth / (this.opts.tileWidth + this.opts.gutter));\n    }\n\n    private getActiveGroupAndTile(elem): any {\n      const active = {};\n\n      this.tileGroups.forEach((group) => {\n        const foundTile = group.getTileByNode(elem);\n\n        if (foundTile) {\n          active['group'] = group;\n          active['tile'] = foundTile;\n          return;\n        }\n      });\n\n      return active;\n    }\n\n    private getSingleTileWidthForMobile(availableWidth): any {\n      console.log('gut', this.opts.gutter);\n      return this.opts.mobileBreakpoint > availableWidth ? availableWidth / 2 - this.opts.gutter : null;\n    }\n\n    public onDragStartListener(event) {\n      if (!event.x) return;\nconsole.log('drag start');\n      event.target = event.element.get(0);\n\n      const activeEntities = this.getActiveGroupAndTile(event.target);\n\n      this.container = $(event.target).parent('.pip-draggable-group').get(0);\n      this.sourceDropZoneElem = this.container;\n      this.draggedTile = activeEntities['tile'];\n      this.activeDraggedGroup = activeEntities['group'];\nconsole.log('activeDraggedGroup', this.activeDraggedGroup);\n      this.$element.addClass('drag-transfer');\n\n      this.draggedTile.startDrag();\n    }\n\n    public onDragMoveListener(event) {\n      const target = event.element.get(0);\nconsole.log('drag move');\n      this.containerOffset = this.getContainerOffset();\n      \n      const belowElement = this.activeDraggedGroup.getTileByCoordinates({\n        left: event.x - this.containerOffset.left,\n        top: event.y - this.containerOffset.top\n      }, this.draggedTile);\n\n      if (belowElement) {\n        const draggedTileIndex = this.activeDraggedGroup.getTileIndex(this.draggedTile);\n        const belowElemIndex = this.activeDraggedGroup.getTileIndex(belowElement);\n\n        if ((draggedTileIndex + 1) === belowElemIndex) {\n          return;\n        }\n\n        this.activeDraggedGroup\n          .swapTiles(this.draggedTile, belowElement)\n          .setTilesDimensions(true, this.draggedTile);\n\n        this.$timeout(() => {\n          this.setGroupContainersHeight();\n        }, 0);\n      }\n    }\n\n    public onDragEndListener() {\n      if (!this.draggedTile) return;\nconsole.log('drag end');\n      this.draggedTile.stopDrag(false);\n      this.$element.removeClass('drag-transfer');\n    }\n\n    private getContainerOffset() {\n      const containerRect = this.container.getBoundingClientRect();\n\n      return {\n        left: containerRect.left,\n        top: containerRect.top\n      };\n    }\n\n    private setGroupContainersHeight() {\n      this.tileGroups.forEach((tileGroup) => {\n        tileGroup.calcContainerHeight();\n      });\n    }\n\n    private moveTile(from, to, tile) {\n      let elem;\n      const movedTile = from.removeTile(tile);\n      const tileScope = this.createTileScope(tile);\n\n      $(this.groupsContainers[_.findIndex(this.tileGroups, from)])\n        .find(movedTile.getElem())\n        .remove();\n\n      if (to !== null) {\n        to.addTile(movedTile);\n\n        elem = this.$compile(movedTile.getElem())(tileScope);\n        $(this.groupsContainers[_.findIndex(this.tileGroups, to)])\n          .append(elem);\n\n        this.$timeout(to.setTilesDimensions.bind(to, true));\n      }\n\n      this.updateTilesTemplates('moveTile', {\n        from: from,\n        to: to,\n        tile: movedTile\n      });\n    }\n\n    public onDropListener(droppedGroupIndex, event) {\n      if (!this.draggedTile) return;\n\n      const droppedGroup = this.tileGroups[droppedGroupIndex];\n\n      if (this.activeDraggedGroup !== droppedGroup) {\n        this.moveTile(this.activeDraggedGroup, droppedGroup, this.draggedTile);\n      }\n\n      this.groupsContainers[droppedGroupIndex].classList.remove(this.opts.activeDropzoneClass);\n      $('body').css('cursor', '');\n\n      this.updateTilesGroups(true);\n      this.sourceDropZoneElem = null;\n      this.activeDraggedGroup = null;\n      this.draggedTile = null;\n    }\n\n    public onDropToFictGroupListener(event) {\n      const from = this.activeDraggedGroup;\n      const tile = this.draggedTile;\n\n      this.addGroup({\n        title: 'New group',\n        source: []\n      }, true);\n      this.$timeout(() => {\n        this.moveTile(from, this.tileGroups[this.tileGroups.length - 1], tile);\n        this.updateTilesGroups(true);\n      });\n      $('body').css('cursor', '');\n\n      this.sourceDropZoneElem = null;\n      this.activeDraggedGroup = null;\n      this.draggedTile = null;\n    }\n\n    public onDropEnterListener(groupIndex, event) {\n      if (!this.sourceDropZoneElem) {\n        this.sourceDropZoneElem = this.groupsContainers[groupIndex];\n      }\nconsole.log('sourceDropZoneElem', this.sourceDropZoneElem);\n      if (groupIndex !== null && this.sourceDropZoneElem !== this.groupsContainers[groupIndex]) {\n        this.groupsContainers[groupIndex].classList.add('dropzone-active');\n        $('body').css('cursor', 'copy');\n        this.isSameDropzone = false;\n      } else {\n        $('body').css('cursor', '');\n        this.isSameDropzone = true;\n      }\n    }\n\n    public onDropDeactivateListener(groupIndex, event) {\n      if (this.sourceDropZoneElem !== event.target && groupIndex !== null) {\n        this.groupsContainers[groupIndex].classList.remove(this.opts.activeDropzoneClass);\n        $('body').css('cursor', '');\n      }\n    }\n\n    public onDropLeaveListener(groupIndex, event) {\n      if (groupIndex !== null) this.groupsContainers[groupIndex].classList.remove(this.opts.activeDropzoneClass);\n    }\n\n    private initialize() {\n      this.$timeout(() => {\n        this.availableWidth = this.getContainerWidth();\n        this.availableColumns = this.getAvailableColumns(this.availableWidth);\n        this.groupsContainers = document.querySelectorAll(this.opts.groupContaninerSelector);\n        this.tileGroups = this.initTilesGroups(this.groups, this.opts, this.groupsContainers);\n/*\n        interact('.pip-draggable-tile')\n          .draggable({\n            inertia: true,\n            autoScroll: {\n              enabled: true,\n              container: $('#content').get(0),\n              speed: 1000\n            },\n            onstart: (event) => {\n              this.onDragStartListener(event)\n            },\n            onmove: (event) => {\n              this.onDragMoveListener(event)\n            },\n            onend: (event) => {\n              this.onDragEndListener()\n            }\n          });\n\n        interact('.pip-draggable-group.fict-group')\n          .dropzone({\n            ondrop: (event) => {\n              this.onDropToFictGroupListener(event)\n            },\n            ondragenter: (event) => {\n              this.onDropEnterListener(event)\n            },\n            ondropdeactivate: (event) => {\n              this.onDropDeactivateListener(event)\n            },\n            ondragleave: (event) => {\n              this.onDropLeaveListener(event)\n            }\n          });\n\n        interact('.pip-draggable-group')\n          .dropzone({\n            ondrop: (event) => {\n              this.onDropListener(event)\n            },\n            ondragenter: (event) => {\n              this.onDropEnterListener(event)\n            },\n            ondropdeactivate: (event) => {\n              this.onDropDeactivateListener(event)\n            },\n            ondragleave: (event) => {\n              this.onDropLeaveListener(event)\n            }\n          });\n\n          */\n      }, 0);\n    }\n  }\n\n  const DragComponent: ng.IComponentOptions = {\n    bindings: {\n      tilesTemplates: '=pipTilesTemplates',\n      tilesContext: '=pipTilesContext',\n      options: '=pipDraggableGrid',\n      groupMenuActions: '=pipGroupMenuActions'\n    },\n    //controllerAs: 'DraggedCtrl',\n    templateUrl: 'draggable/Draggable.html',\n    controller: DraggableController\n  }\n\n  angular.module('pipDraggableTiles')\n    .component('pipDraggableGrid', DragComponent);\n}","export interface DragTileConstructor {\n  new (options: any);\n}\n\nexport function IDragTileConstructor(constructor: DragTileConstructor, options: any): IDragTileService {\n  return new constructor(options);\n}\n\nexport interface IDragTileService {\n  tpl: any;\n  opts: any;\n  size: any;\n  elem: any;\n  preview: any;\n  getSize(): any;\n  setSize(width, height): any;\n  setPosition(left, top): any;\n  getCompiledTemplate(): any;\n  updateElem(parent): any;\n  getElem(): any;\n  startDrag(): any;\n  stopDrag(isAnimate): any;\n  setPreviewPosition(coords): void;\n  getOptions(): any;\n  setOptions(options): any;\n}\n\nlet DEFAULT_TILE_SIZE = {\n  colSpan: 1,\n  rowSpan: 1\n};\n\nexport class DragTileService implements IDragTileService {\n  public tpl: any;\n  public opts: any;\n  public size: any;\n  public elem: any;\n  public preview: any;\n\n  constructor (options: any) {\n    this.tpl = options.tpl.get(0);\n    this.opts = options;\n    this.size = _.merge({}, DEFAULT_TILE_SIZE, options.size);\n    this.elem = null;\n  }\n\n  public getSize(): any {\n    return this.size;\n  }\n\n  public setSize(width, height): any {\n    this.size.width = width;\n    this.size.height = height;\n\n    if (this.elem) {\n      this.elem.css({\n        width: width,\n        height: height\n      });\n    }\n\n    return this;\n  }\n\n  public setPosition(left, top): any {\n    this.size.left = left;\n    this.size.top = top;\n\n    if (this.elem) {\n      this.elem.css({\n        left: left,\n        top: top\n      });\n    }\n\n    return this;\n  }\n\n  public getCompiledTemplate(): any {\n    return this.tpl;\n  };\n\n  public updateElem(parent): any {\n    this.elem = $(this.tpl).parent(parent);\n\n    return this;\n  };\n\n  public getElem(): any {\n    return this.elem.get(0);\n  };\n\n  public startDrag(): any {\n    this.preview = $('<div>')\n      .addClass('pip-dragged-preview')\n      .css({\n        position: 'absolute',\n        left: this.elem.css('left'),\n        top: this.elem.css('top'),\n        width: this.elem.css('width'),\n        height: this.elem.css('height')\n      });\n\n    this.elem\n      .addClass('no-animation')\n      .css({\n        zIndex: '9999'\n      })\n      .after(this.preview);\n\n    return this;\n  };\n\n  public stopDrag(isAnimate): any {\n    if (!this.preview) return;\n    let self = this;\n\n    if (isAnimate) {\n      self.elem\n        .removeClass('no-animation')\n        .css({\n          left: self.preview.css('left'),\n          top: self.preview.css('top')\n        })\n        .on('transitionend', () => { onTransitionEnd(); });\n    } else {\n      self.elem\n        .css({\n          left: self.preview.css('left'),\n          top: self.preview.css('top'),\n          zIndex: ''\n        })\n        .removeClass('no-animation');\n\n      self.preview.remove();\n      self.preview = null;\n    }\n\n    return this;\n\n    function onTransitionEnd() {\n      if (self.preview) {\n        self.preview.remove();\n        self.preview = null;\n      }\n\n      if (!self.elem) return;\n\n      self.elem\n        .css('zIndex', '')\n        .off('transitionend', onTransitionEnd);\n    }\n  };\n\n  public setPreviewPosition(coords) {\n    this.preview.css(coords);\n  };\n\n  public getOptions(): any {\n    return this.opts.options;\n  };\n\n  public setOptions(options): any {\n    _.merge(this.opts.options, options);\n    _.merge(this.size, options.size);\n\n    return this;\n  };\n}\n\nangular\n  .module('pipDraggableTiles')\n  .service('pipDragTile', function () {\n    return function (options) {\n      let newTile = new DragTileService(options);\n\n      return newTile;\n    }\n  });","angular.module('pipDraggableTiles', []);\n\nimport './DraggableTileService';\nimport './Draggable';","import {\n  DashboardTile\n} from '../common_tile/DashboardTile';\nimport {\n  ITileConfigService\n} from '../config_tile_dialog/ConfigDialogService';\nimport { IDashboardProvider, IDashboardTileTypeOptions } from '../utility/IDashboardService';\n{\n  class EventTileController extends DashboardTile {\n    private _oldOpacity: number;\n\n    public opacity: number = 0.57;\n\n    constructor(\n      $scope: ng.IScope,\n      private $element: JQuery,\n      private $timeout: angular.ITimeoutService,\n      private pipTileConfigDialogService: ITileConfigService\n    ) {\n      super();\n      this.options.menu.push({\n        title: 'Configurate',\n        action: () => {\n          this.onConfigClick();\n        }\n      });\n      this.color = this.options.color || 'gray';\n      this.opacity = this.options.opacity || this.opacity;\n\n      this.drawImage();\n\n      // TODO it doesn't work\n      $scope.$watch(() => {\n        return $element.is(':visible');\n      }, (newVal) => {\n        this.drawImage();\n      });\n    }\n\n    private drawImage() {\n      if (this.options.image) {\n        this.$timeout(() => {\n          this.onImageLoad(this.$element.find('img'));\n        }, 500);\n      }\n    }\n\n    private onConfigClick() {\n      this._oldOpacity = _.clone(this.opacity);\n      this.pipTileConfigDialogService.show({\n        dialogClass: 'pip-calendar-config',\n        locals: {\n          color: this.color,\n          size: this.options.size || {\n            colSpan: 1,\n            rowSpan: 1\n          },\n          date: this.options.date,\n          title: this.options.title,\n          text: this.options.text,\n          opacity: this.opacity,\n          onOpacitytest: (opacity) => {\n            this.opacity = opacity;\n          }\n        },\n        extensionUrl: 'event_tile/ConfigDialogExtension.html'\n      }, (result: any) => {\n        this.changeSize(result.size);\n\n        this.color = result.color;\n        this.options.color = result.color;\n        this.options.date = result.date;\n        this.options.title = result.title;\n        this.options.text = result.text;\n        this.options.opacity = result.opacity;\n      }, () => {\n        this.opacity = this._oldOpacity;\n      });\n    }\n\n    private onImageLoad(image) {\n      this.setImageMarginCSS(this.$element.parent(), image);\n    }\n\n    public changeSize(params) {\n      this.options.size.colSpan = params.sizeX;\n      this.options.size.rowSpan = params.sizeY;\n\n      if (this.options.image) {\n        this.$timeout(() => {\n          this.setImageMarginCSS(this.$element.parent(), this.$element.find('img'));\n        }, 500);\n      }\n    }\n\n    // Later replace by pipImageUtils sevice's function\n    private setImageMarginCSS($element, image) {\n      let\n        containerWidth = $element.width ? $element.width() : $element.clientWidth, // || 80,\n        containerHeight = $element.height ? $element.height() : $element.clientHeight, // || 80,\n        imageWidth = image[0].naturalWidth || image.width,\n        imageHeight = image[0].naturalHeight || image.height,\n        margin = 0,\n        cssParams = {};\n\n      if ((imageWidth / containerWidth) > (imageHeight / containerHeight)) {\n        margin = -((imageWidth / imageHeight * containerHeight - containerWidth) / 2);\n        cssParams['margin-left'] = '' + margin + 'px';\n        cssParams['height'] = '' + containerHeight + 'px'; //'100%';\n        cssParams['width'] = '' + imageWidth * containerHeight / imageHeight + 'px'; //'100%';\n        cssParams['margin-top'] = '';\n      } else {\n        margin = -((imageHeight / imageWidth * containerWidth - containerHeight) / 2);\n        cssParams['margin-top'] = '' + margin + 'px';\n        cssParams['height'] = '' + imageHeight * containerWidth / imageWidth + 'px'; //'100%';\n        cssParams['width'] = '' + containerWidth + 'px'; //'100%';\n        cssParams['margin-left'] = '';\n      }\n\n      image.css(cssParams);\n    }\n  }\n\n\n  const EventTile: IDashboardTileTypeOptions = {\n    name: 'event',\n    controllerAs: '$ctrl',\n    class: 'pip-event-tile',\n    controller: EventTileController,\n    templateUrl: 'event_tile/EventTile.html'\n  }\n\n  const config = function(pipDashboardProvider: IDashboardProvider) {\n    pipDashboardProvider.registerTileType(EventTile);\n  }\n\n  angular\n    .module('pipDashboard')\n    .config(config);\n}","// Import services\nimport './tile_group/index';\nimport './draggable';\n\n// Import tile services\nimport './menu_tile';\n\n// Import dialogs\nimport './add_tile_dialog';\nimport './config_tile_dialog';\n\nangular.module('pipDashboard', [\n  // Services\n  'pipDraggableTiles',\n  'pipDraggableTilesGroup',\n  // Tile services\n  'pipMenuTile',\n  // Dialogs\n  'pipConfigDashboardTileDialog',\n  'pipAddDashboardTileDialog',\n  //Templates\n  'pipDashboard.Templates',\n  // External pip modules\n  'pipLayout',\n  'pipLocations',\n  'pipDate',\n  'pipCharts',\n  'pipTranslate',\n  'pipControls',\n  'pipButtons',\n  'pipBehaviors'\n]);\n\n\n// Import utility \nimport './utility/TileTemplateUtility';\nimport './utility/DashboardService';\n// Import tiles\nimport './common_tile/DashboardTile';\nimport './common_tile/DynamicTile';\nimport './event_tile/EventTile';\nimport './note_tile/NoteTile';\nimport './picture_slider_tile/PictureSliderTile';\nimport './position_tile/PositionTile';\nimport './statistics_tile/StatisticsTile';\n// Import common component\nimport './dashboard/Dashboard';\n","{\n  const TileMenu: ng.IComponentOptions = {\n    templateUrl: 'menu_tile/MenuTile.html',\n    bindings: {\n      menu: '<pipMenu'\n    }\n  };\n\n  angular\n    .module('pipMenuTile')\n    .component('pipTileMenu', TileMenu);\n}","angular\n    .module('pipMenuTile', []);\n\nimport './MenuTileDirective';","import {\n  DashboardTile\n} from '../common_tile/DashboardTile';\nimport {\n  ITileConfigService\n} from '../config_tile_dialog/ConfigDialogService';\nimport { IDashboardProvider, IDashboardTileTypeOptions } from '../utility/IDashboardService';\n{\n  class NoteTileController extends DashboardTile {\n\n    constructor(\n      private pipTileConfigDialogService: ITileConfigService,\n      $scope\n    ) {\n      super();\n\n      this.options.menu.push({\n        title: 'Configurate',\n        action: () => {\n          this.onConfigClick();\n        }\n      });\n      this.color = this.options.color || 'orange';\n    }\n\n    private onConfigClick() {\n      this.pipTileConfigDialogService.show({\n        locals: {\n          color: this.color,\n          size: this.options.size,\n          title: this.options.title,\n          text: this.options.text,\n        },\n        extensionUrl: 'note_tile/ConfigDialogExtension.html'\n      }, (result: any) => {\n        this.color = result.color;\n        this.options.color = result.color;\n        this.changeSize(result.size);\n        this.options.text = result.text;\n        this.options.title = result.title;\n      });\n    }\n  }\n\n  const NoteTile: IDashboardTileTypeOptions = {\n    name: 'note',\n    controller: NoteTileController,\n    controllerAs: '$ctrl',\n    class: 'pip-notes-tile',\n    templateUrl: 'note_tile/NoteTile.html'\n  }\n\n  const config = function(pipDashboardProvider: IDashboardProvider) {\n    pipDashboardProvider.registerTileType(NoteTile);\n  }\n\n  angular\n    .module('pipDashboard')\n    .config(config);\n}","import {\n  DashboardTile\n} from '../common_tile/DashboardTile';\nimport {\n  ITileConfigService\n} from '../config_tile_dialog/ConfigDialogService';\nimport {\n  ITileTemplateService\n} from '../utility/TileTemplateUtility';\n\nimport { IDashboardProvider, IDashboardTileTypeOptions } from '../utility/IDashboardService';\n\n{\n  class PictureSliderController extends DashboardTile {\n    public animationType: string = 'fading';\n    public animationInterval: number = 5000;\n\n    constructor(\n      private $scope: angular.IScope,\n      private $element: any,\n      private $timeout: angular.ITimeoutService,\n      private pipTileTemplate: ITileTemplateService\n    ) {\n      super();\n\n      if (this.options) {\n        this.animationType = this.options.animationType || this.animationType;\n        this.animationInterval = this.options.animationInterval || this.animationInterval;\n      }\n    }\n\n    public onImageLoad($event) {\n      this.$timeout(() => {\n        this.pipTileTemplate.setImageMarginCSS(this.$element.parent(), $event.target);\n      });\n    }\n\n    public changeSize(params) {\n      this.options.size.colSpan = params.sizeX;\n      this.options.size.rowSpan = params.sizeY;\n\n      this.$timeout(() => {\n        _.each(this.$element.find('img'), (image) => {\n          this.pipTileTemplate.setImageMarginCSS(this.$element.parent(), image);\n        });\n      }, 500);\n    }\n  }\n\n  const PictureSliderTile:IDashboardTileTypeOptions = {\n    name: 'picture-slider',\n    controller: PictureSliderController,\n    controllerAs: '$ctrl',\n    class: 'pip-picture-slider-tile',\n    templateUrl: 'picture_slider_tile/PictureSliderTile.html'\n  }\n\n  const config = function(pipDashboardProvider: IDashboardProvider) {\n    pipDashboardProvider.registerTileType(PictureSliderTile);\n  }\n\n  angular\n    .module('pipDashboard')\n    .config(config);\n}","import {\n  DashboardTile\n} from '../common_tile/DashboardTile';\nimport {\n  ITileConfigService\n} from '../config_tile_dialog/ConfigDialogService';\nimport { IDashboardProvider, IDashboardTileTypeOptions } from '../utility/IDashboardService';\n{\n  class PositionTileController extends DashboardTile {\n    public showPosition: boolean = true;\n\n    constructor(\n      $scope: angular.IScope,\n      private $timeout: angular.ITimeoutService,\n      private $element: any,\n      private pipTileConfigDialogService: ITileConfigService,\n      private pipLocationEditDialog: any,\n    ) {\n      super();\n      this.options.menu.push({\n        title: 'Configurate',\n        action: () => {\n          this.onConfigClick();\n        }\n      });\n      this.options.menu.push({\n        title: 'Change location',\n        action: () => {\n          this.openLocationEditDialog();\n        }\n      });\n\n      this.options.location = this.options.location || this.options.position;\n\n      $scope.$watch('$ctrl.options.location', () => {\n        this.reDrawPosition();\n      });\n\n      // TODO it doesn't work\n      $scope.$watch(() => {\n        return $element.is(':visible');\n      }, (newVal) => {\n        if (newVal == true) this.reDrawPosition();\n      });\n    }\n\n    private onConfigClick() {\n      this.pipTileConfigDialogService.show({\n        dialogClass: 'pip-position-config',\n        locals: {\n          size: this.options.size,\n          locationName: this.options.locationName,\n          hideColors: true,\n        },\n        extensionUrl: 'position_tile/ConfigDialogExtension.html'\n      }, (result: any) => {\n        this.changeSize(result.size);\n        this.options.locationName = result.locationName;\n      });\n    }\n\n    public changeSize(params) {\n      this.options.size.colSpan = params.sizeX;\n      this.options.size.rowSpan = params.sizeY;\n\n      this.reDrawPosition();\n    }\n\n    public openLocationEditDialog() {\n      this.pipLocationEditDialog.show({\n        locationName: this.options.locationName,\n        locationPos: this.options.location\n      }, (newPosition) => {\n        if (newPosition) {\n          this.options.location = newPosition.location;\n          this.options.locationName = newPosition.locatioName;\n        }\n      });\n    }\n\n    private reDrawPosition() {\n      this.showPosition = false;\n      this.$timeout(() => {\n        this.showPosition = true;\n      }, 50);\n    }\n  }\n\n\n  const PositionTile: IDashboardTileTypeOptions = {\n    name: 'position',\n    class: 'pip-position-tile',\n    controllerAs: '$ctrl',\n    controller: PositionTileController,\n    templateUrl: 'position_tile/PositionTile.html'\n  }\n\n  const config = function(pipDashboardProvider: IDashboardProvider) {\n    pipDashboardProvider.registerTileType(PositionTile);\n  }\n\n  angular\n    .module('pipDashboard')\n    .config(config);\n}","import {\n  DashboardTile\n} from '../common_tile/DashboardTile';\nimport { IDashboardProvider, IDashboardTileTypeOptions } from '../utility/IDashboardService';\n{\n  const SMALL_CHART: number = 70;\n  const BIG_CHART: number = 250;\n\n  class StatisticsTileController extends DashboardTile {\n    private _$scope: angular.IScope;\n    private _$timeout: angular.ITimeoutService;\n\n    public reset: boolean = false;\n    public chartSize: number = SMALL_CHART;\n\n    constructor(\n      $scope: angular.IScope,\n      $timeout: angular.ITimeoutService\n    ) {\n      super();\n      this._$scope = $scope;\n      this._$timeout = $timeout;\n\n      if (this.options) {\n        this.menu = this.options.menu ? _.union(this.menu, this.options.menu) : this.menu;\n      }\n\n      this.setChartSize();\n    }\n\n    public changeSize(params) {\n      this.options.size.colSpan = params.sizeX;\n      this.options.size.rowSpan = params.sizeY;\n\n      this.reset = true;\n      this.setChartSize();\n      this._$timeout(() => {\n        this.reset = false;\n      }, 500);\n    }\n\n    private setChartSize() {\n      this.chartSize = this.options.size.colSpan == 2 && this.options.size.rowSpan == 2 ? BIG_CHART : SMALL_CHART;\n    }\n  }\n\n\n  const StatisticsTile: IDashboardTileTypeOptions = {\n    name: 'statistics',\n    class: 'pip-statistics-tile',\n    controllerAs: '$ctrl',\n    controller: StatisticsTileController,\n    templateUrl: 'statistics_tile/StatisticsTile.html'\n  }\n\n  const config = function(pipDashboardProvider: IDashboardProvider) {\n    pipDashboardProvider.registerTileType(StatisticsTile);\n  }\n\n  angular\n    .module('pipDashboard')\n    .config(config);\n}","{\n  interface DraggableTileAttributes extends ng.IAttributes {\n    pipDraggableTiles: any;\n  }\n\n  function DraggableTileLink(\n    $scope: ng.IScope,\n    $elem: JQuery,\n    $attr: DraggableTileAttributes,\n    $compile: angular.ICompileService\n  ) {\n    const docFrag = document.createDocumentFragment(),\n      group = $scope.$eval($attr.pipDraggableTiles);\n\n    group.forEach(function (tile) {\n      const tpl = wrapComponent(tile.getCompiledTemplate());\n\n      docFrag.appendChild(tpl);\n    });\n\n    $elem.append(docFrag);\n\n    function wrapComponent(elem) {\n      return $compile($('<div>')\n        .addClass('pip-draggable-tile')\n        .attr('pip-drag', 'true')\n        .attr('pip-scroll-container', \"'.pip-dashboard-scroll'\")\n        .get(0))($scope).append(elem).get(0);\n    }\n  }\n\n  function DraggableTiles($compile): ng.IDirective {\n    return {\n      restrict: 'A',\n      link: function (\n        $scope: ng.IScope,\n        $elem: JQuery,\n        $attr: DraggableTileAttributes\n      ) {\n        new DraggableTileLink($scope, $elem, $attr, $compile);\n      }\n    };\n  }\n\n  angular\n    .module('pipDraggableTilesGroup')\n    .directive('pipDraggableTiles', DraggableTiles);\n}","export interface TilesGridConstructor {\n  new(tiles, options, columns, elem);\n}\n\nexport function ITilesGridConstructor(constructor: TilesGridConstructor, tiles, options, columns, elem): ITilesGridService {\n  return new constructor(tiles, options, columns, elem);\n}\n\nexport interface ITilesGridService {\n  tiles: any;\n  opts: any;\n  columns: any;\n  elem: any;\n  gridCells: any;\n  inline: boolean;\n  isMobileLayout: boolean;\n\n  addTile(tile): any;\n  getCellByPosition(row, col): any;\n  getCells(prevCell, rowSpan, colSpan): any;\n  getAvailableCellsDesktop(prevCell, rowSpan, colSpan): any;\n  getCell(src, basicRow, basicCol, columns): any;\n  getAvailableCellsMobile(prevCell, rowSpan, colSpan): any;\n  getBasicRow(prevCell): any;\n  isCellFree(row, col): any;\n  getCellIndex(srcCell): any;\n  reserveCells(start, end, elem): void;\n  clearElements(): void;\n  setAvailableColumns(columns): any;\n  generateGrid(singleTileWidth ? ): any;\n  setTilesDimensions(onlyPosition, draggedTile): any;\n  calcContainerHeight(): any;\n  getTileByNode(node): any;\n  getTileByCoordinates(coords, draggedTile): any;\n  getTileIndex(tile): any;\n  swapTiles(movedTile, beforeTile): any;\n  removeTile(removeTile): any;\n  updateTileOptions(opts): any;\n}\n\nconst MOBILE_LAYOUT_COLUMNS = 2;\n\nexport class TilesGridService implements ITilesGridService {\n  public tiles: any;\n  public opts: any;\n  public columns: any;\n  public elem: any;\n  public gridCells: any = [];\n  public inline: boolean = false;\n  public isMobileLayout: boolean;\n\n  constructor(tiles, options, columns, elem) {\n    this.tiles = tiles;\n    this.opts = options;\n    this.columns = columns || 0; // available columns in a row\n    this.elem = elem;\n    this.gridCells = [];\n    this.inline = options.inline || false;\n    this.isMobileLayout = columns === MOBILE_LAYOUT_COLUMNS;\n  }\n\n  public addTile(tile): any {\n    this.tiles.push(tile);\n    if (this.tiles.length === 1) {\n      this.generateGrid();\n    }\n\n    return this;\n  };\n\n  public getCellByPosition(row, col): any {\n    return this.gridCells[row][col];\n  };\n\n  public getCells(prevCell, rowSpan, colSpan): any {\n    console.log('prevCell', prevCell);\n\n    if (this.isMobileLayout) {\n      return this.getAvailableCellsMobile(prevCell, rowSpan, colSpan);\n    } else {\n      return this.getAvailableCellsDesktop(prevCell, rowSpan, colSpan);\n    }\n  };\n\n  public getAvailableCellsDesktop(prevCell, rowSpan, colSpan): any {\n    let leftCornerCell;\n    let rightCornerCell;\n    const basicCol = prevCell && prevCell.col || 0;\n    const basicRow = this.getBasicRow(prevCell);\n\n    // Small tile\n    if (colSpan === 1 && rowSpan === 1) {\n      const gridCopy = this.gridCells.slice();\n\n      if (!prevCell) {\n        leftCornerCell = gridCopy[0][0];\n      } else {\n        leftCornerCell = this.getCell(gridCopy, basicRow, basicCol, this.columns);\n\n        if (!leftCornerCell) {\n          const rowShift = this.isMobileLayout ? 1 : 2;\n          leftCornerCell = this.getCell(gridCopy, basicRow + rowShift, 0, this.columns);\n        }\n      }\n    }\n\n    // Medium tile\n    if (colSpan === 2 && rowSpan === 1) {\n      const prevTileSize = prevCell && prevCell.elem.size || null;\n\n      if (!prevTileSize) {\n        leftCornerCell = this.getCellByPosition(basicRow, basicCol);\n        rightCornerCell = this.getCellByPosition(basicRow, basicCol + 1);\n      } else if (prevTileSize.colSpan === 2 && prevTileSize.rowSpan === 2) {\n        if (this.columns - basicCol - 2 > 0) {\n          leftCornerCell = this.getCellByPosition(basicRow, basicCol + 1);\n          rightCornerCell = this.getCellByPosition(basicRow, basicCol + 2);\n        } else {\n          leftCornerCell = this.getCellByPosition(basicRow + 2, 0);\n          rightCornerCell = this.getCellByPosition(basicRow + 2, 1);\n        }\n      } else if (prevTileSize.colSpan === 2 && prevTileSize.rowSpan === 1) {\n        if (prevCell.row % 2 === 0) {\n          leftCornerCell = this.getCellByPosition(basicRow + 1, basicCol - 1);\n          rightCornerCell = this.getCellByPosition(basicRow + 1, basicCol);\n        } else {\n          if (this.columns - basicCol - 3 >= 0) {\n            leftCornerCell = this.getCellByPosition(basicRow, basicCol + 1);\n            rightCornerCell = this.getCellByPosition(basicRow, basicCol + 2);\n          } else {\n            leftCornerCell = this.getCellByPosition(basicRow + 2, 0);\n            rightCornerCell = this.getCellByPosition(basicRow + 2, 1);\n          }\n        }\n      } else if (prevTileSize.colSpan === 1 && prevTileSize.rowSpan === 1) {\n        if (this.columns - basicCol - 3 >= 0) {\n          if (this.isCellFree(basicRow, basicCol + 1)) {\n            leftCornerCell = this.getCellByPosition(basicRow, basicCol + 1);\n            rightCornerCell = this.getCellByPosition(basicRow, basicCol + 2);\n          } else {\n            leftCornerCell = this.getCellByPosition(basicRow, basicCol + 2);\n            rightCornerCell = this.getCellByPosition(basicRow, basicCol + 3);\n          }\n        } else {\n          leftCornerCell = this.getCellByPosition(basicRow + 2, 0);\n          rightCornerCell = this.getCellByPosition(basicRow + 2, 1);\n        }\n      }\n    }\n\n    // Big tile\n    if (!prevCell && rowSpan === 2 && colSpan === 2) {\n      leftCornerCell = this.getCellByPosition(basicRow, basicCol);\n      rightCornerCell = this.getCellByPosition(basicRow + 1, basicCol + 1);\n    } else if (rowSpan === 2 && colSpan === 2) {\n      if (this.columns - basicCol - 2 > 0) {\n        if (this.isCellFree(basicRow, basicCol + 1)) {\n          leftCornerCell = this.getCellByPosition(basicRow, basicCol + 1);\n          rightCornerCell = this.getCellByPosition(basicRow + 1, basicCol + 2);\n        } else {\n          leftCornerCell = this.getCellByPosition(basicRow, basicCol + 2);\n          rightCornerCell = this.getCellByPosition(basicRow + 1, basicCol + 3);\n        }\n      } else {\n        leftCornerCell = this.getCellByPosition(basicRow + 2, 0);\n        rightCornerCell = this.getCellByPosition(basicRow + 3, 1);\n      }\n    }\n\n    return {\n      start: leftCornerCell,\n      end: rightCornerCell\n    };\n  };\n\n  public getCell(src, basicRow, basicCol, columns): any {\n    let cell, col, row;\n\n    if (this.isMobileLayout) {\n      // mobile layout\n      for (col = basicCol; col < columns; col++) {\n        if (!src[basicRow][col].elem) {\n          cell = src[basicRow][col];\n          break;\n        }\n      }\n\n      return cell;\n    }\n\n    // desktop\n    for (col = basicCol; col < columns; col++) {\n      for (row = 0; row < 2; row++) {\n        if (!src[row + basicRow][col].elem) {\n          cell = src[row + basicRow][col];\n          break;\n        }\n      }\n\n      if (cell) {\n        return cell;\n      }\n    }\n  };\n\n  public getAvailableCellsMobile(prevCell, rowSpan, colSpan): any {\n    let leftCornerCell;\n    let rightCornerCell;\n    const basicRow = this.getBasicRow(prevCell);\n    const basicCol = prevCell && prevCell.col || 0;\n\n\n    if (colSpan === 1 && rowSpan === 1) {\n      const gridCopy = this.gridCells.slice();\n\n      if (!prevCell) {\n        leftCornerCell = gridCopy[0][0];\n      } else {\n        leftCornerCell = this.getCell(gridCopy, basicRow, basicCol, this.columns);\n\n        if (!leftCornerCell) {\n          const rowShift = this.isMobileLayout ? 1 : 2;\n          leftCornerCell = this.getCell(gridCopy, basicRow + rowShift, 0, this.columns);\n        }\n      }\n    }\n\n    if (!prevCell) {\n      leftCornerCell = this.getCellByPosition(basicRow, 0);\n      rightCornerCell = this.getCellByPosition(basicRow + rowSpan - 1, 1);\n    } else if (colSpan === 2) {\n      leftCornerCell = this.getCellByPosition(basicRow + 1, 0);\n      rightCornerCell = this.getCellByPosition(basicRow + rowSpan, 1);\n    }\n\n    return {\n      start: leftCornerCell,\n      end: rightCornerCell\n    };\n  };\n\n  public getBasicRow(prevCell): any {\n    let basicRow;\n\n    if (this.isMobileLayout) {\n      if (prevCell) {\n        basicRow = prevCell && prevCell.row || 0;\n      } else {\n        basicRow = 0;\n      }\n    } else {\n      if (prevCell) {\n        basicRow = prevCell.row % 2 === 0 ? prevCell.row : prevCell.row - 1;\n      } else {\n        basicRow = 0;\n      }\n    }\n\n    return basicRow;\n  };\n\n  public isCellFree(row, col): any {\n    return !this.gridCells[row][col].elem;\n  };\n\n  public getCellIndex(srcCell): any {\n    const self = this;\n    let index;\n\n    this.gridCells.forEach((row, rowIndex) => {\n      index = _.findIndex(self.gridCells[rowIndex], (cell) => {\n        return cell === srcCell;\n      });\n\n      if (index !== -1) {\n        return;\n      }\n    });\n\n    return index !== -1 ? index : 0;\n  };\n\n  public reserveCells(start, end, elem) {\n    this.gridCells.forEach((row) => {\n      row.forEach((cell) => {\n        if (cell.row >= start.row && cell.row <= end.row &&\n          cell.col >= start.col && cell.col <= end.col) {\n          cell.elem = elem;\n        }\n      });\n    });\n  };\n\n  public clearElements() {\n    this.gridCells.forEach((row) => {\n      row.forEach((tile) => {\n        tile.elem = null;\n      });\n    });\n  };\n\n  public setAvailableColumns(columns): any {\n    this.isMobileLayout = columns === MOBILE_LAYOUT_COLUMNS;\n    this.columns = columns;\n\n    return this;\n  };\n\n  public generateGrid(singleTileWidth ? ): any {\n    const self = this,\n      tileWidth = singleTileWidth || this.opts.tileWidth,\n      offset = document.querySelector('.pip-draggable-group-title').getBoundingClientRect();\n    let colsInRow = 0,\n      rows = 0,\n      gridInRow = [];\n\n    this.gridCells = [];\n\n    this.tiles.forEach((tile, index, srcTiles) => {\n      const tileSize = tile.getSize();\n\n      generateCells(tileSize.colSpan);\n\n      if (srcTiles.length === index + 1) {\n        if (colsInRow < self.columns) {\n          generateCells(self.columns - colsInRow);\n        }\n\n        // Generate more cells for extends tile size to big\n        if (self.tiles.length * 2 > self.gridCells.length) {\n          Array.apply(null, Array(self.tiles.length * 2 - self.gridCells.length)).forEach(() => {\n            generateCells(self.columns);\n          });\n        }\n      }\n    });\n\n    function generateCells(newCellCount) {\n      Array.apply(null, Array(newCellCount)).forEach(() => {\n        if (self.columns < colsInRow + 1) {\n          rows++;\n          colsInRow = 0;\n\n          self.gridCells.push(gridInRow);\n          gridInRow = [];\n        }\n\n        let top = rows * self.opts.tileHeight + (rows ? rows * self.opts.gutter : 0) + offset.height;\n        let left = colsInRow * tileWidth + (colsInRow ? colsInRow * self.opts.gutter : 0);\n\n        // Describe grid cell size through block corners coordinates\n        gridInRow.push({\n          top: top,\n          left: left,\n          bottom: top + self.opts.tileHeight,\n          right: left + tileWidth,\n          row: rows,\n          col: colsInRow\n        });\n\n        colsInRow++;\n      });\n    }\n\n    return this;\n  };\n\n  public setTilesDimensions(onlyPosition, draggedTile): any {\n    const self = this;\n    let currIndex = 0;\n    let prevCell;\n\n    if (onlyPosition) {\n      self.clearElements();\n    }\n\n    this.tiles.forEach((tile) => {\n      const tileSize = tile.getSize();\n      let startCell;\n      let width;\n      let height;\n      let cells;\n\n      tile.updateElem('.pip-draggable-tile');\n      if (tileSize.colSpan === 1) {\n        if (prevCell && prevCell.elem.size.colSpan === 2 && prevCell.elem.size.rowSpan === 1) {\n          startCell = self.getCells(self.getCellByPosition(prevCell.row, prevCell.col - 1), 1, 1).start;\n        } else {\n          startCell = self.getCells(prevCell, 1, 1).start;\n        }\n\n\n        if (!onlyPosition) {\n          width = startCell.right - startCell.left;\n          height = startCell.bottom - startCell.top;\n        }\n\n        prevCell = startCell;\n\n        self.reserveCells(startCell, startCell, tile);\n\n        currIndex++;\n      } else if (tileSize.colSpan === 2) {\n        cells = self.getCells(prevCell, tileSize.rowSpan, tileSize.colSpan);\n        startCell = cells.start;\n\n        if (!onlyPosition) {\n          const gutter = this.isMobileLayout ? this.opts.gutter : 0;\n\n          width = cells.end.right - cells.start.left + gutter;\n          height = cells.end.bottom - cells.start.top;\n        }\n\n        prevCell = cells.end;\n\n        self.reserveCells(cells.start, cells.end, tile);\n\n        currIndex += 2;\n      }\n\n      // Render preview\n      // while tiles from group is dragged\n      if (draggedTile === tile) {\n        tile.setPreviewPosition({\n          left: startCell.left,\n          top: startCell.top\n        });\n\n        return;\n      }\n\n      if (!onlyPosition) {\n        tile.setSize(width, height);\n      }\n\n      tile.setPosition(startCell.left, startCell.top);\n    });\n\n    return this;\n  };\n\n  public calcContainerHeight(minHeight ?: number): any {\n    let maxHeightSize, maxWidthSize;\n\n    if (!this.tiles.length) {\n      if (minHeight) {\n        this.elem.style.height = minHeight + 40 + 'px';\n      }\n\n      return this;\n    }\n\n    maxHeightSize = _.maxBy(this.tiles, (tile) => {\n      const tileSize = tile['getSize']();\n      return tileSize.top + tileSize.height;\n    })['getSize']();\n\n    this.elem.style.height = maxHeightSize.top + maxHeightSize.height + 'px';\n\n    if (this.inline) {\n      maxWidthSize = _.maxBy(this.tiles, (tile) => {\n        const tileSize = tile['getSize']();\n        return tileSize.left + tileSize.width;\n      })['getSize']();\n\n      this.elem.style.width = maxWidthSize.left + maxWidthSize.width + 'px';\n    }\n\n    return this;\n  };\n\n  public getTileByNode(node): any {\n    const foundTile = this.tiles.filter((tile) => {\n      return node === tile.getElem();\n    });\n\n    return foundTile.length ? foundTile[0] : null;\n  };\n\n  public getTileByCoordinates(coords, draggedTile): any {\n    return this.tiles\n      .filter((tile) => {\n        const tileSize = tile.getSize();\n\n        return tile !== draggedTile &&\n          tileSize.left <= coords.left && coords.left <= (tileSize.left + tileSize.width) &&\n          tileSize.top <= coords.top && coords.top <= (tileSize.top + tileSize.height);\n      })[0] || null;\n  };\n\n  public getTileIndex(tile): any {\n    return _.findIndex(this.tiles, tile);\n  };\n\n  public swapTiles(movedTile, beforeTile): any {\n    const movedTileIndex = _.findIndex(this.tiles, movedTile);\n    const beforeTileIndex = _.findIndex(this.tiles, beforeTile);\n\n    this.tiles.splice(movedTileIndex, 1);\n    this.tiles.splice(beforeTileIndex, 0, movedTile);\n\n    return this;\n  };\n\n  public removeTile(removeTile): any {\n    let droppedTile;\n\n    this.tiles.forEach((tile, index, tiles) => {\n      if (tile === removeTile) {\n        droppedTile = tiles.splice(index, 1)[0];\n        return false;\n      }\n    });\n\n    return droppedTile;\n  };\n\n  public updateTileOptions(opts): any {\n    const index = _.findIndex(this.tiles, (tile) => {\n      return tile['getOptions']() === opts;\n    });\n\n    if (index !== -1) {\n      this.tiles[index].setOptions(opts);\n      return true;\n    }\n\n    return false;\n  };\n}\n\n\nangular\n  .module('pipDraggableTilesGroup')\n  .service('pipTilesGrid', function () {\n    return function (tiles, options, columns, elem) {\n      const newGrid = new TilesGridService(tiles, options, columns, elem);\n\n      return newGrid;\n    }\n  });","angular\n    .module('pipDraggableTilesGroup', []);\n\nimport './TileGroupDirective';\nimport './TileGroupService';","import { IDashboardProvider, IDashboardTileTypeOptions, IDashboardService } from './IDashboardService';\n\n{\n    class DashboardProvider implements IDashboardProvider {\n        private tilesTypes: IDashboardTileTypeOptions[] = [];\n        private _service: IDashboardService;\n\n        constructor( ) { }\n\n        public registerTileType(newTileTypeOptions: IDashboardTileTypeOptions) {\n            let newControllerName: string;\n            let newTemplateUrl: string;\n\n            if (typeof newTileTypeOptions.controller !== 'string') {\n                newControllerName = 'pip' + newTileTypeOptions.name.substr(0, 1).toUpperCase() + newTileTypeOptions.name.substr(1) + 'Tile';\n\n                angular.module('pipDashboard').controller(newControllerName, <angular.IControllerConstructor>newTileTypeOptions.controller);\n            }\n\n            if (!newTileTypeOptions.templateUrl && newTileTypeOptions.template) {\n                newTemplateUrl = 'pip' + newTileTypeOptions.name.substr(0, 1).toUpperCase() + newTileTypeOptions.name.substr(1) + 'Tile.html';\n            }\n\n            this.tilesTypes.push({\n                name: newTileTypeOptions.name,\n                controller: newControllerName || newTileTypeOptions.controller,\n                templateUrl: newTemplateUrl || newTileTypeOptions.templateUrl,\n                controllerAs: newTileTypeOptions.controllerAs,\n                template: newTileTypeOptions.template,\n                class: newTileTypeOptions.class\n            });\n        }\n\n        public $get($templateCache) {\n            \"ngInject\";\n\n            if (this._service == null)\n                this._service = new DashboardService(this.tilesTypes, $templateCache);\n\n            return this._service;\n        }\n    }\n\n    class DashboardService {\n        constructor(\n            private tileTypes: IDashboardTileTypeOptions[],\n            private $templateCache: angular.ITemplateCacheService\n        ) {\n            this.putTemplates();\n        }\n\n        private putTemplates(): void {\n            _.each(this.tileTypes, (type: IDashboardTileTypeOptions) => {\n                if (type.template) this.$templateCache.put(type.templateUrl, type.template);\n            });\n        }\n\n        public getTileTypes(): IDashboardTileTypeOptions[] {\n            return this.tileTypes;\n        }\n\n        public getTypeByName(name: string): IDashboardTileTypeOptions {\n            return _.find(this.tileTypes, (type: IDashboardTileTypeOptions) => {\n                return type.name === name;\n            });\n        }\n    }\n\n    const config = function ($controllerProvider) {\n        let app = angular.module('pipDashboard');\n\n        (<any>app).controller = function (name: string, constructor: any): ng.IModule {\n            $controllerProvider.register(name, constructor);\n            return (this);\n        };\n    }\n\n    angular\n        .module('pipDashboard')\n        .config(config)\n        .provider('pipDashboard', DashboardProvider);\n}","export interface ITileTemplateService {\n    getTemplate(source, tpl ? , tileScope ? , strictCompile ? ): any;\n    setImageMarginCSS($element, image): void;\n} \n\n{\n    class tileTemplateService implements ITileTemplateService {\n        private _$interpolate: angular.IInterpolateService;\n        private _$compile: angular.ICompileService;\n        private _$templateRequest: angular.ITemplateRequestService;\n\n        constructor(\n            $interpolate: angular.IInterpolateService,\n            $compile: angular.ICompileService,\n            $templateRequest: angular.ITemplateRequestService\n        ) {\n            this._$interpolate = $interpolate;\n            this._$compile = $compile;\n            this._$templateRequest = $templateRequest;\n        }\n\n        public getTemplate(source, tpl ? , tileScope ? , strictCompile ? ): any {\n            const {\n                template,\n                templateUrl,\n                type\n            } = source;\n            let result;\n\n            if (type) {\n                const interpolated = tpl ? this._$interpolate(tpl)(source) : this._$interpolate(template)(source);\n                return strictCompile == true ?\n                    (tileScope ? this._$compile(interpolated)(tileScope) : this._$compile(interpolated)) :\n                    interpolated;\n            }\n\n            if (template) {\n                return tileScope ? this._$compile(template)(tileScope) : this._$compile(template);\n            }\n\n            if (templateUrl) {\n                this._$templateRequest(templateUrl, false).then((html) => {\n                    result = tileScope ? this._$compile(html)(tileScope) : this._$compile(html);\n                });\n            }\n\n            return result;\n        }\n\n        public setImageMarginCSS($element, image) {\n            let\n                containerWidth = $element.width ? $element.width() : $element.clientWidth,\n                containerHeight = $element.height ? $element.height() : $element.clientHeight,\n                imageWidth = (image[0] ? image[0].naturalWidth : image.naturalWidth) || image.width,\n                imageHeight = (image[0] ? image[0].naturalHeight : image.naturalWidth) || image.height,\n                margin = 0,\n                cssParams = {};\n\n            if ((imageWidth / containerWidth) > (imageHeight / containerHeight)) {\n                margin = -((imageWidth / imageHeight * containerHeight - containerWidth) / 2);\n                cssParams['margin-left'] = '' + margin + 'px';\n                cssParams['height'] = '' + containerHeight + 'px'; //'100%';\n                cssParams['width'] = '' + imageWidth * containerHeight / imageHeight + 'px'; //'100%';\n                cssParams['margin-top'] = '';\n            } else {\n                margin = -((imageHeight / imageWidth * containerWidth - containerHeight) / 2);\n                cssParams['margin-top'] = '' + margin + 'px';\n                cssParams['height'] = '' + imageHeight * containerWidth / imageWidth + 'px'; //'100%';\n                cssParams['width'] = '' + containerWidth + 'px'; //'100%';\n                cssParams['margin-left'] = '';\n            }\n\n            $(image).css(cssParams);\n        }\n    }\n\n    // image load directive TODO: remove to pipImageUtils\n    const ImageLoad = function ImageLoad($parse: ng.IParseService): ng.IDirective {\n        return {\n            restrict: 'A',\n            link: function (scope: ng.IScope, element: JQuery, attrs: any) {\n                const callback = $parse(attrs.pipImageLoad);\n\n                element.bind('load', (event) => {\n                    callback(scope, {\n                        $event: event\n                    });\n                });\n            }\n        }\n    }\n\n    angular\n        .module('pipDashboard')\n        .service('pipTileTemplate', tileTemplateService)\n        .directive('pipImageLoad', ImageLoad);\n}","(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('add_tile_dialog/AddTile.html',\n    '<md-dialog class=\"pip-dialog pip-add-component-dialog\"><md-dialog-content class=\"layout-column\"><div class=\"theme-divider p16 flex-auto\"><h3 class=\"hide-xs m0 bm16 theme-text-primary\" hide-xs=\"\">{{ \\'DASHBOARD_ADD_TILE_DIALOG_TITLE\\' | translate }}<md-input-container class=\"layout-row flex-auto m0 tm16\"><md-select class=\"flex-auto m0 theme-text-primary\" ng-model=\"dialogCtrl.activeGroupIndex\" placeholder=\"{{ \\'DASHBOARD_ADD_TILE_DIALOG_CREATE_NEW_GROUP\\' | translate }}\" aria-label=\"Group\"><md-option ng-value=\"$index\" ng-repeat=\"group in dialogCtrl.groups\">{{ group }}</md-option></md-select></md-input-container></h3></div><div class=\"pip-body pip-scroll p0 flex-auto\"><p class=\"md-body-1 theme-text-secondary m0 lp16 rp16\">{{ \\'DASHBOARD_ADD_TILE_DIALOG_USE_HOT_KEYS\\' | translate }}</p><md-list ng-init=\"groupIndex = $index\" ng-repeat=\"group in dialogCtrl.defaultTiles\"><md-list-item class=\"layout-row pip-list-item lp16 rp16\" ng-repeat=\"item in group\"><div class=\"icon-holder flex-none\"><md-icon md-svg-icon=\"icons:{{:: item.icon }}\"></md-icon><div class=\"pip-badge theme-badge md-warn\" ng-if=\"item.amount\"><span>{{ item.amount }}</span></div></div><span class=\"flex-auto lm24 theme-text-primary\">{{:: item.title }}</span><md-button class=\"md-icon-button flex-none\" ng-click=\"dialogCtrl.encrease(groupIndex, $index)\" aria-label=\"Encrease\"><md-icon md-svg-icon=\"icons:plus-circle\"></md-icon></md-button><md-button class=\"md-icon-button flex-none\" ng-click=\"dialogCtrl.decrease(groupIndex, $index)\" aria-label=\"Decrease\"><md-icon md-svg-icon=\"icons:minus-circle\"></md-icon></md-button></md-list-item><md-divider class=\"lm72 tm8 bm8\" ng-if=\"groupIndex !== (dialogCtrl.defaultTiles.length - 1)\"></md-divider></md-list></div></md-dialog-content><md-dialog-actions class=\"flex-none layout-align-end-center theme-divider divider-top theme-text-primary\"><md-button ng-click=\"dialogCtrl.cancel()\" aria-label=\"Cancel\">{{ \\'CANCEL\\' | translate }}</md-button><md-button ng-click=\"dialogCtrl.add()\" ng-disabled=\"dialogCtrl.totalTiless === 0\" arial-label=\"Add\">{{ \\'ADD\\' | translate }}</md-button></md-dialog-actions></md-dialog>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('common_tile/DynamicTile.html',\n    '<pip-tile-menu pip-menu=\"$ctrl.options.menu\" ng-if=\"!$ctrl.options.hideMenu\"></pip-tile-menu><div class=\"pip-tile-content {{ $ctrl.color }} layout-column\" ng-class=\"{ small: $ctrl.options.size.colSpan == 1 && $ctrl.options.size.rowSpan == 1, medium: $ctrl.options.size.colSpan == 2 && $ctrl.options.size.rowSpan == 1, big: $ctrl.options.size.colSpan == 2 && $ctrl.options.size.rowSpan == 2 }\"><pip-specific-template></pip-specific-template></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('config_tile_dialog/ConfigDialog.html',\n    '<md-dialog class=\"pip-dialog pip-tile-config-dialog {{ vm.params.dialogClass }}\" width=\"400\" md-theme=\"{{vm.theme}}\"><pip-tile-config-extend-component class=\"layout-column\" pip-dialog-scope=\"vm\" pip-extension-url=\"vm.extensionUrl\" pip-apply=\"vm.onApply(updatedData)\"></pip-tile-config-extend-component></md-dialog>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('config_tile_dialog/ConfigDialogExtendComponent.html',\n    '<h3 class=\"tm0 flex-none\">{{ \\'DASHBOARD_TILE_CONFIG_DIALOG_TITLE\\' | translate }}</h3><div class=\"pip-body pip-scroll p16 bp0 flex-auto\"><pip-extension-point></pip-extension-point><pip-toggle-buttons class=\"bm16\" ng-if=\"!$ctrl.hideSizes\" pip-buttons=\"$ctrl.sizes\" ng-model=\"$ctrl.sizeId\"></pip-toggle-buttons><pip-color-picker ng-if=\"!$ctrl.hideColors\" pip-colors=\"$ctrl.colors\" ng-model=\"$ctrl.color\"></pip-color-picker></div><div class=\"pip-footer flex-none\"><div><md-button class=\"md-accent\" ng-click=\"$ctrl.onCancel()\">{{ \\'CANCEL\\' | translate }}</md-button><md-button class=\"md-accent\" ng-click=\"$ctrl.onApply()\">{{ \\'APPLY\\' | translate }}</md-button></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('dashboard/Dashboard.html',\n    '<md-button class=\"md-accent md-raised md-fab layout-column layout-align-center-center\" aria-label=\"Add component\" ng-click=\"$ctrl.addComponent()\"><md-icon md-svg-icon=\"icons:plus\" class=\"md-headline centered-add-icon\"></md-icon></md-button><div class=\"pip-draggable-grid-holder\"><pip-draggable-grid pip-tiles-templates=\"$ctrl.groupedWidgets\" pip-tiles-context=\"$ctrl.widgetsContext\" pip-draggable-grid=\"$ctrl.draggableGridOptions\" pip-group-menu-actions=\"$ctrl.groupMenuActions\"></pip-draggable-grid><md-progress-circular md-mode=\"indeterminate\" class=\"progress-ring\"></md-progress-circular></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('draggable/Draggable.html',\n    '<div class=\"pip-draggable-holder\"><div class=\"pip-draggable-group\" pip-drop=\"true\" pip-drop-success=\"$ctrl.onDropListener($index, $event)\" pip-enter=\"$ctrl.onDropEnterListener($index, $event)\" pip-leave=\"$ctrl.onDropLeaveListener($index, $event)\" pip-deactive=\"$ctrl.onDropDeactivateListener($index, $event)\" ng-repeat=\"group in $ctrl.groups\" data-group-id=\"{{ $index }}\" pip-draggable-tiles=\"group.source\"><div class=\"pip-draggable-group-title layout-row layout-align-start-center\"><div class=\"title-input-container\" ng-click=\"$ctrl.onTitleClick(group, $event)\"><input ng-if=\"group.editingName\" ng-blur=\"$ctrl.onBlurTitleInput(group)\" ng-keypress=\"$ctrl.onKyepressTitleInput(group, $event)\" ng-model=\"group.title\"><div class=\"text-overflow flex-none\" ng-if=\"!group.editingName\">{{ group.title }}</div></div><md-button class=\"md-icon-button flex-none layout-align-center-center\" ng-show=\"group.editingName\" ng-click=\"$ctrl.cancelEditing(group)\" aria-label=\"Cancel\"><md-icon md-svg-icon=\"icons:cross\"></md-icon></md-button><md-menu class=\"flex-none layout-column\" md-position-mode=\"target-right target\" ng-show=\"!group.editingName\"><md-button class=\"md-icon-button flex-none layout-align-center-center\" ng-click=\"$mdOpenMenu(); groupId = $index\" aria-label=\"Menu\"><md-icon md-svg-icon=\"icons:dots\"></md-icon></md-button><md-menu-content width=\"4\"><md-menu-item ng-repeat=\"action in $ctrl.groupMenuActions\"><md-button ng-click=\"action.callback(groupId)\">{{ action.title }}</md-button></md-menu-item></md-menu-content></md-menu></div></div><div class=\"pip-draggable-group fict-group layout-align-center-center layout-column tm16\" pip-drop=\"true\" pip-drop-success=\"$ctrl.onDropToFictGroupListener($event)\" pip-enter=\"$ctrl.onDropEnterListener(null, $event)\" pip-leave=\"$ctrl.onDropLeaveListener(null, $event)\" pip-deactive=\"$ctrl.onDropDeactivateListener(null, $event)\"><div class=\"fict-group-text-container\"><md-icon md-svg-icon=\"icons:plus\"></md-icon>{{ \\'DROP_TO_CREATE_NEW_GROUP\\' | translate }}</div></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('event_tile/ConfigDialogExtension.html',\n    '<div class=\"w-stretch\"><md-input-container class=\"w-stretch bm0\"><label>Title:</label> <input type=\"text\" ng-model=\"$ctrl.title\"></md-input-container>Date:<md-datepicker ng-model=\"$ctrl.date\" class=\"w-stretch bm8\"></md-datepicker><md-input-container class=\"w-stretch\"><label>Description:</label> <textarea type=\"text\" ng-model=\"$ctrl.text\">\\n' +\n    '    </textarea></md-input-container>Backdrop\\'s opacity:<md-slider aria-label=\"opacity\" type=\"number\" min=\"0.1\" max=\"0.9\" step=\"0.01\" ng-model=\"$ctrl.opacity\" ng-change=\"$ctrl.onOpacitytest($ctrl.opacity)\"></md-slider></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('event_tile/EventTile.html',\n    '<img ng-if=\"$ctrl.options.image\" ng-src=\"{{$ctrl.options.image}}\" alt=\"{{$ctrl.options.title || $ctrl.options.name}}\"><div class=\"text-backdrop\" style=\"background-color: rgba(0, 0, 0, {{ $ctrl.opacity }})\"><div class=\"tile-heading layout-row layout-align-start-center flex-none\"><span class=\"tile-title flex-auto text-overflow\">{{ $ctrl.options.title || $ctrl.options.name }}</span></div><div class=\"text-container flex-auto pip-scroll\"><p class=\"date flex-none\" ng-if=\"$ctrl.options.date\">{{ $ctrl.options.date }}</p><p class=\"text flex-auto\">{{ $ctrl.options.text || $ctrl.options.description }}</p></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('menu_tile/MenuTile.html',\n    '<md-menu class=\"tile-menu\" md-position-mode=\"target-right target\"><md-button class=\"md-icon-button flex-none\" ng-click=\"$mdOpenMenu()\" aria-label=\"Menu\"><md-icon md-svg-icon=\"icons:vdots\"></md-icon></md-button><md-menu-content width=\"4\"><md-menu-item ng-repeat=\"item in $ctrl.menu\"><md-button ng-if=\"!item.submenu\" ng-click=\"item.action(item, $index)\">{{:: item.title }}</md-button><md-menu ng-if=\"item.submenu\"><md-button ng-click=\"item.action(item, $index)\">{{:: item.title }}</md-button><md-menu-content><md-menu-item ng-repeat=\"subitem in item.submenu\"><md-button ng-click=\"subitem.action(item, $index)\">{{:: subitem.title }}</md-button></md-menu-item></md-menu-content></md-menu></md-menu-item></md-menu-content></md-menu>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('note_tile/ConfigDialogExtension.html',\n    '<div class=\"w-stretch\"><md-input-container class=\"w-stretch bm0\"><label>Title:</label> <input type=\"text\" ng-model=\"$ctrl.title\"></md-input-container><md-input-container class=\"w-stretch tm0\"><label>Text:</label> <textarea type=\"text\" ng-model=\"$ctrl.text\">\\n' +\n    '    </textarea></md-input-container></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('note_tile/NoteTile.html',\n    '<div class=\"tile-heading layout-row layout-align-start-center flex-none\" ng-if=\"$ctrl.options.title || $ctrl.options.name\"><span class=\"tile-title flex-auto text-overflow\">{{ $ctrl.options.title || $ctrl.options.name }}</span></div><div class=\"text-container flex-auto pip-scroll\"><p>{{ $ctrl.options.text }}</p></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('picture_slider_tile/PictureSliderTile.html',\n    '<div class=\"tile-heading layout-row layout-align-start-center flex-none\"><span class=\"tile-title flex-auto text-overflow\">{{ $ctrl.options.title || $ctrl.options.name }}</span></div><div class=\"slider-container\"><div pip-image-slider=\"\" pip-animation-type=\"\\'fading\\'\" pip-animation-interval=\"$ctrl.animationInterval\" ng-if=\"$ctrl.animationType == \\'fading\\'\"><div class=\"pip-animation-block\" ng-repeat=\"slide in $ctrl.options.slides\"><img ng-src=\"{{ slide.image }}\" alt=\"{{ slide.image }}\" pip-image-load=\"$ctrl.onImageLoad($event)\"><p class=\"slide-text\" ng-if=\"slide.text\">{{ slide.text }}</p></div></div><div pip-image-slider=\"\" pip-animation-type=\"\\'carousel\\'\" pip-animation-interval=\"$ctrl.animationInterval\" ng-if=\"$ctrl.animationType == \\'carousel\\'\"><div class=\"pip-animation-block\" ng-repeat=\"slide in $ctrl.options.slides\"><img ng-src=\"{{ slide.image }}\" alt=\"{{ slide.image }}\" pip-image-load=\"$ctrl.onImageLoad($event)\"><p class=\"slide-text\" ng-if=\"slide.text\">{{ slide.text }}</p></div></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('position_tile/ConfigDialogExtension.html',\n    '<div class=\"w-stretch\"><md-input-container class=\"w-stretch bm0\"><label>Location name:</label> <input type=\"text\" ng-model=\"$ctrl.locationName\"></md-input-container></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('position_tile/PositionTile.html',\n    '<div class=\"tile-heading lp16 rp8 layout-row layout-align-end-center flex-none\" ng-if=\"$ctrl.options.locationName\"><span class=\"flex tile-title text-overflow\">{{ $ctrl.options.locationName }}</span></div><pip-location-map class=\"flex\" ng-if=\"$ctrl.showPosition\" pip-stretch=\"true\" pip-rebind=\"true\" pip-location-pos=\"$ctrl.options.location\"></pip-location-map>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('statistics_tile/StatisticsTile.html',\n    '<div class=\"tile-heading layout-row layout-align-start-center flex-none\"><span class=\"tile-title flex-auto text-overflow\">{{ $ctrl.options.title || $ctrl.options.name }}</span></div><div class=\"flex-auto layout-row layout-align-center-center\" ng-if=\"$ctrl.options.series && !$ctrl.reset\"><pip-pie-chart pip-series=\"$ctrl.options.series\" ng-if=\"!$ctrl.options.chartType || $ctrl.options.chartType == \\'pie\\'\" pip-donut=\"true\" pip-pie-size=\"$ctrl.chartSize\" pip-show-total=\"true\" pip-centered=\"true\"></pip-pie-chart></div>');\n}]);\n})();\n\n//# sourceMappingURL=pip-webui-dashboard-html.min.js.map\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvYWRkX3RpbGVfZGlhbG9nL0FkZFRpbGVEaWFsb2dDb250cm9sbGVyLnRzIiwic3JjL2FkZF90aWxlX2RpYWxvZy9BZGRUaWxlUHJvdmlkZXIudHMiLCJzcmMvYWRkX3RpbGVfZGlhbG9nL2luZGV4LnRzIiwic3JjL2NvbW1vbl90aWxlL0Rhc2hib2FyZFRpbGUudHMiLCJzcmMvY29tbW9uX3RpbGUvRHluYW1pY1RpbGUudHMiLCJzcmMvY29uZmlnX3RpbGVfZGlhbG9nL0NvbmZpZ0RpYWxvZ0NvbnRyb2xsZXIudHMiLCJzcmMvY29uZmlnX3RpbGVfZGlhbG9nL0NvbmZpZ0RpYWxvZ0V4dGVuZENvbXBvbmVudC50cyIsInNyYy9jb25maWdfdGlsZV9kaWFsb2cvQ29uZmlnRGlhbG9nU2VydmljZS50cyIsInNyYy9jb25maWdfdGlsZV9kaWFsb2cvaW5kZXgudHMiLCJzcmMvZGFzaGJvYXJkL0Rhc2hib2FyZC50cyIsInNyYy9kcmFnZ2FibGUvRHJhZ2dhYmxlLnRzIiwic3JjL2RyYWdnYWJsZS9EcmFnZ2FibGVUaWxlU2VydmljZS50cyIsInNyYy9kcmFnZ2FibGUvaW5kZXgudHMiLCJzcmMvZXZlbnRfdGlsZS9FdmVudFRpbGUudHMiLCJzcmMvaW5kZXgudHMiLCJzcmMvbWVudV90aWxlL01lbnVUaWxlRGlyZWN0aXZlLnRzIiwic3JjL21lbnVfdGlsZS9pbmRleC50cyIsInNyYy9ub3RlX3RpbGUvTm90ZVRpbGUudHMiLCJzcmMvcGljdHVyZV9zbGlkZXJfdGlsZS9QaWN0dXJlU2xpZGVyVGlsZS50cyIsInNyYy9wb3NpdGlvbl90aWxlL1Bvc2l0aW9uVGlsZS50cyIsInNyYy9zdGF0aXN0aWNzX3RpbGUvU3RhdGlzdGljc1RpbGUudHMiLCJzcmMvdGlsZV9ncm91cC9UaWxlR3JvdXBEaXJlY3RpdmUudHMiLCJzcmMvdGlsZV9ncm91cC9UaWxlR3JvdXBTZXJ2aWNlLnRzIiwic3JjL3RpbGVfZ3JvdXAvaW5kZXgudHMiLCJzcmMvdXRpbGl0eS9EYXNoYm9hcmRTZXJ2aWNlLnRzIiwic3JjL3V0aWxpdHkvVGlsZVRlbXBsYXRlVXRpbGl0eS50cyIsInRlbXAvcGlwLXdlYnVpLWRhc2hib2FyZC1odG1sLm1pbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FDQUE7SUFBQTtJQUtBLENBQUM7SUFBRCxvQkFBQztBQUFELENBTEEsQUFLQyxJQUFBO0FBTFksc0NBQWE7QUFPMUI7SUFLSSxpQ0FDSSxNQUFXLEVBQ0osZ0JBQXdCLEVBQy9CLFVBQTZCLEVBQ3RCLFNBQTBDO1FBRjFDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBUTtRQUV4QixjQUFTLEdBQVQsU0FBUyxDQUFpQztRQU45QyxlQUFVLEdBQVcsQ0FBQyxDQUFDO1FBUTFCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDN0UsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsVUFBQyxLQUFLO1lBQzlCLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDMUIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRU0scUNBQUcsR0FBVjtRQUNJLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDO1lBQ2hCLFVBQVUsRUFBRSxJQUFJLENBQUMsZ0JBQWdCO1lBQ2pDLE9BQU8sRUFBRSxJQUFJLENBQUMsWUFBWTtTQUM3QixDQUFDLENBQUM7SUFDUCxDQUFDO0lBQUEsQ0FBQztJQUVLLHdDQUFNLEdBQWI7UUFDSSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFBQSxDQUFDO0lBRUssMENB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QUFjLENBQUM7U0FDdEIsT0FBTyxDQUFDLGlCQUFpQixFQUFFLG1CQUFtQixDQUFDO1NBQy9DLFNBQVMsQ0FBQyxjQUFjLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDOUMsQ0FBQzs7QUNoR0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCJleHBvcnQgY2xhc3MgQWRkVGlsZURpYWxvZyB7XG4gICAgdGl0bGU6IHN0cmluZztcbiAgICBpY29uOiBzdHJpbmc7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGFtb3VudDogbnVtYmVyO1xufVxuXG5leHBvcnQgY2xhc3MgQWRkVGlsZURpYWxvZ0NvbnRyb2xsZXIgaW1wbGVtZW50cyBuZy5JQ29udHJvbGxlciB7XG4gICAgcHVibGljIGRlZmF1bHRUaWxlczogW0FkZFRpbGVEaWFsb2dbXV07XG4gICAgcHVibGljIGdyb3VwczogYW55O1xuICAgIHB1YmxpYyB0b3RhbFRpbGVzOiBudW1iZXIgPSAwO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGdyb3VwczogYW55LFxuICAgICAgICBwdWJsaWMgYWN0aXZlR3JvdXBJbmRleDogbnVtYmVyLFxuICAgICAgICB3aWRnZXRMaXN0OiBbQWRkVGlsZURpYWxvZ1tdXSxcbiAgICAgICAgcHVibGljICRtZERpYWxvZzogYW5ndWxhci5tYXRlcmlhbC5JRGlhbG9nU2VydmljZVxuICAgICkge1xuICAgICAgICB0aGlzLmFjdGl2ZUdyb3VwSW5kZXggPSBfLmlzTnVtYmVyKGFjdGl2ZUdyb3VwSW5kZXgpID8gYWN0aXZlR3JvdXBJbmRleCA6IC0xO1xuICAgICAgICB0aGlzLmRlZmF1bHRUaWxlcyA9IF8uY2xvbmVEZWVwKHdpZGdldExpc3QpO1xuICAgICAgICB0aGlzLmdyb3VwcyA9IF8ubWFwKGdyb3VwcywgKGdyb3VwKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gZ3JvdXBbJ3RpdGxlJ107XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBhZGQoKSB7XG4gICAgICAgIHRoaXMuJG1kRGlhbG9nLmhpZGUoe1xuICAgICAgICAgICAgZ3JvdXBJbmRleDogdGhpcy5hY3RpdmVHcm91cEluZGV4LFxuICAgICAgICAgICAgd2lkZ2V0czogdGhpcy5kZWZhdWx0VGlsZXNcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHB1YmxpYyBjYW5jZWwoKSB7XG4gICAgICAgIHRoaXMuJG1kRGlhbG9nLmNhbmNlbCgpO1xuICAgIH07XG5cbiAgICBwdWJsaWMgZW5jcmVhc2UoZ3JvdXBJbmRleDogbnVtYmVyLCB3aWRnZXRJbmRleDogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IHdpZGdldCA9IHRoaXMuZGVmYXVsdFRpbGVzW2dyb3VwSW5kZXhdW3dpZGdldEluZGV4XTtcbiAgICAgICAgd2lkZ2V0LmFtb3VudCsrO1xuICAgICAgICB0aGlzLnRvdGFsVGlsZXMrKztcbiAgICB9O1xuXG4gICAgcHVibGljIGRlY3JlYXNlKGdyb3VwSW5kZXg6IG51bWJlciwgd2lkZ2V0SW5kZXg6IG51bWJlcikge1xuICAgICAgICBjb25zdCB3aWRnZXQgPSB0aGlzLmRlZmF1bHRUaWxlc1tncm91cEluZGV4XVt3aWRnZXRJbmRleF07XG4gICAgICAgIHdpZGdldC5hbW91bnQgPSB3aWRnZXQuYW1vdW50ID8gd2lkZ2V0LmFtb3VudCAtIDEgOiAwO1xuICAgICAgICB0aGlzLnRvdGFsVGlsZXMgPSB0aGlzLnRvdGFsVGlsZXMgPyB0aGlzLnRvdGFsVGlsZXMgLSAxIDogMDtcbiAgICB9O1xufSIsImltcG9ydCB7XG4gIEFkZFRpbGVEaWFsb2csXG4gIEFkZFRpbGVEaWFsb2dDb250cm9sbGVyXG59IGZyb20gJy4vQWRkVGlsZURpYWxvZ0NvbnRyb2xsZXInO1xuXG5leHBvcnQgaW50ZXJmYWNlIElBZGRUaWxlRGlhbG9nU2VydmljZSB7XG4gIHNob3coZ3JvdXBzLCBhY3RpdmVHcm91cEluZGV4KTogYW5ndWxhci5JUHJvbWlzZSA8IGFueSA+IDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJQWRkVGlsZURpYWxvZ3Byb3ZpZGVyIHtcbiAgY29uZmlnVGlsZXNMaXN0KGxpc3Q6IFtBZGRUaWxlRGlhbG9nW11dKTogdm9pZDtcbn1cblxue1xuICBjb25zdCBzZXRUcmFuc2xhdGlvbnMgPSBmdW5jdGlvbigkaW5qZWN0b3I6IG5nLmF1dG8uSUluamVjdG9yU2VydmljZSkge1xuICAgIGNvbnN0IHBpcFRyYW5zbGF0ZSA9ICRpbmplY3Rvci5oYXMoJ3BpcFRyYW5zbGF0ZVByb3ZpZGVyJykgPyAkaW5qZWN0b3IuZ2V0KCdwaXBUcmFuc2xhdGVQcm92aWRlcicpIDogbnVsbDtcbiAgICBpZiAocGlwVHJhbnNsYXRlKSB7XG4gICAgICAoPGFueT5waXBUcmFuc2xhdGUpLnNldFRyYW5zbGF0aW9ucygnZW4nLCB7XG4gICAgICAgIERBU0hCT0FSRF9BRERfVElMRV9ESUFMT0dfVElUTEU6ICdBZGQgY29tcG9uZW50JyxcbiAgICAgICAgREFTSEJPQVJEX0FERF9USUxFX0RJQUxPR19VU0VfSE9UX0tFWVM6ICdVc2UgXCJFbnRlclwiIG9yIFwiK1wiIGJ1dHRvbnMgb24ga2V5Ym9hcmQgdG8gZW5jcmVhc2UgYW5kIFwiRGVsZXRlXCIgb3IgXCItXCIgdG8gZGVjcmVhc2UgdGlsZXMgYW1vdW50JyxcbiAgICAgICAgREFTSEJPQVJEX0FERF9USUxFX0RJQUxPR19DUkVBVEVfTkVXX0dST1VQOiAnQ3JlYXRlIG5ldyBncm91cCdcbiAgICAgIH0pO1xuICAgICAgKDxhbnk+cGlwVHJhbnNsYXRlKS5zZXRUcmFuc2xhdGlvbnMoJ3J1Jywge1xuICAgICAgICBEQVNIQk9BUkRfQUREX1RJTEVfRElBTE9HX1RJVExFOiAn0JTQvtCx0LDQstC40YLRjCDQutC+0LzQv9C+0L3QtdC90YInLFxuICAgICAgICBEQVNIQk9BUkRfQUREX1RJTEVfRElBTE9HX1VTRV9IT1RfS0VZUzogJ9CY0YHQv9C+0LvRjNC30YPQudGC0LUgXCJFbnRlclwiINC40LvQuCBcIitcIiDQutC70LDQstC40YjQuCDQvdCwINC60LvQsNCy0LjQsNGC0YPRgNC1INGH0YLQvtCx0Ysg0YPQstC10LvQuNGH0LjRgtGMINC4IFwiRGVsZXRlXCIgb3IgXCItXCIg0YfRgtC+0LHRiyDRg9C80LXQvdGI0LjRgtGMINC60L7Qu9C40YfQtdGB0YLQstC+INGC0LDQudC70L7QsicsXG4gICAgICAgIERBU0hCT0FSRF9BRERfVElMRV9ESUFMT0dfQ1JFQVRFX05FV19HUk9VUDogJ9Ch0L7Qt9C00LDRgtGMINC90L7QstGD0Y4g0LPRgNGD0L/Qv9GDJ1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgY2xhc3MgQWRkVGlsZURpYWxvZ1NlcnZpY2UgaW1wbGVtZW50cyBJQWRkVGlsZURpYWxvZ1NlcnZpY2Uge1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihcbiAgICAgIHByaXZhdGUgd2lkZ2V0TGlzdDogW0FkZFRpbGVEaWFsb2dbXV0sXG4gICAgICBwcml2YXRlICRtZERpYWxvZzogYW5ndWxhci5tYXRlcmlhbC5JRGlhbG9nU2VydmljZVxuICAgICkge31cblxuICAgIHB1YmxpYyBzaG93KGdyb3VwcywgYWN0aXZlR3JvdXBJbmRleCkge1xuICAgICAgcmV0dXJuIHRoaXMuJG1kRGlhbG9nXG4gICAgICAgIC5zaG93KHtcbiAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FkZF90aWxlX2RpYWxvZy9BZGRUaWxlLmh0bWwnLFxuICAgICAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgICAgICAgY29udHJvbGxlcjogQWRkVGlsZURpYWxvZ0NvbnRyb2xsZXIsXG4gICAgICAgICAgY29udHJvbGxlckFzOiAnZGlhbG9nQ3RybCcsXG4gICAgICAgICAgY2xpY2tPdXRzaWRlVG9DbG9zZTogdHJ1ZSxcbiAgICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgICBncm91cHM6ICgpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIGdyb3VwcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhY3RpdmVHcm91cEluZGV4OiAoKSA9PiB7XG4gICAgICAgICAgICAgIHJldHVybiBhY3RpdmVHcm91cEluZGV4O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHdpZGdldExpc3Q6ICgpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuICg8YW55PnRoaXMud2lkZ2V0TGlzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgY2xhc3MgQWRkVGlsZURpYWxvZ1Byb3ZpZGVyIGltcGxlbWVudHMgSUFkZFRpbGVEaWFsb2dwcm92aWRlciB7XG4gICAgcHJpdmF0ZSBfc2VydmljZTogQWRkVGlsZURpYWxvZ1NlcnZpY2U7XG4gICAgcHJpdmF0ZSBfdGlsZXNMaXN0OiBbQWRkVGlsZURpYWxvZ1tdXSA9IG51bGw7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgICBwdWJsaWMgY29uZmlnVGlsZXNMaXN0ID0gZnVuY3Rpb24gKGxpc3Q6IFtBZGRUaWxlRGlhbG9nW11dKSB7XG4gICAgICB0aGlzLl90aWxlc0xpc3QgPSBsaXN0O1xuICAgIH07XG5cbiAgICBwdWJsaWMgJGdldCgkbWREaWFsb2c6IGFuZ3VsYXIubWF0ZXJpYWwuSURpYWxvZ1NlcnZpY2UpIHtcbiAgICAgIFwibmdJbmplY3RcIjtcblxuICAgICAgaWYgKHRoaXMuX3NlcnZpY2UgPT0gbnVsbClcbiAgICAgICAgdGhpcy5fc2VydmljZSA9IG5ldyBBZGRUaWxlRGlhbG9nU2VydmljZSh0aGlzLl90aWxlc0xpc3QsICRtZERpYWxvZyk7XG5cbiAgICAgIHJldHVybiB0aGlzLl9zZXJ2aWNlO1xuICAgIH1cbiAgfVxuXG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdwaXBBZGREYXNoYm9hcmRUaWxlRGlhbG9nJylcbiAgICAuY29uZmlnKHNldFRyYW5zbGF0aW9ucylcbiAgICAucHJvdmlkZXIoJ3BpcEFkZFRpbGVEaWFsb2cnLCBBZGRUaWxlRGlhbG9nUHJvdmlkZXIpO1xufSIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdwaXBBZGREYXNoYm9hcmRUaWxlRGlhbG9nJywgWyduZ01hdGVyaWFsJ10pO1xuXG5pbXBvcnQgJy4vQWRkVGlsZURpYWxvZ0NvbnRyb2xsZXInO1xuaW1wb3J0ICcuL0FkZFRpbGVQcm92aWRlcic7IiwiZXhwb3J0IGludGVyZmFjZSBJRGFzaGJvYXJkVGlsZSB7XG4gICAgb3B0aW9uczogYW55O1xuICAgIGNvbG9yOiBzdHJpbmc7XG4gICAgc2l6ZTogT2JqZWN0IHwgc3RyaW5nIHwgbnVtYmVyO1xuICAgIG1lbnU6IGFueTtcbn1cblxuZXhwb3J0IGNsYXNzIERhc2hib2FyZFRpbGUgaW1wbGVtZW50cyBJRGFzaGJvYXJkVGlsZSB7XG4gICAgcHVibGljIG9wdGlvbnM6IGFueTtcbiAgICBwdWJsaWMgY29sb3I6IHN0cmluZztcbiAgICBwdWJsaWMgc2l6ZTogT2JqZWN0IHwgc3RyaW5nIHwgbnVtYmVyO1xuICAgIHB1YmxpYyBtZW51OiBhbnkgPSBbe1xuICAgICAgICB0aXRsZTogJ0NoYW5nZSBTaXplJyxcbiAgICAgICAgYWN0aW9uOiBhbmd1bGFyLm5vb3AsXG4gICAgICAgIHN1Ym1lbnU6IFt7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICcxIHggMScsXG4gICAgICAgICAgICAgICAgYWN0aW9uOiAoKSA9PiB7IHRoaXMuY2hhbmdlU2l6ZSh7c2l6ZVg6IDEsIHNpemVZOiAxfSkgfSxcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICAgICAgc2l6ZVg6IDEsXG4gICAgICAgICAgICAgICAgICAgIHNpemVZOiAxXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJzIgeCAxJyxcbiAgICAgICAgICAgICAgICBhY3Rpb246ICdjaGFuZ2VTaXplJyxcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICAgICAgc2l6ZVg6IDIsXG4gICAgICAgICAgICAgICAgICAgIHNpemVZOiAxXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJzIgeCAyJyxcbiAgICAgICAgICAgICAgICBhY3Rpb246ICdjaGFuZ2VTaXplJyxcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICAgICAgc2l6ZVg6IDIsXG4gICAgICAgICAgICAgICAgICAgIHNpemVZOiAyXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfV07XG5cbiAgICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgICBwcm90ZWN0ZWQgY2hhbmdlU2l6ZShwYXJhbXMpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLnNpemUuY29sU3BhbiA9IHBhcmFtcy5zaXplWDtcbiAgICAgICAgdGhpcy5vcHRpb25zLnNpemUucm93U3BhbiA9IHBhcmFtcy5zaXplWTtcbiAgICB9XG59Iiwie1xuICAgIGFuZ3VsYXIubW9kdWxlKCdwaXBEYXNoYm9hcmQnKVxuICAgICAgICAuZGlyZWN0aXZlKCdwaXBEeW5hbWljVGlsZScsIGZ1bmN0aW9uIChcbiAgICAgICAgICAgICR0ZW1wbGF0ZVJlcXVlc3Q6IGFuZ3VsYXIuSVRlbXBsYXRlUmVxdWVzdFNlcnZpY2UsXG4gICAgICAgICAgICAkY29tcGlsZTogYW5ndWxhci5JQ29tcGlsZVNlcnZpY2UsXG4gICAgICAgICAgICAkaW50ZXJwb2xhdGU6IGFuZ3VsYXIuSUludGVycG9sYXRlU2VydmljZVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiAnPXBpcE9wdGlvbnMnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbW1vbl90aWxlL0R5bmFtaWNUaWxlLmh0bWwnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdAJyxcbiAgICAgICAgICAgICAgICBuYW1lOiAnY29udHJvbGxlcicsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAnJGN0cmwnLFxuICAgICAgICAgICAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgbGluazogZnVuY3Rpb24gKCRzY29wZSwgJGVsZW1lbnQsICRhdHRycykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBERUZBVUxUX01FTlUgPSBbe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdDaGFuZ2UgU2l6ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246IGFuZ3VsYXIubm9vcCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Ym1lbnU6IFt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnMSB4IDEnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFNpemVzKDEsIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemVYOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZVk6IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJzIgeCAxJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRTaXplcygyLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplWDogMixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemVZOiAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICcyIHggMicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0U2l6ZXMoMiwgMik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZVg6IDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplWTogMlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICB9XTtcblxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmV4dGVuZCgkc2NvcGVbJyRjdHJsJ10ub3B0aW9ucy5tZW51LCBERUZBVUxUX01FTlUpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnNbJ2NvbnRyb2xsZXJBcyddKSAmJiAkYXR0cnNbJ2NvbnRyb2xsZXJBcyddKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGVbJGF0dHJzWydjb250cm9sbGVyQXMnXV0gPSAkc2NvcGVbJyRjdHJsJ107XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzWyd0ZW1wbGF0ZSddKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHRlbXBsYXRlUmVxdWVzdCgkYXR0cnNbJ3RlbXBsYXRlJ10pLnRoZW4oKGh0bWwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZWxlbWVudC5maW5kKCdwaXAtc3BlY2lmaWMtdGVtcGxhdGUnKS5yZXBsYWNlV2l0aCgkY29tcGlsZShodG1sKSgkc2NvcGUpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gc2V0U2l6ZXMoeCwgeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlWyckY3RybCddLm9wdGlvbnMuc2l6ZS5jb2xTcGFuID0geDtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZVsnJGN0cmwnXS5vcHRpb25zLnNpemUucm93U3BhbiA9IHk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG59IiwiXG5jbGFzcyBUaWxlQ29sb3JzIHtcbiAgICBzdGF0aWMgYWxsOiBzdHJpbmdbXSA9IFsncHVycGxlJywgJ2dyZWVuJywgJ2dyYXknLCAnb3JhbmdlJywgJ2JsdWUnXTtcbn1cblxuY2xhc3MgVGlsZVNpemVzIHtcbiAgICBzdGF0aWMgYWxsOiBhbnkgPSBbe1xuICAgICAgICAgICAgbmFtZTogJ0RBU0hCT0FSRF9USUxFX0NPTkZJR19ESUFMT0dfU0laRV9TTUFMTCcsXG4gICAgICAgICAgICBpZDogJzExJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiAnREFTSEJPQVJEX1RJTEVfQ09ORklHX0RJQUxPR19TSVpFX1dJREUnLFxuICAgICAgICAgICAgaWQ6ICcyMSdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogJ0RBU0hCT0FSRF9USUxFX0NPTkZJR19ESUFMT0dfU0laRV9MQVJHRScsXG4gICAgICAgICAgICBpZDogJzIyJ1xuICAgICAgICB9XG4gICAgXTtcbn1cblxuZXhwb3J0IGNsYXNzIFRpbGVDb25maWdEaWFsb2dDb250cm9sbGVyIHtcbiAgICBwdWJsaWMgY29sb3JzOiBzdHJpbmdbXSA9IFRpbGVDb2xvcnMuYWxsO1xuICAgIHB1YmxpYyBzaXplczogYW55ID0gVGlsZVNpemVzLmFsbDtcbiAgICBwdWJsaWMgc2l6ZUlkOiBzdHJpbmcgPSBUaWxlU2l6ZXMuYWxsWzBdLmlkO1xuICAgIHB1YmxpYyBvbkNhbmNlbDogRnVuY3Rpb247XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIHBhcmFtcyxcbiAgICAgICAgcHVibGljIGV4dGVuc2lvblVybCxcbiAgICAgICAgcHVibGljICRtZERpYWxvZzogYW5ndWxhci5tYXRlcmlhbC5JRGlhbG9nU2VydmljZVxuICAgICkge1xuICAgICAgICBcIm5nSW5qZWN0XCI7XG5cbiAgICAgICAgYW5ndWxhci5leHRlbmQodGhpcywgdGhpcy5wYXJhbXMpO1xuICAgICAgICB0aGlzLnNpemVJZCA9ICcnICsgdGhpcy5wYXJhbXMuc2l6ZS5jb2xTcGFuICsgdGhpcy5wYXJhbXMuc2l6ZS5yb3dTcGFuO1xuXG4gICAgICAgIHRoaXMub25DYW5jZWwgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLiRtZERpYWxvZy5jYW5jZWwoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBvbkFwcGx5KHVwZGF0ZWREYXRhKSB7XG4gICAgICAgIHRoaXNbJ3NpemUnXS5zaXplWCA9IE51bWJlcih0aGlzLnNpemVJZC5zdWJzdHIoMCwgMSkpO1xuICAgICAgICB0aGlzWydzaXplJ10uc2l6ZVkgPSBOdW1iZXIodGhpcy5zaXplSWQuc3Vic3RyKDEsIDEpKTtcbiAgICAgICAgdGhpcy4kbWREaWFsb2cuaGlkZSh1cGRhdGVkRGF0YSk7XG4gICAgfVxufSIsInsgICAgXG4gICAgaW50ZXJmYWNlIElUaWxlQ29uZmlnRXh0ZW5kQ29tcG9uZW50QmluZGluZ3Mge1xuICAgICAgICBba2V5OiBzdHJpbmddOiBhbnk7XG5cbiAgICAgICAgcGlwRXh0ZW5zaW9uVXJsOiBhbnk7XG4gICAgICAgIHBpcERpYWxvZ1Njb3BlOiBhbnk7XG4gICAgICAgIHBpcEFwcGx5OiBhbnk7XG4gICAgfVxuXG4gICAgY29uc3QgVGlsZUNvbmZpZ0V4dGVuZENvbXBvbmVudEJpbmRpbmdzOiBJVGlsZUNvbmZpZ0V4dGVuZENvbXBvbmVudEJpbmRpbmdzID0ge1xuICAgICAgICBwaXBFeHRlbnNpb25Vcmw6ICc8JyxcbiAgICAgICAgcGlwRGlhbG9nU2NvcGU6ICc8JyxcbiAgICAgICAgcGlwQXBwbHk6ICcmJ1xuICAgIH1cblxuICAgIGNsYXNzIFRpbGVDb25maWdFeHRlbmRDb21wb25lbnRDaGFuZ2VzIGltcGxlbWVudHMgbmcuSU9uQ2hhbmdlc09iamVjdCwgSVRpbGVDb25maWdFeHRlbmRDb21wb25lbnRCaW5kaW5ncyB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106IG5nLklDaGFuZ2VzT2JqZWN0PGFueT47XG5cbiAgICAgICAgcGlwRXh0ZW5zaW9uVXJsOiBuZy5JQ2hhbmdlc09iamVjdDxzdHJpbmc+O1xuICAgICAgICBwaXBEaWFsb2dTY29wZTogbmcuSUNoYW5nZXNPYmplY3Q8bmcuSVNjb3BlPjtcblxuICAgICAgICBwaXBBcHBseTogbmcuSUNoYW5nZXNPYmplY3Q8KHt1cGRhdGVkRGF0YTogYW55fSkgPT4gbmcuSVByb21pc2U8dm9pZD4+O1xuICAgIH1cblxuICAgIGludGVyZmFjZSBJVGlsZUNvbmZpZ0V4dGVuZENvbXBvbmVudEF0dHJpYnV0ZXMgZXh0ZW5kcyBuZy5JQXR0cmlidXRlcyB7XG4gICAgICAgIHBpcEV4dGVuc2lvblVybDogc3RyaW5nXG4gICAgfVxuXG4gICAgY2xhc3MgVGlsZUNvbmZpZ0V4dGVuZENvbXBvbmVudENvbnRyb2xsZXIgaW1wbGVtZW50cyBJVGlsZUNvbmZpZ0V4dGVuZENvbXBvbmVudEJpbmRpbmdzIHtcbiAgICAgICAgcHVibGljIHBpcEV4dGVuc2lvblVybDogc3RyaW5nO1xuICAgICAgICBwdWJsaWMgcGlwRGlhbG9nU2NvcGU6IG5nLklTY29wZTtcbiAgICAgICAgcHVibGljIHBpcEFwcGx5OiAocGFyYW06IHt1cGRhdGVkRGF0YTogYW55fSkgPT4gbmcuSVByb21pc2U8dm9pZD47XG5cbiAgICAgICAgY29uc3RydWN0b3IoXG4gICAgICAgICAgICBwcml2YXRlICR0ZW1wbGF0ZVJlcXVlc3Q6IGFuZ3VsYXIuSVRlbXBsYXRlUmVxdWVzdFNlcnZpY2UsXG4gICAgICAgICAgICBwcml2YXRlICRjb21waWxlOiBhbmd1bGFyLklDb21waWxlU2VydmljZSxcbiAgICAgICAgICAgIHByaXZhdGUgJHNjb3BlOiBhbmd1bGFyLklTY29wZSwgXG4gICAgICAgICAgICBwcml2YXRlICRlbGVtZW50OiBKUXVlcnksIFxuICAgICAgICAgICAgcHJpdmF0ZSAkYXR0cnM6IElUaWxlQ29uZmlnRXh0ZW5kQ29tcG9uZW50QXR0cmlidXRlc1xuICAgICAgICApIHsgfVxuXG4gICAgICAgIHB1YmxpYyAkb25DaGFuZ2VzKGNoYW5nZXM6IFRpbGVDb25maWdFeHRlbmRDb21wb25lbnRDaGFuZ2VzKSB7XG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5waXBEaWFsb2dTY29wZSkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBjaGFuZ2VzLnBpcERpYWxvZ1Njb3BlLmN1cnJlbnRWYWx1ZVsnJHNjb3BlJ107XG4gICAgICAgICAgICAgICAgYW5ndWxhci5leHRlbmQodGhpcywgY2hhbmdlcy5waXBEaWFsb2dTY29wZS5jdXJyZW50VmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNoYW5nZXMucGlwRXh0ZW5zaW9uVXJsICYmIGNoYW5nZXMucGlwRXh0ZW5zaW9uVXJsLmN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuJHRlbXBsYXRlUmVxdWVzdChjaGFuZ2VzLnBpcEV4dGVuc2lvblVybC5jdXJyZW50VmFsdWUsIGZhbHNlKS50aGVuKChodG1sKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQuZmluZCgncGlwLWV4dGVuc2lvbi1wb2ludCcpLnJlcGxhY2VXaXRoKHRoaXMuJGNvbXBpbGUoaHRtbCkodGhpcy4kc2NvcGUpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBvbkFwcGx5KCkge1xuICAgICAgICAgICAgdGhpcy5waXBBcHBseSh7dXBkYXRlZERhdGE6IHRoaXN9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHBpcFRpbGVDb25maWdDb21wb25lbnQ6IG5nLklDb21wb25lbnRPcHRpb25zID0ge1xuICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbmZpZ190aWxlX2RpYWxvZy9Db25maWdEaWFsb2dFeHRlbmRDb21wb25lbnQuaHRtbCcsXG4gICAgICAgIGNvbnRyb2xsZXI6IFRpbGVDb25maWdFeHRlbmRDb21wb25lbnRDb250cm9sbGVyLFxuICAgICAgICBiaW5kaW5nczogVGlsZUNvbmZpZ0V4dGVuZENvbXBvbmVudEJpbmRpbmdzXG4gICAgfVxuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdwaXBDb25maWdEYXNoYm9hcmRUaWxlRGlhbG9nJylcbiAgICAgICAgLmNvbXBvbmVudCgncGlwVGlsZUNvbmZpZ0V4dGVuZENvbXBvbmVudCcsIHBpcFRpbGVDb25maWdDb21wb25lbnQpO1xufSIsImltcG9ydCB7IFRpbGVDb25maWdEaWFsb2dDb250cm9sbGVyIH0gZnJvbSAnLi9Db25maWdEaWFsb2dDb250cm9sbGVyJztcblxuZXhwb3J0IGludGVyZmFjZSBJVGlsZUNvbmZpZ1NlcnZpY2Uge1xuICAgIHNob3cocGFyYW1zOiBJVGlsZUNvbmZpZ0RpYWxvZ09wdGlvbnMsIHN1Y2Nlc3NDYWxsYmFjayA/IDogKGtleSkgPT4gdm9pZCwgY2FuY2VsQ2FsbGJhY2sgPyA6ICgpID0+IHZvaWQpOiBhbnk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVRpbGVDb25maWdEaWFsb2dPcHRpb25zIGV4dGVuZHMgYW5ndWxhci5tYXRlcmlhbC5JRGlhbG9nT3B0aW9ucyB7XG4gICAgZGlhbG9nQ2xhc3M/OiBzdHJpbmc7XG4gICAgZXh0ZW5zaW9uVXJsPzogc3RyaW5nO1xuICAgIGV2ZW50PzogYW55O1xufVxuXG57XG4gICAgY29uc3Qgc2V0VHJhbnNsYXRpb25zID0gZnVuY3Rpb24oJGluamVjdG9yOiBuZy5hdXRvLklJbmplY3RvclNlcnZpY2UpIHtcbiAgICAgICAgY29uc3QgcGlwVHJhbnNsYXRlID0gJGluamVjdG9yLmhhcygncGlwVHJhbnNsYXRlUHJvdmlkZXInKSA/ICRpbmplY3Rvci5nZXQoJ3BpcFRyYW5zbGF0ZVByb3ZpZGVyJykgOiBudWxsO1xuICAgICAgICBpZiAocGlwVHJhbnNsYXRlKSB7XG4gICAgICAgICAgICAoIDwgYW55ID4gcGlwVHJhbnNsYXRlKS5zZXRUcmFuc2xhdGlvbnMoJ2VuJywge1xuICAgICAgICAgICAgICAgIERBU0hCT0FSRF9USUxFX0NPTkZJR19ESUFMT0dfVElUTEU6ICdFZGl0IHRpbGUnLFxuICAgICAgICAgICAgICAgIERBU0hCT0FSRF9USUxFX0NPTkZJR19ESUFMT0dfU0laRV9TTUFMTDogJ1NtYWxsJyxcbiAgICAgICAgICAgICAgICBEQVNIQk9BUkRfVElMRV9DT05GSUdfRElBTE9HX1NJWkVfV0lERTogJ1dpZGUnLFxuICAgICAgICAgICAgICAgIERBU0hCT0FSRF9USUxFX0NPTkZJR19ESUFMT0dfU0laRV9MQVJHRTogJ0xhcmdlJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAoIDwgYW55ID4gcGlwVHJhbnNsYXRlKS5zZXRUcmFuc2xhdGlvbnMoJ3J1Jywge1xuICAgICAgICAgICAgICAgIERBU0hCT0FSRF9USUxFX0NPTkZJR19ESUFMT0dfVElUTEU6ICfQmNC30LzQtdC90LjRgtGMINCy0LjQtNC20LXRgicsXG4gICAgICAgICAgICAgICAgREFTSEJPQVJEX1RJTEVfQ09ORklHX0RJQUxPR19TSVpFX1NNQUxMOiAn0JzQsNC70LXQvS4nLFxuICAgICAgICAgICAgICAgIERBU0hCT0FSRF9USUxFX0NPTkZJR19ESUFMT0dfU0laRV9XSURFOiAn0KjQuNGA0L7QutC40LknLFxuICAgICAgICAgICAgICAgIERBU0hCT0FSRF9USUxFX0NPTkZJR19ESUFMT0dfU0laRV9MQVJHRTogJ9CR0L7Qu9GM0YjQvtC5J1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjbGFzcyBUaWxlQ29uZmlnRGlhbG9nU2VydmljZSB7XG4gICAgICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihcbiAgICAgICAgICAgIHB1YmxpYyAkbWREaWFsb2c6IGFuZ3VsYXIubWF0ZXJpYWwuSURpYWxvZ1NlcnZpY2VcbiAgICAgICAgKSB7fVxuXG4gICAgICAgIHB1YmxpYyBzaG93KHBhcmFtczogSVRpbGVDb25maWdEaWFsb2dPcHRpb25zLCBzdWNjZXNzQ2FsbGJhY2sgPyA6IChrZXkpID0+IHZvaWQsIGNhbmNlbENhbGxiYWNrID8gOiAoKSA9PiB2b2lkKSB7XG4gICAgICAgICAgICB0aGlzLiRtZERpYWxvZy5zaG93KHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RXZlbnQ6IHBhcmFtcy5ldmVudCxcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IHBhcmFtcy50ZW1wbGF0ZVVybCB8fCAnY29uZmlnX3RpbGVfZGlhbG9nL0NvbmZpZ0RpYWxvZy5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogVGlsZUNvbmZpZ0RpYWxvZ0NvbnRyb2xsZXIsXG4gICAgICAgICAgICAgICAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBleHRlbnNpb25Vcmw6IHBhcmFtcy5leHRlbnNpb25VcmwsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IHBhcmFtcy5sb2NhbHNcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY2xpY2tPdXRzaWRlVG9DbG9zZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnRoZW4oKGtleSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3VjY2Vzc0NhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2soa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhbmNlbENhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYW5jZWxDYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ3BpcENvbmZpZ0Rhc2hib2FyZFRpbGVEaWFsb2cnKVxuICAgICAgICAuY29uZmlnKHNldFRyYW5zbGF0aW9ucylcbiAgICAgICAgLnNlcnZpY2UoJ3BpcFRpbGVDb25maWdEaWFsb2dTZXJ2aWNlJywgVGlsZUNvbmZpZ0RpYWxvZ1NlcnZpY2UpO1xufSIsIlxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ3BpcENvbmZpZ0Rhc2hib2FyZFRpbGVEaWFsb2cnLCBbJ25nTWF0ZXJpYWwnXSk7XG5cbmltcG9ydCAnLi9Db25maWdEaWFsb2dDb250cm9sbGVyJztcbmltcG9ydCAnLi9Db25maWdEaWFsb2dTZXJ2aWNlJztcbmltcG9ydCAnLi9Db25maWdEaWFsb2dFeHRlbmRDb21wb25lbnQnOyIsImltcG9ydCB7XG4gIElUaWxlVGVtcGxhdGVTZXJ2aWNlXG59IGZyb20gJy4uL3V0aWxpdHkvVGlsZVRlbXBsYXRlVXRpbGl0eSc7XG5pbXBvcnQge1xuICBJQWRkVGlsZURpYWxvZ1NlcnZpY2UsXG4gIElBZGRUaWxlRGlhbG9ncHJvdmlkZXJcbn0gZnJvbSAnLi4vYWRkX3RpbGVfZGlhbG9nL0FkZFRpbGVQcm92aWRlcidcbmltcG9ydCB7SURhc2hib2FyZFNlcnZpY2UsIElEYXNoYm9hcmRUaWxlVHlwZU9wdGlvbnN9IGZyb20gJy4uL3V0aWxpdHkvSURhc2hib2FyZFNlcnZpY2UnO1xuXG57XG4gIGNvbnN0IHNldFRyYW5zbGF0aW9ucyA9IGZ1bmN0aW9uICgkaW5qZWN0b3I6IG5nLmF1dG8uSUluamVjdG9yU2VydmljZSkge1xuICAgIGNvbnN0IHBpcFRyYW5zbGF0ZSA9ICRpbmplY3Rvci5oYXMoJ3BpcFRyYW5zbGF0ZVByb3ZpZGVyJykgPyAkaW5qZWN0b3IuZ2V0KCdwaXBUcmFuc2xhdGVQcm92aWRlcicpIDogbnVsbDtcbiAgICBpZiAocGlwVHJhbnNsYXRlKSB7XG4gICAgICAoIDwgYW55ID4gcGlwVHJhbnNsYXRlKS5zZXRUcmFuc2xhdGlvbnMoJ2VuJywge1xuICAgICAgICBEUk9QX1RPX0NSRUFURV9ORVdfR1JPVVA6ICdEcm9wIGhlcmUgdG8gY3JlYXRlIG5ldyBncm91cCcsXG4gICAgICB9KTtcbiAgICAgICggPCBhbnkgPiBwaXBUcmFuc2xhdGUpLnNldFRyYW5zbGF0aW9ucygncnUnLCB7XG4gICAgICAgIERST1BfVE9fQ1JFQVRFX05FV19HUk9VUDogJ9Cf0LXRgNC10YLQsNGJ0LjRgtC1INGB0Y7QtNCwINC00LvRjyDRgdC+0LfQtNCw0L3QuNGPINC90L7QstC+0Lkg0LPRgNGD0L/Qv9GLJ1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgY29uZmlndXJlQXZhaWxhYmxlV2lkZ2V0cyA9IGZ1bmN0aW9uIChwaXBBZGRUaWxlRGlhbG9nUHJvdmlkZXI6IElBZGRUaWxlRGlhbG9ncHJvdmlkZXIpIHtcbiAgICBwaXBBZGRUaWxlRGlhbG9nUHJvdmlkZXIuY29uZmlnVGlsZXNMaXN0KFtcbiAgICAgIFt7XG4gICAgICAgICAgdGl0bGU6ICdFdmVudCcsXG4gICAgICAgICAgaWNvbjogJ2RvY3VtZW50JyxcbiAgICAgICAgICBuYW1lOiAnZXZlbnQnLFxuICAgICAgICAgIGFtb3VudDogMFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdGl0bGU6ICdQb3NpdGlvbicsXG4gICAgICAgICAgaWNvbjogJ2xvY2F0aW9uJyxcbiAgICAgICAgICBuYW1lOiAncG9zaXRpb24nLFxuICAgICAgICAgIGFtb3VudDogMFxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgW3tcbiAgICAgICAgICB0aXRsZTogJ0NhbGVuZGFyJyxcbiAgICAgICAgICBpY29uOiAnZGF0ZScsXG4gICAgICAgICAgbmFtZTogJ2NhbGVuZGFyJyxcbiAgICAgICAgICBhbW91bnQ6IDBcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHRpdGxlOiAnU3RpY2t5IE5vdGVzJyxcbiAgICAgICAgICBpY29uOiAnbm90ZS10YWtlJyxcbiAgICAgICAgICBuYW1lOiAnbm90ZXMnLFxuICAgICAgICAgIGFtb3VudDogMFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdGl0bGU6ICdTdGF0aXN0aWNzJyxcbiAgICAgICAgICBpY29uOiAndHItc3RhdGlzdGljcycsXG4gICAgICAgICAgbmFtZTogJ3N0YXRpc3RpY3MnLFxuICAgICAgICAgIGFtb3VudDogMFxuICAgICAgICB9XG4gICAgICBdXG4gICAgXSk7XG4gIH1cblxuICBjbGFzcyBkcmFnZ2FibGVPcHRpb25zIHtcbiAgICB0aWxlV2lkdGg6IG51bWJlcjtcbiAgICB0aWxlSGVpZ2h0OiBudW1iZXI7XG4gICAgZ3V0dGVyOiBudW1iZXI7XG4gICAgaW5saW5lOiBib29sZWFuO1xuICB9XG5cbiAgY29uc3QgREVGQVVMVF9HUklEX09QVElPTlM6IGRyYWdnYWJsZU9wdGlvbnMgPSB7XG4gICAgdGlsZVdpZHRoOiAxNTAsIC8vICdweCdcbiAgICB0aWxlSGVpZ2h0OiAxNTAsIC8vICdweCdcbiAgICBndXR0ZXI6IDEwLCAvLyAncHgnXG4gICAgaW5saW5lOiBmYWxzZVxuICB9O1xuXG4gIGludGVyZmFjZSBEYXNoYm9hcmRCaW5kaW5ncyB7XG4gICAgICBncmlkT3B0aW9uczogYW55O1xuICAgICAgZ3JvdXBBZGRpdGlvbmFsQWN0aW9uczogYW55O1xuICAgICAgZ3JvdXBlZFdpZGdldHM6IGFueTtcbiAgfVxuXG4gIGNsYXNzIERhc2hib2FyZENvbnRyb2xsZXIgaW1wbGVtZW50cyBuZy5JQ29udHJvbGxlciwgRGFzaGJvYXJkQmluZGluZ3Mge1xuICAgIHByaXZhdGUgZGVmYXVsdEdyb3VwTWVudUFjdGlvbnM6IGFueSA9IFt7XG4gICAgICAgIHRpdGxlOiAnQWRkIENvbXBvbmVudCcsXG4gICAgICAgIGNhbGxiYWNrOiAoZ3JvdXBJbmRleCkgPT4ge1xuICAgICAgICAgIHRoaXMuYWRkQ29tcG9uZW50KGdyb3VwSW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICB0aXRsZTogJ1JlbW92ZScsXG4gICAgICAgIGNhbGxiYWNrOiAoZ3JvdXBJbmRleCkgPT4ge1xuICAgICAgICAgIHRoaXMucmVtb3ZlR3JvdXAoZ3JvdXBJbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHRpdGxlOiAnQ29uZmlndXJhdGUnLFxuICAgICAgICBjYWxsYmFjazogKGdyb3VwSW5kZXgpID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnY29uZmlndXJhdGUgZ3JvdXAgd2l0aCBpbmRleDonLCBncm91cEluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIF07XG4gICAgcHJpdmF0ZSBfaW5jbHVkZVRwbDogc3RyaW5nID0gJzxwaXAte3sgdHlwZSB9fS10aWxlIGdyb3VwPVwiZ3JvdXBJbmRleFwiIGluZGV4PVwiaW5kZXhcIicgK1xuICAgICAgJ3BpcC1vcHRpb25zPVwiJHBhcmVudC4kY3RybC5ncm91cGVkV2lkZ2V0c1tncm91cEluZGV4XVtcXCdzb3VyY2VcXCddW2luZGV4XS5vcHRzXCI+JyArXG4gICAgICAnPC9waXAte3sgdHlwZSB9fS10aWxlPic7XG4gICAgcHJpdmF0ZSBfZHluYW1pY1RpbGVUcGw6IHN0cmluZyA9ICc8cGlwLWR5bmFtaWMtdGlsZSBjb250cm9sbGVyPVwie3sgY3RybCB9fVwiJyArIFxuICAgICcgdGVtcGxhdGU9XCJ7eyB0bXBsIH19XCIgY2xhc3M9XCJ7eyBjbGFzcyB9fVwiIGNvbnRyb2xsZXItYXM9XCJ7eyBjdHJsQXMgfX1cIiAnICsgXG4gICAgJ3BpcC1vcHRpb25zPVwiJHBhcmVudC4kY3RybC5ncm91cGVkV2lkZ2V0c1tncm91cEluZGV4XVtcXCdzb3VyY2VcXCddW2luZGV4XS5vcHRzXCI+PC9waXAtZHluYW1pYy10aWxlPic7XG5cbiAgICBwdWJsaWMgZ3JvdXBlZFdpZGdldHM6IGFueTtcbiAgICBwdWJsaWMgZHJhZ2dhYmxlR3JpZE9wdGlvbnM6IGRyYWdnYWJsZU9wdGlvbnM7XG4gICAgcHVibGljIHdpZGdldHNUZW1wbGF0ZXM6IGFueTtcbiAgICBwdWJsaWMgZ3JvdXBNZW51QWN0aW9uczogYW55ID0gdGhpcy5kZWZhdWx0R3JvdXBNZW51QWN0aW9ucztcbiAgICBwdWJsaWMgd2lkZ2V0c0NvbnRleHQ6IGFueTtcbiAgICBwdWJsaWMgZ3JpZE9wdGlvbnM6IGFueTtcbiAgICBwdWJsaWMgZ3JvdXBBZGRpdGlvbmFsQWN0aW9uczogYW55O1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAkc2NvcGU6IGFuZ3VsYXIuSVNjb3BlLFxuICAgICAgcHJpdmF0ZSAkcm9vdFNjb3BlOiBhbmd1bGFyLklSb290U2NvcGVTZXJ2aWNlLFxuICAgICAgcHJpdmF0ZSAkYXR0cnM6IGFueSxcbiAgICAgIHByaXZhdGUgJGVsZW1lbnQ6IGFueSxcbiAgICAgIHByaXZhdGUgJHRpbWVvdXQ6IGFuZ3VsYXIuSVRpbWVvdXRTZXJ2aWNlLFxuICAgICAgcHJpdmF0ZSAkaW50ZXJwb2xhdGU6IGFuZ3VsYXIuSUludGVycG9sYXRlU2VydmljZSxcbiAgICAgIHByaXZhdGUgcGlwQWRkVGlsZURpYWxvZzogSUFkZFRpbGVEaWFsb2dTZXJ2aWNlLFxuICAgICAgcHJpdmF0ZSBwaXBUaWxlVGVtcGxhdGU6IElUaWxlVGVtcGxhdGVTZXJ2aWNlLFxuICAgICAgcHJpdmF0ZSBwaXBEYXNoYm9hcmQ6IElEYXNoYm9hcmRTZXJ2aWNlXG4gICAgKSB7XG4gICAgICAvLyBBZGQgY2xhc3MgdG8gc3R5bGUgc2Nyb2xsIGJhclxuICAgICAgJGVsZW1lbnQuYWRkQ2xhc3MoJ3BpcC1zY3JvbGwnKTtcblxuICAgICAgLy8gU2V0IHRpbGVzIGdyaWQgb3B0aW9uc1xuICAgICAgdGhpcy5kcmFnZ2FibGVHcmlkT3B0aW9ucyA9IHRoaXMuZ3JpZE9wdGlvbnMgfHwgREVGQVVMVF9HUklEX09QVElPTlM7XG5cbiAgICAgIC8vIFN3aXRjaCBpbmxpbmUgZGlzcGxheWluZ1xuICAgICAgaWYgKHRoaXMuZHJhZ2dhYmxlR3JpZE9wdGlvbnMuaW5saW5lID09PSB0cnVlKSB7XG4gICAgICAgICRlbGVtZW50LmFkZENsYXNzKCdpbmxpbmUtZ3JpZCcpO1xuICAgICAgfVxuICAgICAgLy8gRXh0ZW5kIGdyb3VwJ3MgbWVudSBhY3Rpb25zXG4gICAgICBpZiAodGhpcy5ncm91cEFkZGl0aW9uYWxBY3Rpb25zKSBhbmd1bGFyLmV4dGVuZCh0aGlzLmdyb3VwTWVudUFjdGlvbnMsIHRoaXMuZ3JvdXBBZGRpdGlvbmFsQWN0aW9ucyk7XG5cbiAgICAgIC8vIENvbXBpbGUgd2lkZ2V0c1xuICAgICAgdGhpcy53aWRnZXRzQ29udGV4dCA9ICRzY29wZTtcbiAgICAgIHRoaXMuY29tcGlsZVdpZGdldHMoKTtcblxuICAgICAgdGhpcy4kdGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3MoJ3Zpc2libGUnKTtcbiAgICAgIH0sIDcwMCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjb21waWxlV2lkZ2V0cygpIHtcbiAgICAgIF8uZWFjaCh0aGlzLmdyb3VwZWRXaWRnZXRzLCAoZ3JvdXAsIGdyb3VwSW5kZXgpID0+IHtcbiAgICAgICAgZ3JvdXAucmVtb3ZlZFdpZGdldHMgPSBncm91cC5yZW1vdmVkV2lkZ2V0cyB8fCBbXSxcbiAgICAgICAgICBncm91cC5zb3VyY2UgPSBncm91cC5zb3VyY2UubWFwKCh3aWRnZXQsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBsZXQgdHlwZTogSURhc2hib2FyZFRpbGVUeXBlT3B0aW9ucztcbiAgICAgICAgICAgIGxldCBzcGVjaWZpY1R5cGU6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgICAgIC8vIEVzdGFibGlzaCBkZWZhdWx0IHByb3BzXG4gICAgICAgICAgICB3aWRnZXQuc2l6ZSA9IHdpZGdldC5zaXplIHx8IHtcbiAgICAgICAgICAgICAgY29sU3BhbjogMSxcbiAgICAgICAgICAgICAgcm93U3BhbjogMVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpZGdldC5pbmRleCA9IGluZGV4O1xuICAgICAgICAgICAgd2lkZ2V0Lmdyb3VwSW5kZXggPSBncm91cEluZGV4O1xuICAgICAgICAgICAgd2lkZ2V0Lm1lbnUgPSB3aWRnZXQubWVudSB8fCBbXTtcbiAgICAgICAgICAgIGlmICh0eXBlID0gdGhpcy5waXBEYXNoYm9hcmQuZ2V0VHlwZUJ5TmFtZSh3aWRnZXQudHlwZSkpIHtcbiAgICAgICAgICAgICAgd2lkZ2V0LmN0cmwgPSB0eXBlLmNvbnRyb2xsZXI7XG4gICAgICAgICAgICAgIHdpZGdldC50bXBsID0gdHlwZS50ZW1wbGF0ZVVybCB8fCB0eXBlLnRlbXBsYXRlO1xuICAgICAgICAgICAgICB3aWRnZXQuY3RybEFzID0gdHlwZS5jb250cm9sbGVyQXM7XG4gICAgICAgICAgICAgIHdpZGdldC5jbGFzcyA9IHR5cGUuY2xhc3M7XG5cbiAgICAgICAgICAgICAgc3BlY2lmaWNUeXBlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKHdpZGdldC5tZW51LCBbe1xuICAgICAgICAgICAgICB0aXRsZTogJ1JlbW92ZScsXG4gICAgICAgICAgICAgIGNsaWNrOiAoaXRlbSwgcGFyYW1zLCBvYmplY3QpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZVdpZGdldChpdGVtLCBwYXJhbXMsIG9iamVjdCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1dKTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgb3B0czogd2lkZ2V0Lm9wdHMgfHwgd2lkZ2V0LFxuICAgICAgICAgICAgICB0ZW1wbGF0ZTp0aGlzLnBpcFRpbGVUZW1wbGF0ZS5nZXRUZW1wbGF0ZSh3aWRnZXQsIHRoaXMuX2R5bmFtaWNUaWxlVHBsKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9KVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIGFkZENvbXBvbmVudChncm91cEluZGV4KSB7XG4gICAgICB0aGlzLnBpcEFkZFRpbGVEaWFsb2dcbiAgICAgICAgLnNob3codGhpcy5ncm91cGVkV2lkZ2V0cywgZ3JvdXBJbmRleClcbiAgICAgICAgLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICB2YXIgYWN0aXZlR3JvdXA7XG5cbiAgICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZGF0YS5ncm91cEluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgYWN0aXZlR3JvdXAgPSB0aGlzLmdyb3VwZWRXaWRnZXRzW2RhdGEuZ3JvdXBJbmRleF07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFjdGl2ZUdyb3VwID0ge1xuICAgICAgICAgICAgICB0aXRsZTogJ05ldyBncm91cCcsXG4gICAgICAgICAgICAgIHNvdXJjZTogW11cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5hZGRXaWRnZXRzKGFjdGl2ZUdyb3VwLnNvdXJjZSwgZGF0YS53aWRnZXRzKTtcblxuICAgICAgICAgIGlmIChkYXRhLmdyb3VwSW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLmdyb3VwZWRXaWRnZXRzLnB1c2goYWN0aXZlR3JvdXApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuY29tcGlsZVdpZGdldHMoKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHB1YmxpYyByZW1vdmVHcm91cCA9IChncm91cEluZGV4KSA9PiB7XG4gICAgICB0aGlzLmdyb3VwZWRXaWRnZXRzLnNwbGljZShncm91cEluZGV4LCAxKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFkZFdpZGdldHMoZ3JvdXAsIHdpZGdldHMpIHtcbiAgICAgIHdpZGdldHMuZm9yRWFjaCgod2lkZ2V0R3JvdXApID0+IHtcbiAgICAgICAgd2lkZ2V0R3JvdXAuZm9yRWFjaCgod2lkZ2V0KSA9PiB7XG4gICAgICAgICAgaWYgKHdpZGdldC5hbW91bnQpIHtcbiAgICAgICAgICAgIEFycmF5LmFwcGx5KG51bGwsIEFycmF5KHdpZGdldC5hbW91bnQpKS5mb3JFYWNoKCgpID0+IHtcbiAgICAgICAgICAgICAgZ3JvdXAucHVzaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogd2lkZ2V0Lm5hbWVcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW1vdmVXaWRnZXQoaXRlbSwgcGFyYW1zLCBvYmplY3QpIHtcbiAgICAgIHRoaXMuZ3JvdXBlZFdpZGdldHNbcGFyYW1zLm9wdGlvbnMuZ3JvdXBJbmRleF0ucmVtb3ZlZFdpZGdldHMgPSBbXTtcbiAgICAgIHRoaXMuZ3JvdXBlZFdpZGdldHNbcGFyYW1zLm9wdGlvbnMuZ3JvdXBJbmRleF0ucmVtb3ZlZFdpZGdldHMucHVzaChwYXJhbXMub3B0aW9ucy5pbmRleCk7XG4gICAgICB0aGlzLmdyb3VwZWRXaWRnZXRzW3BhcmFtcy5vcHRpb25zLmdyb3VwSW5kZXhdLnNvdXJjZS5zcGxpY2UocGFyYW1zLm9wdGlvbnMuaW5kZXgsIDEpO1xuICAgICAgdGhpcy4kdGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuZ3JvdXBlZFdpZGdldHNbcGFyYW1zLm9wdGlvbnMuZ3JvdXBJbmRleF0ucmVtb3ZlZFdpZGdldHMgPSBbXTtcbiAgICAgIH0pO1xuICAgIH1cblxuICB9XG5cbiAgY29uc3QgRGFzaGJvYXJkOiBuZy5JQ29tcG9uZW50T3B0aW9ucyA9IHtcbiAgICBiaW5kaW5nczoge1xuICAgICAgZ3JpZE9wdGlvbnM6ICc9cGlwR3JpZE9wdGlvbnMnLFxuICAgICAgZ3JvdXBBZGRpdGlvbmFsQWN0aW9uczogJz1waXBHcm91cEFjdGlvbnMnLFxuICAgICAgZ3JvdXBlZFdpZGdldHM6ICc9cGlwR3JvdXBzJ1xuICAgIH0sXG4gICAgY29udHJvbGxlcjogRGFzaGJvYXJkQ29udHJvbGxlcixcbiAgICB0ZW1wbGF0ZVVybDogJ2Rhc2hib2FyZC9EYXNoYm9hcmQuaHRtbCdcbiAgfVxuXG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdwaXBEYXNoYm9hcmQnKVxuICAgIC5jb25maWcoY29uZmlndXJlQXZhaWxhYmxlV2lkZ2V0cylcbiAgICAuY29uZmlnKHNldFRyYW5zbGF0aW9ucylcbiAgICAuY29tcG9uZW50KCdwaXBEYXNoYm9hcmQnLCBEYXNoYm9hcmQpO1xuXG59IiwiZGVjbGFyZSB2YXIgaW50ZXJhY3Q7XG5cbmltcG9ydCB7XG4gIERyYWdUaWxlU2VydmljZSxcbiAgSURyYWdUaWxlU2VydmljZSxcbiAgSURyYWdUaWxlQ29uc3RydWN0b3Jcbn0gZnJvbSAnLi9EcmFnZ2FibGVUaWxlU2VydmljZSc7XG5pbXBvcnQge1xuICBUaWxlc0dyaWRTZXJ2aWNlLFxuICBJVGlsZXNHcmlkU2VydmljZSxcbiAgSVRpbGVzR3JpZENvbnN0cnVjdG9yXG59IGZyb20gJy4uL3RpbGVfZ3JvdXAvVGlsZUdyb3VwU2VydmljZSc7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX1RJTEVfV0lEVEg6IG51bWJlciA9IDE1MDtcbmV4cG9ydCBjb25zdCBERUZBVUxUX1RJTEVfSEVJR0hUOiBudW1iZXIgPSAxNTA7XG5leHBvcnQgY29uc3QgVVBEQVRFX0dST1VQU19FVkVOVCA9IFwicGlwVXBkYXRlRGFzaGJvYXJkR3JvdXBzQ29uZmlnXCI7XG5cbmNvbnN0IFNJTVBMRV9MQVlPVVRfQ09MVU1OU19DT1VOVDogbnVtYmVyID0gMjtcbmNvbnN0IERFRkFVTFRfT1BUSU9OUyA9IHtcbiAgdGlsZVdpZHRoOiBERUZBVUxUX1RJTEVfV0lEVEgsIC8vICdweCdcbiAgdGlsZUhlaWdodDogREVGQVVMVF9USUxFX0hFSUdIVCwgLy8gJ3B4J1xuICBndXR0ZXI6IDAsIC8vICdweCdcbiAgY29udGFpbmVyOiAncGlwLWRyYWdnYWJsZS1ncmlkOmZpcnN0LW9mLXR5cGUnLFxuICAvL21vYmlsZUJyZWFrcG9pbnQgICAgICAgOiBYWFgsICAgLy8gR2V0IGZyb20gcGlwTWVkaWEgU2VydmljZSBpbiB0aGUgY29uc3RydWN0b3JcbiAgYWN0aXZlRHJvcHpvbmVDbGFzczogJ2Ryb3B6b25lLWFjdGl2ZScsXG4gIGdyb3VwQ29udGFuaW5lclNlbGVjdG9yOiAnLnBpcC1kcmFnZ2FibGUtZ3JvdXA6bm90KC5maWN0LWdyb3VwKScsXG59O1xuXG57XG4gIGludGVyZmFjZSBJRHJhZ2dhYmxlQmluZGluZ3Mge1xuICAgICAgdGlsZXNUZW1wbGF0ZXM6IGFueTtcbiAgICAgIHRpbGVzQ29udGV4dDogYW55O1xuICAgICAgb3B0aW9uczogYW55O1xuICAgICAgZ3JvdXBNZW51QWN0aW9uczogYW55O1xuICAgICAgJGNvbnRhaW5lcjogSlF1ZXJ5O1xuICB9XG5cbiAgaW50ZXJmYWNlIElEcmFnZ2FibGVDb250cm9sbGVyU2NvcGUgZXh0ZW5kcyBuZy5JU2NvcGUge1xuICAgICRjb250YWluZXI6IEpRdWVyeTtcbiAgICB0aWxlc1RlbXBsYXRlczogYW55O1xuICAgIG9wdGlvbnM6IGFueTtcbiAgfVxuXG4gIGludGVyZmFjZSBJVGlsZVNjb3BlIGV4dGVuZHMgbmcuSVNjb3BlIHtcbiAgICBpbmRleDogbnVtYmVyIHwgc3RyaW5nO1xuICAgIGdyb3VwSW5kZXg6IG51bWJlciB8IHN0cmluZztcbiAgfVxuXG4gIGNsYXNzIERyYWdnYWJsZUNvbnRyb2xsZXIgaW1wbGVtZW50cyBuZy5JQ29tcG9uZW50Q29udHJvbGxlciwgSURyYWdnYWJsZUJpbmRpbmdzIHtcbiAgICBwdWJsaWMgb3B0czogYW55O1xuICAgIHB1YmxpYyBncm91cHM6IGFueTtcbiAgICBwdWJsaWMgc291cmNlRHJvcFpvbmVFbGVtOiBhbnkgPSBudWxsO1xuICAgIHB1YmxpYyBpc1NhbWVEcm9wem9uZTogYm9vbGVhbiA9IHRydWU7XG4gICAgcHVibGljIHRpbGVHcm91cHM6IGFueSA9IG51bGw7XG4gICAgcHVibGljIGF2YWlsYWJsZVdpZHRoOiBudW1iZXI7XG4gICAgcHVibGljIGF2YWlsYWJsZUNvbHVtbnM6IG51bWJlcjtcbiAgICBwdWJsaWMgZ3JvdXBzQ29udGFpbmVyczogYW55O1xuICAgIHB1YmxpYyBjb250YWluZXI6IGFueTtcbiAgICBwdWJsaWMgYWN0aXZlRHJhZ2dlZEdyb3VwOiBhbnk7XG4gICAgcHVibGljIGRyYWdnZWRUaWxlOiBhbnk7XG4gICAgcHVibGljIGNvbnRhaW5lck9mZnNldDogYW55O1xuICAgIHB1YmxpYyB0aWxlc1RlbXBsYXRlczogYW55O1xuICAgIHB1YmxpYyB0aWxlc0NvbnRleHQ6IGFueTtcbiAgICBwdWJsaWMgb3B0aW9uczogYW55O1xuICAgIHB1YmxpYyBncm91cE1lbnVBY3Rpb25zOiBhbnk7XG4gICAgcHVibGljICRjb250YWluZXI6IEpRdWVyeTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgcHJpdmF0ZSAkc2NvcGU6IElEcmFnZ2FibGVDb250cm9sbGVyU2NvcGUsXG4gICAgICBwcml2YXRlICRyb290U2NvcGU6IGFuZ3VsYXIuSVJvb3RTY29wZVNlcnZpY2UsXG4gICAgICBwcml2YXRlICRjb21waWxlOiBhbmd1bGFyLklDb21waWxlU2VydmljZSxcbiAgICAgIHByaXZhdGUgJHRpbWVvdXQ6IGFuZ3VsYXIuSVRpbWVvdXRTZXJ2aWNlLFxuICAgICAgcHJpdmF0ZSAkZWxlbWVudDogSlF1ZXJ5LFxuICAgICAgcGlwRHJhZ1RpbGU6IElEcmFnVGlsZVNlcnZpY2UsXG4gICAgICBwaXBUaWxlc0dyaWQ6IElUaWxlc0dyaWRTZXJ2aWNlLFxuICAgICAgcGlwTWVkaWE6IHBpcC5sYXlvdXRzLklNZWRpYVNlcnZpY2VcbiAgICApIHtcbiAgICAgIHRoaXMub3B0cyA9IF8ubWVyZ2Uoe1xuICAgICAgICBtb2JpbGVCcmVha3BvaW50OiBwaXBNZWRpYS5icmVha3BvaW50cy54c1xuICAgICAgfSwgREVGQVVMVF9PUFRJT05TLCB0aGlzLm9wdGlvbnMpO1xuY29uc29sZS5sb2coJ3RoaXMub3B0aW9ucycsIHRoaXMub3B0aW9ucyk7XG5cbmNvbnNvbGUubG9nKCd0aGlzLm9wdHMnLCB0aGlzLm9wdHMpO1xuICAgICAgdGhpcy5ncm91cHMgPSB0aGlzLnRpbGVzVGVtcGxhdGVzLm1hcCgoZ3JvdXAsIGdyb3VwSW5kZXgpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0aXRsZTogZ3JvdXAudGl0bGUsXG4gICAgICAgICAgZWRpdGluZ05hbWU6IGZhbHNlLFxuICAgICAgICAgIGluZGV4OiBncm91cEluZGV4LFxuICAgICAgICAgIHNvdXJjZTogZ3JvdXAuc291cmNlLm1hcCgodGlsZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdGlsZVNjb3BlID0gdGhpcy5jcmVhdGVUaWxlU2NvcGUodGlsZSk7XG5cbiAgICAgICAgICAgIHJldHVybiBJRHJhZ1RpbGVDb25zdHJ1Y3RvcihEcmFnVGlsZVNlcnZpY2UsIHtcbiAgICAgICAgICAgICAgdHBsOiAkY29tcGlsZSh0aWxlLnRlbXBsYXRlKSh0aWxlU2NvcGUpLFxuICAgICAgICAgICAgICBvcHRpb25zOiB0aWxlLm9wdHMsXG4gICAgICAgICAgICAgIHNpemU6IHRpbGUub3B0cy5zaXplXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KVxuICAgICAgICB9O1xuICAgICAgfSk7XG5cbiAgICAgIC8vIEFkZCB0ZW1wbGF0ZXMgd2F0Y2hlclxuICAgICAgJHNjb3BlLiR3YXRjaCgnJGN0cmwudGlsZXNUZW1wbGF0ZXMnLCAobmV3VmFsKSA9PiB7XG4gICAgICAgIHRoaXMud2F0Y2gobmV3VmFsKTtcbiAgICAgIH0sIHRydWUpO1xuXG4gICAgICAvLyBJbml0aWFsaXplIGRhdGFcbiAgICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xuXG4gICAgICAvLyBSZXNpemUgaGFuZGxlciBUT0RPOiByZXBsYWNlIGJ5IHBpcCByZXNpemUgd2F0Y2hlcnNcbiAgICAgICQod2luZG93KS5vbigncmVzaXplJywgXy5kZWJvdW5jZSgoKSA9PiB7XG4gICAgICAgIHRoaXMuYXZhaWxhYmxlV2lkdGggPSB0aGlzLmdldENvbnRhaW5lcldpZHRoKCk7XG4gICAgICAgIHRoaXMuYXZhaWxhYmxlQ29sdW1ucyA9IHRoaXMuZ2V0QXZhaWxhYmxlQ29sdW1ucyh0aGlzLmF2YWlsYWJsZVdpZHRoKTtcblxuICAgICAgICB0aGlzLnRpbGVHcm91cHMuZm9yRWFjaCgoZ3JvdXApID0+IHtcbiAgICAgICAgICBncm91cFxuICAgICAgICAgICAgLnNldEF2YWlsYWJsZUNvbHVtbnModGhpcy5hdmFpbGFibGVDb2x1bW5zKVxuICAgICAgICAgICAgLmdlbmVyYXRlR3JpZCh0aGlzLmdldFNpbmdsZVRpbGVXaWR0aEZvck1vYmlsZSh0aGlzLmF2YWlsYWJsZVdpZHRoKSlcbiAgICAgICAgICAgIC5zZXRUaWxlc0RpbWVuc2lvbnMoKVxuICAgICAgICAgICAgLmNhbGNDb250YWluZXJIZWlnaHQoKTtcbiAgICAgICAgfSk7XG4gICAgICB9LCA1MCkpO1xuXG4gICAgICB0aGlzLiRyb290U2NvcGUuJG9uKCdkcmFnZ2FibGU6c3RhcnQnLCAoZGF0YSwgZXZlbnQpID0+IHtcbiAgICAgICAgdGhpcy5vbkRyYWdTdGFydExpc3RlbmVyKGV2ZW50KTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLiRyb290U2NvcGUuJG9uKCdkcmFnZ2FibGU6bW92ZScsIChkYXRhLCBldmVudCkgPT4ge1xuICAgICAgICB0aGlzLm9uRHJhZ01vdmVMaXN0ZW5lcihldmVudCk7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy4kcm9vdFNjb3BlLiRvbignZHJhZ2dhYmxlOmVuZCcsIChkYXRhLCBldmVudCkgPT4ge1xuICAgICAgICB0aGlzLm9uRHJhZ0VuZExpc3RlbmVyKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBQb3N0IGxpbmsgZnVuY3Rpb25cbiAgICBwdWJsaWMgJHBvc3RMaW5rKCkge1xuICAgICAgdGhpcy4kY29udGFpbmVyID0gdGhpcy4kZWxlbWVudDtcbiAgICB9XG5cbiAgICAvLyBXYXRjaCBoYW5kbGVyXG4gICAgcHJpdmF0ZSB3YXRjaChuZXdWYWwpIHtcbiAgICAgIGNvbnN0IHByZXZWYWwgPSB0aGlzLmdyb3VwcztcbiAgICAgIGxldCBjaGFuZ2VkR3JvdXBJbmRleCA9IG51bGw7XG5cbiAgICAgIGlmIChuZXdWYWwubGVuZ3RoID4gcHJldlZhbC5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5hZGRHcm91cChuZXdWYWxbbmV3VmFsLmxlbmd0aCAtIDFdKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChuZXdWYWwubGVuZ3RoIDwgcHJldlZhbC5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVHcm91cHMobmV3VmFsKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmV3VmFsLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGdyb3VwV2lkZ2V0RGlmZiA9IHByZXZWYWxbaV0uc291cmNlLmxlbmd0aCAtIG5ld1ZhbFtpXS5zb3VyY2UubGVuZ3RoO1xuICAgICAgICBpZiAoZ3JvdXBXaWRnZXREaWZmIHx8IChuZXdWYWxbaV0ucmVtb3ZlZFdpZGdldHMgJiYgbmV3VmFsW2ldLnJlbW92ZWRXaWRnZXRzLmxlbmd0aCA+IDApKSB7XG4gICAgICAgICAgY2hhbmdlZEdyb3VwSW5kZXggPSBpO1xuXG4gICAgICAgICAgaWYgKGdyb3VwV2lkZ2V0RGlmZiA8IDApIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1RpbGVzID0gbmV3VmFsW2NoYW5nZWRHcm91cEluZGV4XS5zb3VyY2Uuc2xpY2UoZ3JvdXBXaWRnZXREaWZmKTtcblxuICAgICAgICAgICAgXy5lYWNoKG5ld1RpbGVzLCAodGlsZSkgPT4ge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZygndGlsZScsIHRpbGUpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuYWRkVGlsZXNJbnRvR3JvdXAobmV3VGlsZXMsIHRoaXMudGlsZUdyb3Vwc1tjaGFuZ2VkR3JvdXBJbmRleF0sIHRoaXMuZ3JvdXBzQ29udGFpbmVyc1tjaGFuZ2VkR3JvdXBJbmRleF0pO1xuXG4gICAgICAgICAgICB0aGlzLiR0aW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy51cGRhdGVUaWxlc0dyb3VwcygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlVGlsZXModGhpcy50aWxlR3JvdXBzW2NoYW5nZWRHcm91cEluZGV4XSwgbmV3VmFsW2NoYW5nZWRHcm91cEluZGV4XS5yZW1vdmVkV2lkZ2V0cywgdGhpcy5ncm91cHNDb250YWluZXJzW2NoYW5nZWRHcm91cEluZGV4XSk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVRpbGVzT3B0aW9ucyhuZXdWYWwpO1xuICAgICAgICAgICAgdGhpcy4kdGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMudXBkYXRlVGlsZXNHcm91cHMoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobmV3VmFsICYmIHRoaXMudGlsZUdyb3Vwcykge1xuICAgICAgICB0aGlzLnVwZGF0ZVRpbGVzT3B0aW9ucyhuZXdWYWwpO1xuICAgICAgICB0aGlzLiR0aW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZVRpbGVzR3JvdXBzKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIElubGluZSBlZGl0IGdyb3VwIGhhbmRsZXJzXG4gICAgcHVibGljIG9uVGl0bGVDbGljayhncm91cCwgZXZlbnQpIHtcbiAgICAgIGlmICghZ3JvdXAuZWRpdGluZ05hbWUpIHtcbiAgICAgICAgZ3JvdXAub2xkVGl0bGUgPSBfLmNsb25lKGdyb3VwLnRpdGxlKTtcbiAgICAgICAgZ3JvdXAuZWRpdGluZ05hbWUgPSB0cnVlO1xuICAgICAgICB0aGlzLiR0aW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAkKGV2ZW50LmN1cnJlbnRUYXJnZXQuY2hpbGRyZW5bMF0pLmZvY3VzKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBjYW5jZWxFZGl0aW5nKGdyb3VwKSB7XG4gICAgICBncm91cC50aXRsZSA9IGdyb3VwLm9sZFRpdGxlO1xuICAgIH1cblxuICAgIHB1YmxpYyBvbkJsdXJUaXRsZUlucHV0KGdyb3VwKSB7XG4gICAgICB0aGlzLiR0aW1lb3V0KCgpID0+IHtcbiAgICAgICAgZ3JvdXAuZWRpdGluZ05hbWUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy4kcm9vdFNjb3BlLiRicm9hZGNhc3QoVVBEQVRFX0dST1VQU19FVkVOVCwgdGhpcy5ncm91cHMpO1xuICAgICAgICAvLyBVcGRhdGUgdGl0bGUgaW4gb3V0ZXIgc2NvcGVcbiAgICAgICAgdGhpcy50aWxlc1RlbXBsYXRlc1tncm91cC5pbmRleF0udGl0bGUgPSBncm91cC50aXRsZTtcbiAgICAgIH0sIDEwMCk7XG4gICAgfVxuXG4gICAgcHVibGljIG9uS3llcHJlc3NUaXRsZUlucHV0KGdyb3VwLCBldmVudCkge1xuICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IDEzKSB7XG4gICAgICAgIHRoaXMub25CbHVyVGl0bGVJbnB1dChncm91cCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVXBkYXRlIG91dGVyIHNjb3BlIGZ1bmN0aW9uc1xuICAgIHByaXZhdGUgdXBkYXRlVGlsZXNUZW1wbGF0ZXModXBkYXRlVHlwZTogc3RyaW5nLCBzb3VyY2UgPyA6IGFueSkge1xuICAgICAgc3dpdGNoICh1cGRhdGVUeXBlKSB7XG4gICAgICAgIGNhc2UgJ2FkZEdyb3VwJzpcbiAgICAgICAgICBpZiAodGhpcy5ncm91cHMubGVuZ3RoICE9PSB0aGlzLnRpbGVzVGVtcGxhdGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy50aWxlc1RlbXBsYXRlcy5wdXNoKHNvdXJjZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdtb3ZlVGlsZSc6XG4gICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgZnJvbUluZGV4LFxuICAgICAgICAgICAgdG9JbmRleCxcbiAgICAgICAgICAgIHRpbGVPcHRpb25zLFxuICAgICAgICAgICAgZnJvbVRpbGVJbmRleFxuICAgICAgICAgIH0gPSB7XG4gICAgICAgICAgICBmcm9tSW5kZXg6IHNvdXJjZS5mcm9tLmVsZW0uYXR0cmlidXRlc1snZGF0YS1ncm91cC1pZCddLnZhbHVlLFxuICAgICAgICAgICAgdG9JbmRleDogc291cmNlLnRvLmVsZW0uYXR0cmlidXRlc1snZGF0YS1ncm91cC1pZCddLnZhbHVlLFxuICAgICAgICAgICAgdGlsZU9wdGlvbnM6IHNvdXJjZS50aWxlLm9wdHMub3B0aW9ucyxcbiAgICAgICAgICAgIGZyb21UaWxlSW5kZXg6IHNvdXJjZS50aWxlLm9wdHMub3B0aW9ucy5pbmRleFxuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnRpbGVzVGVtcGxhdGVzW2Zyb21JbmRleF0uc291cmNlLnNwbGljZShmcm9tVGlsZUluZGV4LCAxKTtcbiAgICAgICAgICB0aGlzLnRpbGVzVGVtcGxhdGVzW3RvSW5kZXhdLnNvdXJjZS5wdXNoKHtcbiAgICAgICAgICAgIG9wdHM6IHRpbGVPcHRpb25zXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICB0aGlzLnJlSW5kZXhUaWxlcyhzb3VyY2UuZnJvbS5lbGVtKTtcbiAgICAgICAgICB0aGlzLnJlSW5kZXhUaWxlcyhzb3VyY2UudG8uZWxlbSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gTWFuYWdlIHRpbGVzIGZ1bmN0aW9uc1xuICAgIHByaXZhdGUgY3JlYXRlVGlsZVNjb3BlKHRpbGU6IGFueSk6IElUaWxlU2NvcGUge1xuICAgICAgY29uc3QgdGlsZVNjb3BlID0gPCBJVGlsZVNjb3BlID4gdGhpcy4kcm9vdFNjb3BlLiRuZXcoZmFsc2UsIHRoaXMudGlsZXNDb250ZXh0KTtcbiAgICAgIHRpbGVTY29wZS5pbmRleCA9IHRpbGUub3B0cy5pbmRleCA9PSB1bmRlZmluZWQgPyB0aWxlLm9wdHMub3B0aW9ucy5pbmRleCA6IHRpbGUub3B0cy5pbmRleDtcbiAgICAgIHRpbGVTY29wZS5ncm91cEluZGV4ID0gdGlsZS5vcHRzLmdyb3VwSW5kZXggPT0gdW5kZWZpbmVkID8gdGlsZS5vcHRzLm9wdGlvbnMuZ3JvdXBJbmRleCA6IHRpbGUub3B0cy5ncm91cEluZGV4O1xuXG4gICAgICByZXR1cm4gdGlsZVNjb3BlO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVtb3ZlVGlsZXMoZ3JvdXAsIGluZGV4ZXMsIGNvbnRhaW5lcikge1xuICAgICAgY29uc3QgdGlsZXMgPSAkKGNvbnRhaW5lcikuZmluZCgnLnBpcC1kcmFnZ2FibGUtdGlsZScpO1xuXG4gICAgICBfLmVhY2goaW5kZXhlcywgKGluZGV4KSA9PiB7XG4gICAgICAgIGdyb3VwLnRpbGVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIHRpbGVzW2luZGV4XS5yZW1vdmUoKTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLnJlSW5kZXhUaWxlcyhjb250YWluZXIpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVJbmRleFRpbGVzKGNvbnRhaW5lciwgZ0luZGV4ID8gKSB7XG4gICAgICBjb25zdCB0aWxlcyA9ICQoY29udGFpbmVyKS5maW5kKCcucGlwLWRyYWdnYWJsZS10aWxlJyksXG4gICAgICAgIGdyb3VwSW5kZXggPSBnSW5kZXggPT09IHVuZGVmaW5lZCA/IGNvbnRhaW5lci5hdHRyaWJ1dGVzWydkYXRhLWdyb3VwLWlkJ10udmFsdWUgOiBnSW5kZXg7XG5cbiAgICAgIF8uZWFjaCh0aWxlcywgKHRpbGUsIGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGNoaWxkID0gJCh0aWxlKS5jaGlsZHJlbigpWzBdO1xuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoY2hpbGQpLnNjb3BlKClbJ2luZGV4J10gPSBpbmRleDtcbiAgICAgICAgYW5ndWxhci5lbGVtZW50KGNoaWxkKS5zY29wZSgpWydncm91cEluZGV4J10gPSBncm91cEluZGV4O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW1vdmVHcm91cHMobmV3R3JvdXBzKSB7XG4gICAgICBjb25zdCByZW1vdmVJbmRleGVzID0gW10sXG4gICAgICAgIHJlbWFpbiA9IFtdLFxuICAgICAgICBjb250YWluZXJzID0gW107XG5cbiAgICAgIF8uZWFjaCh0aGlzLmdyb3VwcywgKGdyb3VwLCBpbmRleCkgPT4ge1xuICAgICAgICBpZiAoXy5maW5kSW5kZXgobmV3R3JvdXBzLCAoZykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGdbJ3RpdGxlJ10gPT09IGdyb3VwLnRpdGxlXG4gICAgICAgICAgfSkgPCAwKSB7XG4gICAgICAgICAgcmVtb3ZlSW5kZXhlcy5wdXNoKGluZGV4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZW1haW4ucHVzaChpbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBfLmVhY2gocmVtb3ZlSW5kZXhlcy5yZXZlcnNlKCksIChpbmRleCkgPT4ge1xuICAgICAgICB0aGlzLmdyb3Vwcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB0aGlzLnRpbGVHcm91cHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIH0pO1xuXG4gICAgICBfLmVhY2gocmVtYWluLCAoaW5kZXgpID0+IHtcbiAgICAgICAgY29udGFpbmVycy5wdXNoKHRoaXMuZ3JvdXBzQ29udGFpbmVyc1tpbmRleF0pO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuZ3JvdXBzQ29udGFpbmVycyA9IGNvbnRhaW5lcnM7XG5cbiAgICAgIF8uZWFjaCh0aGlzLmdyb3Vwc0NvbnRhaW5lcnMsIChjb250YWluZXIsIGluZGV4KSA9PiB7XG4gICAgICAgIHRoaXMucmVJbmRleFRpbGVzKGNvbnRhaW5lciwgaW5kZXgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhZGRHcm91cChzb3VyY2VHcm91cCwgYWZ0ZXJGaWN0ID0gZmFsc2UpIHtcbiAgICAgIGNvbnN0IGdyb3VwID0ge1xuICAgICAgICB0aXRsZTogc291cmNlR3JvdXAudGl0bGUsXG4gICAgICAgIHNvdXJjZTogc291cmNlR3JvdXAuc291cmNlLm1hcCgodGlsZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHRpbGVTY29wZSA9IHRoaXMuY3JlYXRlVGlsZVNjb3BlKHRpbGUpO1xuXG4gICAgICAgICAgcmV0dXJuIElEcmFnVGlsZUNvbnN0cnVjdG9yKERyYWdUaWxlU2VydmljZSwge1xuICAgICAgICAgICAgdHBsOiB0aGlzLiRjb21waWxlKHRoaXMud3JhcENvbXBvbmVudCh0aWxlLnRlbXBsYXRlKSkodGlsZVNjb3BlKSxcbiAgICAgICAgICAgIG9wdGlvbnM6IHRpbGUub3B0cyxcbiAgICAgICAgICAgIHNpemU6IHRpbGUub3B0cy5zaXplXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pXG4gICAgICB9O1xuXG4gICAgICB0aGlzLmdyb3Vwcy5wdXNoKGdyb3VwKTtcbiAgICAgIGlmIChhZnRlckZpY3QgJiYgIXRoaXMuJHNjb3BlLiQkcGhhc2UpIHRoaXMuJHNjb3BlLiRhcHBseSgpO1xuXG4gICAgICB0aGlzLiR0aW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5ncm91cHNDb250YWluZXJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLm9wdHMuZ3JvdXBDb250YW5pbmVyU2VsZWN0b3IpO1xuICAgICAgICB0aGlzLnRpbGVHcm91cHMucHVzaChcbiAgICAgICAgICBJVGlsZXNHcmlkQ29uc3RydWN0b3IoVGlsZXNHcmlkU2VydmljZSwgZ3JvdXAuc291cmNlLCB0aGlzLm9wdHMsIHRoaXMuYXZhaWxhYmxlQ29sdW1ucywgdGhpcy5ncm91cHNDb250YWluZXJzW3RoaXMuZ3JvdXBzQ29udGFpbmVycy5sZW5ndGggLSAxXSlcbiAgICAgICAgICAuZ2VuZXJhdGVHcmlkKHRoaXMuZ2V0U2luZ2xlVGlsZVdpZHRoRm9yTW9iaWxlKHRoaXMuYXZhaWxhYmxlV2lkdGgpKVxuICAgICAgICAgIC5zZXRUaWxlc0RpbWVuc2lvbnMoKVxuICAgICAgICAgIC5jYWxjQ29udGFpbmVySGVpZ2h0KClcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLnVwZGF0ZVRpbGVzVGVtcGxhdGVzKCdhZGRHcm91cCcsIHNvdXJjZUdyb3VwKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHdyYXBDb21wb25lbnQoY29udGVudCk6IGFueSB7XG4gICAgICByZXR1cm4gJCgnPGRpdj4nKVxuICAgICAgICAgIC5hZGRDbGFzcygncGlwLWRyYWdnYWJsZS10aWxlJylcbiAgICAgICAgICAuYXR0cigncGlwLWRyYWcnLCAndHJ1ZScpXG4gICAgICAgICAgLmF0dHIoJ3BpcC1zY3JvbGwtY29udGFpbmVyJywgXCInLnBpcC1kYXNoYm9hcmQtc2Nyb2xsJ1wiKVxuICAgICAgICAgIC5hcHBlbmQoY29udGVudClcbiAgICAgICAgICAuZ2V0KDApO1xuICAgIH1cblxuICAgIHByaXZhdGUgYWRkVGlsZXNJbnRvR3JvdXAobmV3VGlsZXMsIGdyb3VwLCBncm91cENvbnRhaW5lcikge1xuICAgICAgbmV3VGlsZXMuZm9yRWFjaCgodGlsZSkgPT4ge1xuICAgICAgICBjb25zdCB0aWxlU2NvcGUgPSB0aGlzLmNyZWF0ZVRpbGVTY29wZSh0aWxlKTtcblxuICAgICAgICBjb25zdCBuZXdUaWxlID0gSURyYWdUaWxlQ29uc3RydWN0b3IoRHJhZ1RpbGVTZXJ2aWNlLCB7XG4gICAgICAgICAgdHBsOiB0aGlzLiRjb21waWxlKHRoaXMud3JhcENvbXBvbmVudCh0aWxlLnRlbXBsYXRlKSkodGlsZVNjb3BlKSxcbiAgICAgICAgICBvcHRpb25zOiB0aWxlLm9wdHMsXG4gICAgICAgICAgc2l6ZTogdGlsZS5vcHRzLnNpemVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZ3JvdXAuYWRkVGlsZShuZXdUaWxlKTtcblxuICAgICAgICAkKG5ld1RpbGUuZ2V0Q29tcGlsZWRUZW1wbGF0ZSgpKVxuICAgICAgICAgIC5hcHBlbmRUbyhncm91cENvbnRhaW5lcik7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZVRpbGVzT3B0aW9ucyhvcHRpb25zR3JvdXApIHtcbiAgICAgIG9wdGlvbnNHcm91cC5mb3JFYWNoKChvcHRpb25Hcm91cCkgPT4ge1xuICAgICAgICBvcHRpb25Hcm91cC5zb3VyY2UuZm9yRWFjaCgodGlsZU9wdGlvbnMpID0+IHtcbiAgICAgICAgICB0aGlzLnRpbGVHcm91cHMuZm9yRWFjaCgoZ3JvdXApID0+IHtcbiAgICAgICAgICAgIGdyb3VwLnVwZGF0ZVRpbGVPcHRpb25zKHRpbGVPcHRpb25zLm9wdHMpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgaW5pdFRpbGVzR3JvdXBzKHRpbGVHcm91cHMsIG9wdHMsIGdyb3Vwc0NvbnRhaW5lcnMpIHtcbiAgICAgIHJldHVybiB0aWxlR3JvdXBzLm1hcCgoZ3JvdXAsIGluZGV4KSA9PiB7XG4gICAgICAgIHJldHVybiBJVGlsZXNHcmlkQ29uc3RydWN0b3IoVGlsZXNHcmlkU2VydmljZSwgZ3JvdXAuc291cmNlLCBvcHRzLCB0aGlzLmF2YWlsYWJsZUNvbHVtbnMsIGdyb3Vwc0NvbnRhaW5lcnNbaW5kZXhdKVxuICAgICAgICAgIC5nZW5lcmF0ZUdyaWQodGhpcy5nZXRTaW5nbGVUaWxlV2lkdGhGb3JNb2JpbGUodGhpcy5hdmFpbGFibGVXaWR0aCkpXG4gICAgICAgICAgLnNldFRpbGVzRGltZW5zaW9ucygpXG4gICAgICAgICAgLmNhbGNDb250YWluZXJIZWlnaHQoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlVGlsZXNHcm91cHMob25seVBvc2l0aW9uID8gLCBkcmFnZ2VkVGlsZSA/ICkge1xuICAgICAgdGhpcy50aWxlR3JvdXBzLmZvckVhY2goKGdyb3VwKSA9PiB7XG4gICAgICAgIGlmICghb25seVBvc2l0aW9uKSB7XG4gICAgICAgICAgZ3JvdXAuZ2VuZXJhdGVHcmlkKHRoaXMuZ2V0U2luZ2xlVGlsZVdpZHRoRm9yTW9iaWxlKHRoaXMuYXZhaWxhYmxlV2lkdGgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdyb3VwXG4gICAgICAgICAgLnNldFRpbGVzRGltZW5zaW9ucyhvbmx5UG9zaXRpb24sIGRyYWdnZWRUaWxlKVxuICAgICAgICAgIC5jYWxjQ29udGFpbmVySGVpZ2h0KHRoaXMub3B0aW9ucy50aWxlSGVpZ2h0KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0Q29udGFpbmVyV2lkdGgoKTogYW55IHtcbiAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuJGNvbnRhaW5lciB8fCAkKCdib2R5Jyk7XG4gICAgICByZXR1cm4gY29udGFpbmVyLndpZHRoKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRBdmFpbGFibGVDb2x1bW5zKGF2YWlsYWJsZVdpZHRoKTogYW55IHtcbiAgICAgIHJldHVybiB0aGlzLm9wdHMubW9iaWxlQnJlYWtwb2ludCA+IGF2YWlsYWJsZVdpZHRoID8gU0lNUExFX0xBWU9VVF9DT0xVTU5TX0NPVU5UIDpcbiAgICAgICAgTWF0aC5mbG9vcihhdmFpbGFibGVXaWR0aCAvICh0aGlzLm9wdHMudGlsZVdpZHRoICsgdGhpcy5vcHRzLmd1dHRlcikpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0QWN0aXZlR3JvdXBBbmRUaWxlKGVsZW0pOiBhbnkge1xuICAgICAgY29uc3QgYWN0aXZlID0ge307XG5cbiAgICAgIHRoaXMudGlsZUdyb3Vwcy5mb3JFYWNoKChncm91cCkgPT4ge1xuICAgICAgICBjb25zdCBmb3VuZFRpbGUgPSBncm91cC5nZXRUaWxlQnlOb2RlKGVsZW0pO1xuXG4gICAgICAgIGlmIChmb3VuZFRpbGUpIHtcbiAgICAgICAgICBhY3RpdmVbJ2dyb3VwJ10gPSBncm91cDtcbiAgICAgICAgICBhY3RpdmVbJ3RpbGUnXSA9IGZvdW5kVGlsZTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gYWN0aXZlO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0U2luZ2xlVGlsZVdpZHRoRm9yTW9iaWxlKGF2YWlsYWJsZVdpZHRoKTogYW55IHtcbiAgICAgIGNvbnNvbGUubG9nKCdndXQnLCB0aGlzLm9wdHMuZ3V0dGVyKTtcbiAgICAgIHJldHVybiB0aGlzLm9wdHMubW9iaWxlQnJlYWtwb2ludCA+IGF2YWlsYWJsZVdpZHRoID8gYXZhaWxhYmxlV2lkdGggLyAyIC0gdGhpcy5vcHRzLmd1dHRlciA6IG51bGw7XG4gICAgfVxuXG4gICAgcHVibGljIG9uRHJhZ1N0YXJ0TGlzdGVuZXIoZXZlbnQpIHtcbiAgICAgIGlmICghZXZlbnQueCkgcmV0dXJuO1xuY29uc29sZS5sb2coJ2RyYWcgc3RhcnQnKTtcbiAgICAgIGV2ZW50LnRhcmdldCA9IGV2ZW50LmVsZW1lbnQuZ2V0KDApO1xuXG4gICAgICBjb25zdCBhY3RpdmVFbnRpdGllcyA9IHRoaXMuZ2V0QWN0aXZlR3JvdXBBbmRUaWxlKGV2ZW50LnRhcmdldCk7XG5cbiAgICAgIHRoaXMuY29udGFpbmVyID0gJChldmVudC50YXJnZXQpLnBhcmVudCgnLnBpcC1kcmFnZ2FibGUtZ3JvdXAnKS5nZXQoMCk7XG4gICAgICB0aGlzLnNvdXJjZURyb3Bab25lRWxlbSA9IHRoaXMuY29udGFpbmVyO1xuICAgICAgdGhpcy5kcmFnZ2VkVGlsZSA9IGFjdGl2ZUVudGl0aWVzWyd0aWxlJ107XG4gICAgICB0aGlzLmFjdGl2ZURyYWdnZWRHcm91cCA9IGFjdGl2ZUVudGl0aWVzWydncm91cCddO1xuY29uc29sZS5sb2coJ2FjdGl2ZURyYWdnZWRHcm91cCcsIHRoaXMuYWN0aXZlRHJhZ2dlZEdyb3VwKTtcbiAgICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3MoJ2RyYWctdHJhbnNmZXInKTtcblxuICAgICAgdGhpcy5kcmFnZ2VkVGlsZS5zdGFydERyYWcoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb25EcmFnTW92ZUxpc3RlbmVyKGV2ZW50KSB7XG4gICAgICBjb25zdCB0YXJnZXQgPSBldmVudC5lbGVtZW50LmdldCgwKTtcbmNvbnNvbGUubG9nKCdkcmFnIG1vdmUnKTtcbiAgICAgIHRoaXMuY29udGFpbmVyT2Zmc2V0ID0gdGhpcy5nZXRDb250YWluZXJPZmZzZXQoKTtcbiAgICAgIFxuICAgICAgY29uc3QgYmVsb3dFbGVtZW50ID0gdGhpcy5hY3RpdmVEcmFnZ2VkR3JvdXAuZ2V0VGlsZUJ5Q29vcmRpbmF0ZXMoe1xuICAgICAgICBsZWZ0OiBldmVudC54IC0gdGhpcy5jb250YWluZXJPZmZzZXQubGVmdCxcbiAgICAgICAgdG9wOiBldmVudC55IC0gdGhpcy5jb250YWluZXJPZmZzZXQudG9wXG4gICAgICB9LCB0aGlzLmRyYWdnZWRUaWxlKTtcblxuICAgICAgaWYgKGJlbG93RWxlbWVudCkge1xuICAgICAgICBjb25zdCBkcmFnZ2VkVGlsZUluZGV4ID0gdGhpcy5hY3RpdmVEcmFnZ2VkR3JvdXAuZ2V0VGlsZUluZGV4KHRoaXMuZHJhZ2dlZFRpbGUpO1xuICAgICAgICBjb25zdCBiZWxvd0VsZW1JbmRleCA9IHRoaXMuYWN0aXZlRHJhZ2dlZEdyb3VwLmdldFRpbGVJbmRleChiZWxvd0VsZW1lbnQpO1xuXG4gICAgICAgIGlmICgoZHJhZ2dlZFRpbGVJbmRleCArIDEpID09PSBiZWxvd0VsZW1JbmRleCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYWN0aXZlRHJhZ2dlZEdyb3VwXG4gICAgICAgICAgLnN3YXBUaWxlcyh0aGlzLmRyYWdnZWRUaWxlLCBiZWxvd0VsZW1lbnQpXG4gICAgICAgICAgLnNldFRpbGVzRGltZW5zaW9ucyh0cnVlLCB0aGlzLmRyYWdnZWRUaWxlKTtcblxuICAgICAgICB0aGlzLiR0aW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0aGlzLnNldEdyb3VwQ29udGFpbmVyc0hlaWdodCgpO1xuICAgICAgICB9LCAwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgb25EcmFnRW5kTGlzdGVuZXIoKSB7XG4gICAgICBpZiAoIXRoaXMuZHJhZ2dlZFRpbGUpIHJldHVybjtcbmNvbnNvbGUubG9nKCdkcmFnIGVuZCcpO1xuICAgICAgdGhpcy5kcmFnZ2VkVGlsZS5zdG9wRHJhZyhmYWxzZSk7XG4gICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKCdkcmFnLXRyYW5zZmVyJyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRDb250YWluZXJPZmZzZXQoKSB7XG4gICAgICBjb25zdCBjb250YWluZXJSZWN0ID0gdGhpcy5jb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6IGNvbnRhaW5lclJlY3QubGVmdCxcbiAgICAgICAgdG9wOiBjb250YWluZXJSZWN0LnRvcFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldEdyb3VwQ29udGFpbmVyc0hlaWdodCgpIHtcbiAgICAgIHRoaXMudGlsZUdyb3Vwcy5mb3JFYWNoKCh0aWxlR3JvdXApID0+IHtcbiAgICAgICAgdGlsZUdyb3VwLmNhbGNDb250YWluZXJIZWlnaHQoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgbW92ZVRpbGUoZnJvbSwgdG8sIHRpbGUpIHtcbiAgICAgIGxldCBlbGVtO1xuICAgICAgY29uc3QgbW92ZWRUaWxlID0gZnJvbS5yZW1vdmVUaWxlKHRpbGUpO1xuICAgICAgY29uc3QgdGlsZVNjb3BlID0gdGhpcy5jcmVhdGVUaWxlU2NvcGUodGlsZSk7XG5cbiAgICAgICQodGhpcy5ncm91cHNDb250YWluZXJzW18uZmluZEluZGV4KHRoaXMudGlsZUdyb3VwcywgZnJvbSldKVxuICAgICAgICAuZmluZChtb3ZlZFRpbGUuZ2V0RWxlbSgpKVxuICAgICAgICAucmVtb3ZlKCk7XG5cbiAgICAgIGlmICh0byAhPT0gbnVsbCkge1xuICAgICAgICB0by5hZGRUaWxlKG1vdmVkVGlsZSk7XG5cbiAgICAgICAgZWxlbSA9IHRoaXMuJGNvbXBpbGUobW92ZWRUaWxlLmdldEVsZW0oKSkodGlsZVNjb3BlKTtcbiAgICAgICAgJCh0aGlzLmdyb3Vwc0NvbnRhaW5lcnNbXy5maW5kSW5kZXgodGhpcy50aWxlR3JvdXBzLCB0byldKVxuICAgICAgICAgIC5hcHBlbmQoZWxlbSk7XG5cbiAgICAgICAgdGhpcy4kdGltZW91dCh0by5zZXRUaWxlc0RpbWVuc2lvbnMuYmluZCh0bywgdHJ1ZSkpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnVwZGF0ZVRpbGVzVGVtcGxhdGVzKCdtb3ZlVGlsZScsIHtcbiAgICAgICAgZnJvbTogZnJvbSxcbiAgICAgICAgdG86IHRvLFxuICAgICAgICB0aWxlOiBtb3ZlZFRpbGVcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBvbkRyb3BMaXN0ZW5lcihkcm9wcGVkR3JvdXBJbmRleCwgZXZlbnQpIHtcbiAgICAgIGlmICghdGhpcy5kcmFnZ2VkVGlsZSkgcmV0dXJuO1xuXG4gICAgICBjb25zdCBkcm9wcGVkR3JvdXAgPSB0aGlzLnRpbGVHcm91cHNbZHJvcHBlZEdyb3VwSW5kZXhdO1xuXG4gICAgICBpZiAodGhpcy5hY3RpdmVEcmFnZ2VkR3JvdXAgIT09IGRyb3BwZWRHcm91cCkge1xuICAgICAgICB0aGlzLm1vdmVUaWxlKHRoaXMuYWN0aXZlRHJhZ2dlZEdyb3VwLCBkcm9wcGVkR3JvdXAsIHRoaXMuZHJhZ2dlZFRpbGUpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmdyb3Vwc0NvbnRhaW5lcnNbZHJvcHBlZEdyb3VwSW5kZXhdLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5vcHRzLmFjdGl2ZURyb3B6b25lQ2xhc3MpO1xuICAgICAgJCgnYm9keScpLmNzcygnY3Vyc29yJywgJycpO1xuXG4gICAgICB0aGlzLnVwZGF0ZVRpbGVzR3JvdXBzKHRydWUpO1xuICAgICAgdGhpcy5zb3VyY2VEcm9wWm9uZUVsZW0gPSBudWxsO1xuICAgICAgdGhpcy5hY3RpdmVEcmFnZ2VkR3JvdXAgPSBudWxsO1xuICAgICAgdGhpcy5kcmFnZ2VkVGlsZSA9IG51bGw7XG4gICAgfVxuXG4gICAgcHVibGljIG9uRHJvcFRvRmljdEdyb3VwTGlzdGVuZXIoZXZlbnQpIHtcbiAgICAgIGNvbnN0IGZyb20gPSB0aGlzLmFjdGl2ZURyYWdnZWRHcm91cDtcbiAgICAgIGNvbnN0IHRpbGUgPSB0aGlzLmRyYWdnZWRUaWxlO1xuXG4gICAgICB0aGlzLmFkZEdyb3VwKHtcbiAgICAgICAgdGl0bGU6ICdOZXcgZ3JvdXAnLFxuICAgICAgICBzb3VyY2U6IFtdXG4gICAgICB9LCB0cnVlKTtcbiAgICAgIHRoaXMuJHRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLm1vdmVUaWxlKGZyb20sIHRoaXMudGlsZUdyb3Vwc1t0aGlzLnRpbGVHcm91cHMubGVuZ3RoIC0gMV0sIHRpbGUpO1xuICAgICAgICB0aGlzLnVwZGF0ZVRpbGVzR3JvdXBzKHRydWUpO1xuICAgICAgfSk7XG4gICAgICAkKCdib2R5JykuY3NzKCdjdXJzb3InLCAnJyk7XG5cbiAgICAgIHRoaXMuc291cmNlRHJvcFpvbmVFbGVtID0gbnVsbDtcbiAgICAgIHRoaXMuYWN0aXZlRHJhZ2dlZEdyb3VwID0gbnVsbDtcbiAgICAgIHRoaXMuZHJhZ2dlZFRpbGUgPSBudWxsO1xuICAgIH1cblxuICAgIHB1YmxpYyBvbkRyb3BFbnRlckxpc3RlbmVyKGdyb3VwSW5kZXgsIGV2ZW50KSB7XG4gICAgICBpZiAoIXRoaXMuc291cmNlRHJvcFpvbmVFbGVtKSB7XG4gICAgICAgIHRoaXMuc291cmNlRHJvcFpvbmVFbGVtID0gdGhpcy5ncm91cHNDb250YWluZXJzW2dyb3VwSW5kZXhdO1xuICAgICAgfVxuY29uc29sZS5sb2coJ3NvdXJjZURyb3Bab25lRWxlbScsIHRoaXMuc291cmNlRHJvcFpvbmVFbGVtKTtcbiAgICAgIGlmIChncm91cEluZGV4ICE9PSBudWxsICYmIHRoaXMuc291cmNlRHJvcFpvbmVFbGVtICE9PSB0aGlzLmdyb3Vwc0NvbnRhaW5lcnNbZ3JvdXBJbmRleF0pIHtcbiAgICAgICAgdGhpcy5ncm91cHNDb250YWluZXJzW2dyb3VwSW5kZXhdLmNsYXNzTGlzdC5hZGQoJ2Ryb3B6b25lLWFjdGl2ZScpO1xuICAgICAgICAkKCdib2R5JykuY3NzKCdjdXJzb3InLCAnY29weScpO1xuICAgICAgICB0aGlzLmlzU2FtZURyb3B6b25lID0gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkKCdib2R5JykuY3NzKCdjdXJzb3InLCAnJyk7XG4gICAgICAgIHRoaXMuaXNTYW1lRHJvcHpvbmUgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBvbkRyb3BEZWFjdGl2YXRlTGlzdGVuZXIoZ3JvdXBJbmRleCwgZXZlbnQpIHtcbiAgICAgIGlmICh0aGlzLnNvdXJjZURyb3Bab25lRWxlbSAhPT0gZXZlbnQudGFyZ2V0ICYmIGdyb3VwSW5kZXggIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5ncm91cHNDb250YWluZXJzW2dyb3VwSW5kZXhdLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5vcHRzLmFjdGl2ZURyb3B6b25lQ2xhc3MpO1xuICAgICAgICAkKCdib2R5JykuY3NzKCdjdXJzb3InLCAnJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIG9uRHJvcExlYXZlTGlzdGVuZXIoZ3JvdXBJbmRleCwgZXZlbnQpIHtcbiAgICAgIGlmIChncm91cEluZGV4ICE9PSBudWxsKSB0aGlzLmdyb3Vwc0NvbnRhaW5lcnNbZ3JvdXBJbmRleF0uY2xhc3NMaXN0LnJlbW92ZSh0aGlzLm9wdHMuYWN0aXZlRHJvcHpvbmVDbGFzcyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbml0aWFsaXplKCkge1xuICAgICAgdGhpcy4kdGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuYXZhaWxhYmxlV2lkdGggPSB0aGlzLmdldENvbnRhaW5lcldpZHRoKCk7XG4gICAgICAgIHRoaXMuYXZhaWxhYmxlQ29sdW1ucyA9IHRoaXMuZ2V0QXZhaWxhYmxlQ29sdW1ucyh0aGlzLmF2YWlsYWJsZVdpZHRoKTtcbiAgICAgICAgdGhpcy5ncm91cHNDb250YWluZXJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLm9wdHMuZ3JvdXBDb250YW5pbmVyU2VsZWN0b3IpO1xuICAgICAgICB0aGlzLnRpbGVHcm91cHMgPSB0aGlzLmluaXRUaWxlc0dyb3Vwcyh0aGlzLmdyb3VwcywgdGhpcy5vcHRzLCB0aGlzLmdyb3Vwc0NvbnRhaW5lcnMpO1xuLypcbiAgICAgICAgaW50ZXJhY3QoJy5waXAtZHJhZ2dhYmxlLXRpbGUnKVxuICAgICAgICAgIC5kcmFnZ2FibGUoe1xuICAgICAgICAgICAgaW5lcnRpYTogdHJ1ZSxcbiAgICAgICAgICAgIGF1dG9TY3JvbGw6IHtcbiAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgY29udGFpbmVyOiAkKCcjY29udGVudCcpLmdldCgwKSxcbiAgICAgICAgICAgICAgc3BlZWQ6IDEwMDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbnN0YXJ0OiAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5vbkRyYWdTdGFydExpc3RlbmVyKGV2ZW50KVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9ubW92ZTogKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMub25EcmFnTW92ZUxpc3RlbmVyKGV2ZW50KVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uZW5kOiAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5vbkRyYWdFbmRMaXN0ZW5lcigpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgaW50ZXJhY3QoJy5waXAtZHJhZ2dhYmxlLWdyb3VwLmZpY3QtZ3JvdXAnKVxuICAgICAgICAgIC5kcm9wem9uZSh7XG4gICAgICAgICAgICBvbmRyb3A6IChldmVudCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLm9uRHJvcFRvRmljdEdyb3VwTGlzdGVuZXIoZXZlbnQpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25kcmFnZW50ZXI6IChldmVudCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLm9uRHJvcEVudGVyTGlzdGVuZXIoZXZlbnQpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25kcm9wZGVhY3RpdmF0ZTogKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMub25Ecm9wRGVhY3RpdmF0ZUxpc3RlbmVyKGV2ZW50KVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uZHJhZ2xlYXZlOiAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5vbkRyb3BMZWF2ZUxpc3RlbmVyKGV2ZW50KVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGludGVyYWN0KCcucGlwLWRyYWdnYWJsZS1ncm91cCcpXG4gICAgICAgICAgLmRyb3B6b25lKHtcbiAgICAgICAgICAgIG9uZHJvcDogKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMub25Ecm9wTGlzdGVuZXIoZXZlbnQpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25kcmFnZW50ZXI6IChldmVudCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLm9uRHJvcEVudGVyTGlzdGVuZXIoZXZlbnQpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25kcm9wZGVhY3RpdmF0ZTogKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMub25Ecm9wRGVhY3RpdmF0ZUxpc3RlbmVyKGV2ZW50KVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uZHJhZ2xlYXZlOiAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5vbkRyb3BMZWF2ZUxpc3RlbmVyKGV2ZW50KVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgKi9cbiAgICAgIH0sIDApO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IERyYWdDb21wb25lbnQ6IG5nLklDb21wb25lbnRPcHRpb25zID0ge1xuICAgIGJpbmRpbmdzOiB7XG4gICAgICB0aWxlc1RlbXBsYXRlczogJz1waXBUaWxlc1RlbXBsYXRlcycsXG4gICAgICB0aWxlc0NvbnRleHQ6ICc9cGlwVGlsZXNDb250ZXh0JyxcbiAgICAgIG9wdGlvbnM6ICc9cGlwRHJhZ2dhYmxlR3JpZCcsXG4gICAgICBncm91cE1lbnVBY3Rpb25zOiAnPXBpcEdyb3VwTWVudUFjdGlvbnMnXG4gICAgfSxcbiAgICAvL2NvbnRyb2xsZXJBczogJ0RyYWdnZWRDdHJsJyxcbiAgICB0ZW1wbGF0ZVVybDogJ2RyYWdnYWJsZS9EcmFnZ2FibGUuaHRtbCcsXG4gICAgY29udHJvbGxlcjogRHJhZ2dhYmxlQ29udHJvbGxlclxuICB9XG5cbiAgYW5ndWxhci5tb2R1bGUoJ3BpcERyYWdnYWJsZVRpbGVzJylcbiAgICAuY29tcG9uZW50KCdwaXBEcmFnZ2FibGVHcmlkJywgRHJhZ0NvbXBvbmVudCk7XG59IiwiZXhwb3J0IGludGVyZmFjZSBEcmFnVGlsZUNvbnN0cnVjdG9yIHtcbiAgbmV3IChvcHRpb25zOiBhbnkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gSURyYWdUaWxlQ29uc3RydWN0b3IoY29uc3RydWN0b3I6IERyYWdUaWxlQ29uc3RydWN0b3IsIG9wdGlvbnM6IGFueSk6IElEcmFnVGlsZVNlcnZpY2Uge1xuICByZXR1cm4gbmV3IGNvbnN0cnVjdG9yKG9wdGlvbnMpO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElEcmFnVGlsZVNlcnZpY2Uge1xuICB0cGw6IGFueTtcbiAgb3B0czogYW55O1xuICBzaXplOiBhbnk7XG4gIGVsZW06IGFueTtcbiAgcHJldmlldzogYW55O1xuICBnZXRTaXplKCk6IGFueTtcbiAgc2V0U2l6ZSh3aWR0aCwgaGVpZ2h0KTogYW55O1xuICBzZXRQb3NpdGlvbihsZWZ0LCB0b3ApOiBhbnk7XG4gIGdldENvbXBpbGVkVGVtcGxhdGUoKTogYW55O1xuICB1cGRhdGVFbGVtKHBhcmVudCk6IGFueTtcbiAgZ2V0RWxlbSgpOiBhbnk7XG4gIHN0YXJ0RHJhZygpOiBhbnk7XG4gIHN0b3BEcmFnKGlzQW5pbWF0ZSk6IGFueTtcbiAgc2V0UHJldmlld1Bvc2l0aW9uKGNvb3Jkcyk6IHZvaWQ7XG4gIGdldE9wdGlvbnMoKTogYW55O1xuICBzZXRPcHRpb25zKG9wdGlvbnMpOiBhbnk7XG59XG5cbmxldCBERUZBVUxUX1RJTEVfU0laRSA9IHtcbiAgY29sU3BhbjogMSxcbiAgcm93U3BhbjogMVxufTtcblxuZXhwb3J0IGNsYXNzIERyYWdUaWxlU2VydmljZSBpbXBsZW1lbnRzIElEcmFnVGlsZVNlcnZpY2Uge1xuICBwdWJsaWMgdHBsOiBhbnk7XG4gIHB1YmxpYyBvcHRzOiBhbnk7XG4gIHB1YmxpYyBzaXplOiBhbnk7XG4gIHB1YmxpYyBlbGVtOiBhbnk7XG4gIHB1YmxpYyBwcmV2aWV3OiBhbnk7XG5cbiAgY29uc3RydWN0b3IgKG9wdGlvbnM6IGFueSkge1xuICAgIHRoaXMudHBsID0gb3B0aW9ucy50cGwuZ2V0KDApO1xuICAgIHRoaXMub3B0cyA9IG9wdGlvbnM7XG4gICAgdGhpcy5zaXplID0gXy5tZXJnZSh7fSwgREVGQVVMVF9USUxFX1NJWkUsIG9wdGlvbnMuc2l6ZSk7XG4gICAgdGhpcy5lbGVtID0gbnVsbDtcbiAgfVxuXG4gIHB1YmxpYyBnZXRTaXplKCk6IGFueSB7XG4gICAgcmV0dXJuIHRoaXMuc2l6ZTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRTaXplKHdpZHRoLCBoZWlnaHQpOiBhbnkge1xuICAgIHRoaXMuc2l6ZS53aWR0aCA9IHdpZHRoO1xuICAgIHRoaXMuc2l6ZS5oZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICBpZiAodGhpcy5lbGVtKSB7XG4gICAgICB0aGlzLmVsZW0uY3NzKHtcbiAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICBoZWlnaHQ6IGhlaWdodFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBwdWJsaWMgc2V0UG9zaXRpb24obGVmdCwgdG9wKTogYW55IHtcbiAgICB0aGlzLnNpemUubGVmdCA9IGxlZnQ7XG4gICAgdGhpcy5zaXplLnRvcCA9IHRvcDtcblxuICAgIGlmICh0aGlzLmVsZW0pIHtcbiAgICAgIHRoaXMuZWxlbS5jc3Moe1xuICAgICAgICBsZWZ0OiBsZWZ0LFxuICAgICAgICB0b3A6IHRvcFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBwdWJsaWMgZ2V0Q29tcGlsZWRUZW1wbGF0ZSgpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLnRwbDtcbiAgfTtcblxuICBwdWJsaWMgdXBkYXRlRWxlbShwYXJlbnQpOiBhbnkge1xuICAgIHRoaXMuZWxlbSA9ICQodGhpcy50cGwpLnBhcmVudChwYXJlbnQpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgcHVibGljIGdldEVsZW0oKTogYW55IHtcbiAgICByZXR1cm4gdGhpcy5lbGVtLmdldCgwKTtcbiAgfTtcblxuICBwdWJsaWMgc3RhcnREcmFnKCk6IGFueSB7XG4gICAgdGhpcy5wcmV2aWV3ID0gJCgnPGRpdj4nKVxuICAgICAgLmFkZENsYXNzKCdwaXAtZHJhZ2dlZC1wcmV2aWV3JylcbiAgICAgIC5jc3Moe1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgbGVmdDogdGhpcy5lbGVtLmNzcygnbGVmdCcpLFxuICAgICAgICB0b3A6IHRoaXMuZWxlbS5jc3MoJ3RvcCcpLFxuICAgICAgICB3aWR0aDogdGhpcy5lbGVtLmNzcygnd2lkdGgnKSxcbiAgICAgICAgaGVpZ2h0OiB0aGlzLmVsZW0uY3NzKCdoZWlnaHQnKVxuICAgICAgfSk7XG5cbiAgICB0aGlzLmVsZW1cbiAgICAgIC5hZGRDbGFzcygnbm8tYW5pbWF0aW9uJylcbiAgICAgIC5jc3Moe1xuICAgICAgICB6SW5kZXg6ICc5OTk5J1xuICAgICAgfSlcbiAgICAgIC5hZnRlcih0aGlzLnByZXZpZXcpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgcHVibGljIHN0b3BEcmFnKGlzQW5pbWF0ZSk6IGFueSB7XG4gICAgaWYgKCF0aGlzLnByZXZpZXcpIHJldHVybjtcbiAgICBsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICBpZiAoaXNBbmltYXRlKSB7XG4gICAgICBzZWxmLmVsZW1cbiAgICAgICAgLnJlbW92ZUNsYXNzKCduby1hbmltYXRpb24nKVxuICAgICAgICAuY3NzKHtcbiAgICAgICAgICBsZWZ0OiBzZWxmLnByZXZpZXcuY3NzKCdsZWZ0JyksXG4gICAgICAgICAgdG9wOiBzZWxmLnByZXZpZXcuY3NzKCd0b3AnKVxuICAgICAgICB9KVxuICAgICAgICAub24oJ3RyYW5zaXRpb25lbmQnLCAoKSA9PiB7IG9uVHJhbnNpdGlvbkVuZCgpOyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZi5lbGVtXG4gICAgICAgIC5jc3Moe1xuICAgICAgICAgIGxlZnQ6IHNlbGYucHJldmlldy5jc3MoJ2xlZnQnKSxcbiAgICAgICAgICB0b3A6IHNlbGYucHJldmlldy5jc3MoJ3RvcCcpLFxuICAgICAgICAgIHpJbmRleDogJydcbiAgICAgICAgfSlcbiAgICAgICAgLnJlbW92ZUNsYXNzKCduby1hbmltYXRpb24nKTtcblxuICAgICAgc2VsZi5wcmV2aWV3LnJlbW92ZSgpO1xuICAgICAgc2VsZi5wcmV2aWV3ID0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcblxuICAgIGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZCgpIHtcbiAgICAgIGlmIChzZWxmLnByZXZpZXcpIHtcbiAgICAgICAgc2VsZi5wcmV2aWV3LnJlbW92ZSgpO1xuICAgICAgICBzZWxmLnByZXZpZXcgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXNlbGYuZWxlbSkgcmV0dXJuO1xuXG4gICAgICBzZWxmLmVsZW1cbiAgICAgICAgLmNzcygnekluZGV4JywgJycpXG4gICAgICAgIC5vZmYoJ3RyYW5zaXRpb25lbmQnLCBvblRyYW5zaXRpb25FbmQpO1xuICAgIH1cbiAgfTtcblxuICBwdWJsaWMgc2V0UHJldmlld1Bvc2l0aW9uKGNvb3Jkcykge1xuICAgIHRoaXMucHJldmlldy5jc3MoY29vcmRzKTtcbiAgfTtcblxuICBwdWJsaWMgZ2V0T3B0aW9ucygpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLm9wdHMub3B0aW9ucztcbiAgfTtcblxuICBwdWJsaWMgc2V0T3B0aW9ucyhvcHRpb25zKTogYW55IHtcbiAgICBfLm1lcmdlKHRoaXMub3B0cy5vcHRpb25zLCBvcHRpb25zKTtcbiAgICBfLm1lcmdlKHRoaXMuc2l6ZSwgb3B0aW9ucy5zaXplKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xufVxuXG5hbmd1bGFyXG4gIC5tb2R1bGUoJ3BpcERyYWdnYWJsZVRpbGVzJylcbiAgLnNlcnZpY2UoJ3BpcERyYWdUaWxlJywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgbGV0IG5ld1RpbGUgPSBuZXcgRHJhZ1RpbGVTZXJ2aWNlKG9wdGlvbnMpO1xuXG4gICAgICByZXR1cm4gbmV3VGlsZTtcbiAgICB9XG4gIH0pOyIsImFuZ3VsYXIubW9kdWxlKCdwaXBEcmFnZ2FibGVUaWxlcycsIFtdKTtcblxuaW1wb3J0ICcuL0RyYWdnYWJsZVRpbGVTZXJ2aWNlJztcbmltcG9ydCAnLi9EcmFnZ2FibGUnOyIsImltcG9ydCB7XG4gIERhc2hib2FyZFRpbGVcbn0gZnJvbSAnLi4vY29tbW9uX3RpbGUvRGFzaGJvYXJkVGlsZSc7XG5pbXBvcnQge1xuICBJVGlsZUNvbmZpZ1NlcnZpY2Vcbn0gZnJvbSAnLi4vY29uZmlnX3RpbGVfZGlhbG9nL0NvbmZpZ0RpYWxvZ1NlcnZpY2UnO1xuaW1wb3J0IHsgSURhc2hib2FyZFByb3ZpZGVyLCBJRGFzaGJvYXJkVGlsZVR5cGVPcHRpb25zIH0gZnJvbSAnLi4vdXRpbGl0eS9JRGFzaGJvYXJkU2VydmljZSc7XG57XG4gIGNsYXNzIEV2ZW50VGlsZUNvbnRyb2xsZXIgZXh0ZW5kcyBEYXNoYm9hcmRUaWxlIHtcbiAgICBwcml2YXRlIF9vbGRPcGFjaXR5OiBudW1iZXI7XG5cbiAgICBwdWJsaWMgb3BhY2l0eTogbnVtYmVyID0gMC41NztcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgJHNjb3BlOiBuZy5JU2NvcGUsXG4gICAgICBwcml2YXRlICRlbGVtZW50OiBKUXVlcnksXG4gICAgICBwcml2YXRlICR0aW1lb3V0OiBhbmd1bGFyLklUaW1lb3V0U2VydmljZSxcbiAgICAgIHByaXZhdGUgcGlwVGlsZUNvbmZpZ0RpYWxvZ1NlcnZpY2U6IElUaWxlQ29uZmlnU2VydmljZVxuICAgICkge1xuICAgICAgc3VwZXIoKTtcbiAgICAgIHRoaXMub3B0aW9ucy5tZW51LnB1c2goe1xuICAgICAgICB0aXRsZTogJ0NvbmZpZ3VyYXRlJyxcbiAgICAgICAgYWN0aW9uOiAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5vbkNvbmZpZ0NsaWNrKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdGhpcy5jb2xvciA9IHRoaXMub3B0aW9ucy5jb2xvciB8fCAnZ3JheSc7XG4gICAgICB0aGlzLm9wYWNpdHkgPSB0aGlzLm9wdGlvbnMub3BhY2l0eSB8fCB0aGlzLm9wYWNpdHk7XG5cbiAgICAgIHRoaXMuZHJhd0ltYWdlKCk7XG5cbiAgICAgIC8vIFRPRE8gaXQgZG9lc24ndCB3b3JrXG4gICAgICAkc2NvcGUuJHdhdGNoKCgpID0+IHtcbiAgICAgICAgcmV0dXJuICRlbGVtZW50LmlzKCc6dmlzaWJsZScpO1xuICAgICAgfSwgKG5ld1ZhbCkgPT4ge1xuICAgICAgICB0aGlzLmRyYXdJbWFnZSgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBkcmF3SW1hZ2UoKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmltYWdlKSB7XG4gICAgICAgIHRoaXMuJHRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRoaXMub25JbWFnZUxvYWQodGhpcy4kZWxlbWVudC5maW5kKCdpbWcnKSk7XG4gICAgICAgIH0sIDUwMCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbkNvbmZpZ0NsaWNrKCkge1xuICAgICAgdGhpcy5fb2xkT3BhY2l0eSA9IF8uY2xvbmUodGhpcy5vcGFjaXR5KTtcbiAgICAgIHRoaXMucGlwVGlsZUNvbmZpZ0RpYWxvZ1NlcnZpY2Uuc2hvdyh7XG4gICAgICAgIGRpYWxvZ0NsYXNzOiAncGlwLWNhbGVuZGFyLWNvbmZpZycsXG4gICAgICAgIGxvY2Fsczoge1xuICAgICAgICAgIGNvbG9yOiB0aGlzLmNvbG9yLFxuICAgICAgICAgIHNpemU6IHRoaXMub3B0aW9ucy5zaXplIHx8IHtcbiAgICAgICAgICAgIGNvbFNwYW46IDEsXG4gICAgICAgICAgICByb3dTcGFuOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBkYXRlOiB0aGlzLm9wdGlvbnMuZGF0ZSxcbiAgICAgICAgICB0aXRsZTogdGhpcy5vcHRpb25zLnRpdGxlLFxuICAgICAgICAgIHRleHQ6IHRoaXMub3B0aW9ucy50ZXh0LFxuICAgICAgICAgIG9wYWNpdHk6IHRoaXMub3BhY2l0eSxcbiAgICAgICAgICBvbk9wYWNpdHl0ZXN0OiAob3BhY2l0eSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vcGFjaXR5ID0gb3BhY2l0eTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGV4dGVuc2lvblVybDogJ2V2ZW50X3RpbGUvQ29uZmlnRGlhbG9nRXh0ZW5zaW9uLmh0bWwnXG4gICAgICB9LCAocmVzdWx0OiBhbnkpID0+IHtcbiAgICAgICAgdGhpcy5jaGFuZ2VTaXplKHJlc3VsdC5zaXplKTtcblxuICAgICAgICB0aGlzLmNvbG9yID0gcmVzdWx0LmNvbG9yO1xuICAgICAgICB0aGlzLm9wdGlvbnMuY29sb3IgPSByZXN1bHQuY29sb3I7XG4gICAgICAgIHRoaXMub3B0aW9ucy5kYXRlID0gcmVzdWx0LmRhdGU7XG4gICAgICAgIHRoaXMub3B0aW9ucy50aXRsZSA9IHJlc3VsdC50aXRsZTtcbiAgICAgICAgdGhpcy5vcHRpb25zLnRleHQgPSByZXN1bHQudGV4dDtcbiAgICAgICAgdGhpcy5vcHRpb25zLm9wYWNpdHkgPSByZXN1bHQub3BhY2l0eTtcbiAgICAgIH0sICgpID0+IHtcbiAgICAgICAgdGhpcy5vcGFjaXR5ID0gdGhpcy5fb2xkT3BhY2l0eTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgb25JbWFnZUxvYWQoaW1hZ2UpIHtcbiAgICAgIHRoaXMuc2V0SW1hZ2VNYXJnaW5DU1ModGhpcy4kZWxlbWVudC5wYXJlbnQoKSwgaW1hZ2UpO1xuICAgIH1cblxuICAgIHB1YmxpYyBjaGFuZ2VTaXplKHBhcmFtcykge1xuICAgICAgdGhpcy5vcHRpb25zLnNpemUuY29sU3BhbiA9IHBhcmFtcy5zaXplWDtcbiAgICAgIHRoaXMub3B0aW9ucy5zaXplLnJvd1NwYW4gPSBwYXJhbXMuc2l6ZVk7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuaW1hZ2UpIHtcbiAgICAgICAgdGhpcy4kdGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5zZXRJbWFnZU1hcmdpbkNTUyh0aGlzLiRlbGVtZW50LnBhcmVudCgpLCB0aGlzLiRlbGVtZW50LmZpbmQoJ2ltZycpKTtcbiAgICAgICAgfSwgNTAwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBMYXRlciByZXBsYWNlIGJ5IHBpcEltYWdlVXRpbHMgc2V2aWNlJ3MgZnVuY3Rpb25cbiAgICBwcml2YXRlIHNldEltYWdlTWFyZ2luQ1NTKCRlbGVtZW50LCBpbWFnZSkge1xuICAgICAgbGV0XG4gICAgICAgIGNvbnRhaW5lcldpZHRoID0gJGVsZW1lbnQud2lkdGggPyAkZWxlbWVudC53aWR0aCgpIDogJGVsZW1lbnQuY2xpZW50V2lkdGgsIC8vIHx8IDgwLFxuICAgICAgICBjb250YWluZXJIZWlnaHQgPSAkZWxlbWVudC5oZWlnaHQgPyAkZWxlbWVudC5oZWlnaHQoKSA6ICRlbGVtZW50LmNsaWVudEhlaWdodCwgLy8gfHwgODAsXG4gICAgICAgIGltYWdlV2lkdGggPSBpbWFnZVswXS5uYXR1cmFsV2lkdGggfHwgaW1hZ2Uud2lkdGgsXG4gICAgICAgIGltYWdlSGVpZ2h0ID0gaW1hZ2VbMF0ubmF0dXJhbEhlaWdodCB8fCBpbWFnZS5oZWlnaHQsXG4gICAgICAgIG1hcmdpbiA9IDAsXG4gICAgICAgIGNzc1BhcmFtcyA9IHt9O1xuXG4gICAgICBpZiAoKGltYWdlV2lkdGggLyBjb250YWluZXJXaWR0aCkgPiAoaW1hZ2VIZWlnaHQgLyBjb250YWluZXJIZWlnaHQpKSB7XG4gICAgICAgIG1hcmdpbiA9IC0oKGltYWdlV2lkdGggLyBpbWFnZUhlaWdodCAqIGNvbnRhaW5lckhlaWdodCAtIGNvbnRhaW5lcldpZHRoKSAvIDIpO1xuICAgICAgICBjc3NQYXJhbXNbJ21hcmdpbi1sZWZ0J10gPSAnJyArIG1hcmdpbiArICdweCc7XG4gICAgICAgIGNzc1BhcmFtc1snaGVpZ2h0J10gPSAnJyArIGNvbnRhaW5lckhlaWdodCArICdweCc7IC8vJzEwMCUnO1xuICAgICAgICBjc3NQYXJhbXNbJ3dpZHRoJ10gPSAnJyArIGltYWdlV2lkdGggKiBjb250YWluZXJIZWlnaHQgLyBpbWFnZUhlaWdodCArICdweCc7IC8vJzEwMCUnO1xuICAgICAgICBjc3NQYXJhbXNbJ21hcmdpbi10b3AnXSA9ICcnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWFyZ2luID0gLSgoaW1hZ2VIZWlnaHQgLyBpbWFnZVdpZHRoICogY29udGFpbmVyV2lkdGggLSBjb250YWluZXJIZWlnaHQpIC8gMik7XG4gICAgICAgIGNzc1BhcmFtc1snbWFyZ2luLXRvcCddID0gJycgKyBtYXJnaW4gKyAncHgnO1xuICAgICAgICBjc3NQYXJhbXNbJ2hlaWdodCddID0gJycgKyBpbWFnZUhlaWdodCAqIGNvbnRhaW5lcldpZHRoIC8gaW1hZ2VXaWR0aCArICdweCc7IC8vJzEwMCUnO1xuICAgICAgICBjc3NQYXJhbXNbJ3dpZHRoJ10gPSAnJyArIGNvbnRhaW5lcldpZHRoICsgJ3B4JzsgLy8nMTAwJSc7XG4gICAgICAgIGNzc1BhcmFtc1snbWFyZ2luLWxlZnQnXSA9ICcnO1xuICAgICAgfVxuXG4gICAgICBpbWFnZS5jc3MoY3NzUGFyYW1zKTtcbiAgICB9XG4gIH1cblxuXG4gIGNvbnN0IEV2ZW50VGlsZTogSURhc2hib2FyZFRpbGVUeXBlT3B0aW9ucyA9IHtcbiAgICBuYW1lOiAnZXZlbnQnLFxuICAgIGNvbnRyb2xsZXJBczogJyRjdHJsJyxcbiAgICBjbGFzczogJ3BpcC1ldmVudC10aWxlJyxcbiAgICBjb250cm9sbGVyOiBFdmVudFRpbGVDb250cm9sbGVyLFxuICAgIHRlbXBsYXRlVXJsOiAnZXZlbnRfdGlsZS9FdmVudFRpbGUuaHRtbCdcbiAgfVxuXG4gIGNvbnN0IGNvbmZpZyA9IGZ1bmN0aW9uKHBpcERhc2hib2FyZFByb3ZpZGVyOiBJRGFzaGJvYXJkUHJvdmlkZXIpIHtcbiAgICBwaXBEYXNoYm9hcmRQcm92aWRlci5yZWdpc3RlclRpbGVUeXBlKEV2ZW50VGlsZSk7XG4gIH1cblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgncGlwRGFzaGJvYXJkJylcbiAgICAuY29uZmlnKGNvbmZpZyk7XG59IiwiLy8gSW1wb3J0IHNlcnZpY2VzXG5pbXBvcnQgJy4vdGlsZV9ncm91cC9pbmRleCc7XG5pbXBvcnQgJy4vZHJhZ2dhYmxlJztcblxuLy8gSW1wb3J0IHRpbGUgc2VydmljZXNcbmltcG9ydCAnLi9tZW51X3RpbGUnO1xuXG4vLyBJbXBvcnQgZGlhbG9nc1xuaW1wb3J0ICcuL2FkZF90aWxlX2RpYWxvZyc7XG5pbXBvcnQgJy4vY29uZmlnX3RpbGVfZGlhbG9nJztcblxuYW5ndWxhci5tb2R1bGUoJ3BpcERhc2hib2FyZCcsIFtcbiAgLy8gU2VydmljZXNcbiAgJ3BpcERyYWdnYWJsZVRpbGVzJyxcbiAgJ3BpcERyYWdnYWJsZVRpbGVzR3JvdXAnLFxuICAvLyBUaWxlIHNlcnZpY2VzXG4gICdwaXBNZW51VGlsZScsXG4gIC8vIERpYWxvZ3NcbiAgJ3BpcENvbmZpZ0Rhc2hib2FyZFRpbGVEaWFsb2cnLFxuICAncGlwQWRkRGFzaGJvYXJkVGlsZURpYWxvZycsXG4gIC8vVGVtcGxhdGVzXG4gICdwaXBEYXNoYm9hcmQuVGVtcGxhdGVzJyxcbiAgLy8gRXh0ZXJuYWwgcGlwIG1vZHVsZXNcbiAgJ3BpcExheW91dCcsXG4gICdwaXBMb2NhdGlvbnMnLFxuICAncGlwRGF0ZScsXG4gICdwaXBDaGFydHMnLFxuICAncGlwVHJhbnNsYXRlJyxcbiAgJ3BpcENvbnRyb2xzJyxcbiAgJ3BpcEJ1dHRvbnMnLFxuICAncGlwQmVoYXZpb3JzJ1xuXSk7XG5cblxuLy8gSW1wb3J0IHV0aWxpdHkgXG5pbXBvcnQgJy4vdXRpbGl0eS9UaWxlVGVtcGxhdGVVdGlsaXR5JztcbmltcG9ydCAnLi91dGlsaXR5L0Rhc2hib2FyZFNlcnZpY2UnO1xuLy8gSW1wb3J0IHRpbGVzXG5pbXBvcnQgJy4vY29tbW9uX3RpbGUvRGFzaGJvYXJkVGlsZSc7XG5pbXBvcnQgJy4vY29tbW9uX3RpbGUvRHluYW1pY1RpbGUnO1xuaW1wb3J0ICcuL2V2ZW50X3RpbGUvRXZlbnRUaWxlJztcbmltcG9ydCAnLi9ub3RlX3RpbGUvTm90ZVRpbGUnO1xuaW1wb3J0ICcuL3BpY3R1cmVfc2xpZGVyX3RpbGUvUGljdHVyZVNsaWRlclRpbGUnO1xuaW1wb3J0ICcuL3Bvc2l0aW9uX3RpbGUvUG9zaXRpb25UaWxlJztcbmltcG9ydCAnLi9zdGF0aXN0aWNzX3RpbGUvU3RhdGlzdGljc1RpbGUnO1xuLy8gSW1wb3J0IGNvbW1vbiBjb21wb25lbnRcbmltcG9ydCAnLi9kYXNoYm9hcmQvRGFzaGJvYXJkJztcbiIsIntcbiAgY29uc3QgVGlsZU1lbnU6IG5nLklDb21wb25lbnRPcHRpb25zID0ge1xuICAgIHRlbXBsYXRlVXJsOiAnbWVudV90aWxlL01lbnVUaWxlLmh0bWwnLFxuICAgIGJpbmRpbmdzOiB7XG4gICAgICBtZW51OiAnPHBpcE1lbnUnXG4gICAgfVxuICB9O1xuXG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdwaXBNZW51VGlsZScpXG4gICAgLmNvbXBvbmVudCgncGlwVGlsZU1lbnUnLCBUaWxlTWVudSk7XG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ3BpcE1lbnVUaWxlJywgW10pO1xuXG5pbXBvcnQgJy4vTWVudVRpbGVEaXJlY3RpdmUnOyIsImltcG9ydCB7XG4gIERhc2hib2FyZFRpbGVcbn0gZnJvbSAnLi4vY29tbW9uX3RpbGUvRGFzaGJvYXJkVGlsZSc7XG5pbXBvcnQge1xuICBJVGlsZUNvbmZpZ1NlcnZpY2Vcbn0gZnJvbSAnLi4vY29uZmlnX3RpbGVfZGlhbG9nL0NvbmZpZ0RpYWxvZ1NlcnZpY2UnO1xuaW1wb3J0IHsgSURhc2hib2FyZFByb3ZpZGVyLCBJRGFzaGJvYXJkVGlsZVR5cGVPcHRpb25zIH0gZnJvbSAnLi4vdXRpbGl0eS9JRGFzaGJvYXJkU2VydmljZSc7XG57XG4gIGNsYXNzIE5vdGVUaWxlQ29udHJvbGxlciBleHRlbmRzIERhc2hib2FyZFRpbGUge1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICBwcml2YXRlIHBpcFRpbGVDb25maWdEaWFsb2dTZXJ2aWNlOiBJVGlsZUNvbmZpZ1NlcnZpY2UsXG4gICAgICAkc2NvcGVcbiAgICApIHtcbiAgICAgIHN1cGVyKCk7XG5cbiAgICAgIHRoaXMub3B0aW9ucy5tZW51LnB1c2goe1xuICAgICAgICB0aXRsZTogJ0NvbmZpZ3VyYXRlJyxcbiAgICAgICAgYWN0aW9uOiAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5vbkNvbmZpZ0NsaWNrKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdGhpcy5jb2xvciA9IHRoaXMub3B0aW9ucy5jb2xvciB8fCAnb3JhbmdlJztcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uQ29uZmlnQ2xpY2soKSB7XG4gICAgICB0aGlzLnBpcFRpbGVDb25maWdEaWFsb2dTZXJ2aWNlLnNob3coe1xuICAgICAgICBsb2NhbHM6IHtcbiAgICAgICAgICBjb2xvcjogdGhpcy5jb2xvcixcbiAgICAgICAgICBzaXplOiB0aGlzLm9wdGlvbnMuc2l6ZSxcbiAgICAgICAgICB0aXRsZTogdGhpcy5vcHRpb25zLnRpdGxlLFxuICAgICAgICAgIHRleHQ6IHRoaXMub3B0aW9ucy50ZXh0LFxuICAgICAgICB9LFxuICAgICAgICBleHRlbnNpb25Vcmw6ICdub3RlX3RpbGUvQ29uZmlnRGlhbG9nRXh0ZW5zaW9uLmh0bWwnXG4gICAgICB9LCAocmVzdWx0OiBhbnkpID0+IHtcbiAgICAgICAgdGhpcy5jb2xvciA9IHJlc3VsdC5jb2xvcjtcbiAgICAgICAgdGhpcy5vcHRpb25zLmNvbG9yID0gcmVzdWx0LmNvbG9yO1xuICAgICAgICB0aGlzLmNoYW5nZVNpemUocmVzdWx0LnNpemUpO1xuICAgICAgICB0aGlzLm9wdGlvbnMudGV4dCA9IHJlc3VsdC50ZXh0O1xuICAgICAgICB0aGlzLm9wdGlvbnMudGl0bGUgPSByZXN1bHQudGl0bGU7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBOb3RlVGlsZTogSURhc2hib2FyZFRpbGVUeXBlT3B0aW9ucyA9IHtcbiAgICBuYW1lOiAnbm90ZScsXG4gICAgY29udHJvbGxlcjogTm90ZVRpbGVDb250cm9sbGVyLFxuICAgIGNvbnRyb2xsZXJBczogJyRjdHJsJyxcbiAgICBjbGFzczogJ3BpcC1ub3Rlcy10aWxlJyxcbiAgICB0ZW1wbGF0ZVVybDogJ25vdGVfdGlsZS9Ob3RlVGlsZS5odG1sJ1xuICB9XG5cbiAgY29uc3QgY29uZmlnID0gZnVuY3Rpb24ocGlwRGFzaGJvYXJkUHJvdmlkZXI6IElEYXNoYm9hcmRQcm92aWRlcikge1xuICAgIHBpcERhc2hib2FyZFByb3ZpZGVyLnJlZ2lzdGVyVGlsZVR5cGUoTm90ZVRpbGUpO1xuICB9XG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ3BpcERhc2hib2FyZCcpXG4gICAgLmNvbmZpZyhjb25maWcpO1xufSIsImltcG9ydCB7XG4gIERhc2hib2FyZFRpbGVcbn0gZnJvbSAnLi4vY29tbW9uX3RpbGUvRGFzaGJvYXJkVGlsZSc7XG5pbXBvcnQge1xuICBJVGlsZUNvbmZpZ1NlcnZpY2Vcbn0gZnJvbSAnLi4vY29uZmlnX3RpbGVfZGlhbG9nL0NvbmZpZ0RpYWxvZ1NlcnZpY2UnO1xuaW1wb3J0IHtcbiAgSVRpbGVUZW1wbGF0ZVNlcnZpY2Vcbn0gZnJvbSAnLi4vdXRpbGl0eS9UaWxlVGVtcGxhdGVVdGlsaXR5JztcblxuaW1wb3J0IHsgSURhc2hib2FyZFByb3ZpZGVyLCBJRGFzaGJvYXJkVGlsZVR5cGVPcHRpb25zIH0gZnJvbSAnLi4vdXRpbGl0eS9JRGFzaGJvYXJkU2VydmljZSc7XG5cbntcbiAgY2xhc3MgUGljdHVyZVNsaWRlckNvbnRyb2xsZXIgZXh0ZW5kcyBEYXNoYm9hcmRUaWxlIHtcbiAgICBwdWJsaWMgYW5pbWF0aW9uVHlwZTogc3RyaW5nID0gJ2ZhZGluZyc7XG4gICAgcHVibGljIGFuaW1hdGlvbkludGVydmFsOiBudW1iZXIgPSA1MDAwO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICBwcml2YXRlICRzY29wZTogYW5ndWxhci5JU2NvcGUsXG4gICAgICBwcml2YXRlICRlbGVtZW50OiBhbnksXG4gICAgICBwcml2YXRlICR0aW1lb3V0OiBhbmd1bGFyLklUaW1lb3V0U2VydmljZSxcbiAgICAgIHByaXZhdGUgcGlwVGlsZVRlbXBsYXRlOiBJVGlsZVRlbXBsYXRlU2VydmljZVxuICAgICkge1xuICAgICAgc3VwZXIoKTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucykge1xuICAgICAgICB0aGlzLmFuaW1hdGlvblR5cGUgPSB0aGlzLm9wdGlvbnMuYW5pbWF0aW9uVHlwZSB8fCB0aGlzLmFuaW1hdGlvblR5cGU7XG4gICAgICAgIHRoaXMuYW5pbWF0aW9uSW50ZXJ2YWwgPSB0aGlzLm9wdGlvbnMuYW5pbWF0aW9uSW50ZXJ2YWwgfHwgdGhpcy5hbmltYXRpb25JbnRlcnZhbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgb25JbWFnZUxvYWQoJGV2ZW50KSB7XG4gICAgICB0aGlzLiR0aW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5waXBUaWxlVGVtcGxhdGUuc2V0SW1hZ2VNYXJnaW5DU1ModGhpcy4kZWxlbWVudC5wYXJlbnQoKSwgJGV2ZW50LnRhcmdldCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY2hhbmdlU2l6ZShwYXJhbXMpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5zaXplLmNvbFNwYW4gPSBwYXJhbXMuc2l6ZVg7XG4gICAgICB0aGlzLm9wdGlvbnMuc2l6ZS5yb3dTcGFuID0gcGFyYW1zLnNpemVZO1xuXG4gICAgICB0aGlzLiR0aW1lb3V0KCgpID0+IHtcbiAgICAgICAgXy5lYWNoKHRoaXMuJGVsZW1lbnQuZmluZCgnaW1nJyksIChpbWFnZSkgPT4ge1xuICAgICAgICAgIHRoaXMucGlwVGlsZVRlbXBsYXRlLnNldEltYWdlTWFyZ2luQ1NTKHRoaXMuJGVsZW1lbnQucGFyZW50KCksIGltYWdlKTtcbiAgICAgICAgfSk7XG4gICAgICB9LCA1MDApO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IFBpY3R1cmVTbGlkZXJUaWxlOklEYXNoYm9hcmRUaWxlVHlwZU9wdGlvbnMgPSB7XG4gICAgbmFtZTogJ3BpY3R1cmUtc2xpZGVyJyxcbiAgICBjb250cm9sbGVyOiBQaWN0dXJlU2xpZGVyQ29udHJvbGxlcixcbiAgICBjb250cm9sbGVyQXM6ICckY3RybCcsXG4gICAgY2xhc3M6ICdwaXAtcGljdHVyZS1zbGlkZXItdGlsZScsXG4gICAgdGVtcGxhdGVVcmw6ICdwaWN0dXJlX3NsaWRlcl90aWxlL1BpY3R1cmVTbGlkZXJUaWxlLmh0bWwnXG4gIH1cblxuICBjb25zdCBjb25maWcgPSBmdW5jdGlvbihwaXBEYXNoYm9hcmRQcm92aWRlcjogSURhc2hib2FyZFByb3ZpZGVyKSB7XG4gICAgcGlwRGFzaGJvYXJkUHJvdmlkZXIucmVnaXN0ZXJUaWxlVHlwZShQaWN0dXJlU2xpZGVyVGlsZSk7XG4gIH1cblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgncGlwRGFzaGJvYXJkJylcbiAgICAuY29uZmlnKGNvbmZpZyk7XG59IiwiaW1wb3J0IHtcbiAgRGFzaGJvYXJkVGlsZVxufSBmcm9tICcuLi9jb21tb25fdGlsZS9EYXNoYm9hcmRUaWxlJztcbmltcG9ydCB7XG4gIElUaWxlQ29uZmlnU2VydmljZVxufSBmcm9tICcuLi9jb25maWdfdGlsZV9kaWFsb2cvQ29uZmlnRGlhbG9nU2VydmljZSc7XG5pbXBvcnQgeyBJRGFzaGJvYXJkUHJvdmlkZXIsIElEYXNoYm9hcmRUaWxlVHlwZU9wdGlvbnMgfSBmcm9tICcuLi91dGlsaXR5L0lEYXNoYm9hcmRTZXJ2aWNlJztcbntcbiAgY2xhc3MgUG9zaXRpb25UaWxlQ29udHJvbGxlciBleHRlbmRzIERhc2hib2FyZFRpbGUge1xuICAgIHB1YmxpYyBzaG93UG9zaXRpb246IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAkc2NvcGU6IGFuZ3VsYXIuSVNjb3BlLFxuICAgICAgcHJpdmF0ZSAkdGltZW91dDogYW5ndWxhci5JVGltZW91dFNlcnZpY2UsXG4gICAgICBwcml2YXRlICRlbGVtZW50OiBhbnksXG4gICAgICBwcml2YXRlIHBpcFRpbGVDb25maWdEaWFsb2dTZXJ2aWNlOiBJVGlsZUNvbmZpZ1NlcnZpY2UsXG4gICAgICBwcml2YXRlIHBpcExvY2F0aW9uRWRpdERpYWxvZzogYW55LFxuICAgICkge1xuICAgICAgc3VwZXIoKTtcbiAgICAgIHRoaXMub3B0aW9ucy5tZW51LnB1c2goe1xuICAgICAgICB0aXRsZTogJ0NvbmZpZ3VyYXRlJyxcbiAgICAgICAgYWN0aW9uOiAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5vbkNvbmZpZ0NsaWNrKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdGhpcy5vcHRpb25zLm1lbnUucHVzaCh7XG4gICAgICAgIHRpdGxlOiAnQ2hhbmdlIGxvY2F0aW9uJyxcbiAgICAgICAgYWN0aW9uOiAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5vcGVuTG9jYXRpb25FZGl0RGlhbG9nKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLm9wdGlvbnMubG9jYXRpb24gPSB0aGlzLm9wdGlvbnMubG9jYXRpb24gfHwgdGhpcy5vcHRpb25zLnBvc2l0aW9uO1xuXG4gICAgICAkc2NvcGUuJHdhdGNoKCckY3RybC5vcHRpb25zLmxvY2F0aW9uJywgKCkgPT4ge1xuICAgICAgICB0aGlzLnJlRHJhd1Bvc2l0aW9uKCk7XG4gICAgICB9KTtcblxuICAgICAgLy8gVE9ETyBpdCBkb2Vzbid0IHdvcmtcbiAgICAgICRzY29wZS4kd2F0Y2goKCkgPT4ge1xuICAgICAgICByZXR1cm4gJGVsZW1lbnQuaXMoJzp2aXNpYmxlJyk7XG4gICAgICB9LCAobmV3VmFsKSA9PiB7XG4gICAgICAgIGlmIChuZXdWYWwgPT0gdHJ1ZSkgdGhpcy5yZURyYXdQb3NpdGlvbigpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbkNvbmZpZ0NsaWNrKCkge1xuICAgICAgdGhpcy5waXBUaWxlQ29uZmlnRGlhbG9nU2VydmljZS5zaG93KHtcbiAgICAgICAgZGlhbG9nQ2xhc3M6ICdwaXAtcG9zaXRpb24tY29uZmlnJyxcbiAgICAgICAgbG9jYWxzOiB7XG4gICAgICAgICAgc2l6ZTogdGhpcy5vcHRpb25zLnNpemUsXG4gICAgICAgICAgbG9jYXRpb25OYW1lOiB0aGlzLm9wdGlvbnMubG9jYXRpb25OYW1lLFxuICAgICAgICAgIGhpZGVDb2xvcnM6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIGV4dGVuc2lvblVybDogJ3Bvc2l0aW9uX3RpbGUvQ29uZmlnRGlhbG9nRXh0ZW5zaW9uLmh0bWwnXG4gICAgICB9LCAocmVzdWx0OiBhbnkpID0+IHtcbiAgICAgICAgdGhpcy5jaGFuZ2VTaXplKHJlc3VsdC5zaXplKTtcbiAgICAgICAgdGhpcy5vcHRpb25zLmxvY2F0aW9uTmFtZSA9IHJlc3VsdC5sb2NhdGlvbk5hbWU7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY2hhbmdlU2l6ZShwYXJhbXMpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5zaXplLmNvbFNwYW4gPSBwYXJhbXMuc2l6ZVg7XG4gICAgICB0aGlzLm9wdGlvbnMuc2l6ZS5yb3dTcGFuID0gcGFyYW1zLnNpemVZO1xuXG4gICAgICB0aGlzLnJlRHJhd1Bvc2l0aW9uKCk7XG4gICAgfVxuXG4gICAgcHVibGljIG9wZW5Mb2NhdGlvbkVkaXREaWFsb2coKSB7XG4gICAgICB0aGlzLnBpcExvY2F0aW9uRWRpdERpYWxvZy5zaG93KHtcbiAgICAgICAgbG9jYXRpb25OYW1lOiB0aGlzLm9wdGlvbnMubG9jYXRpb25OYW1lLFxuICAgICAgICBsb2NhdGlvblBvczogdGhpcy5vcHRpb25zLmxvY2F0aW9uXG4gICAgICB9LCAobmV3UG9zaXRpb24pID0+IHtcbiAgICAgICAgaWYgKG5ld1Bvc2l0aW9uKSB7XG4gICAgICAgICAgdGhpcy5vcHRpb25zLmxvY2F0aW9uID0gbmV3UG9zaXRpb24ubG9jYXRpb247XG4gICAgICAgICAgdGhpcy5vcHRpb25zLmxvY2F0aW9uTmFtZSA9IG5ld1Bvc2l0aW9uLmxvY2F0aW9OYW1lO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlRHJhd1Bvc2l0aW9uKCkge1xuICAgICAgdGhpcy5zaG93UG9zaXRpb24gPSBmYWxzZTtcbiAgICAgIHRoaXMuJHRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLnNob3dQb3NpdGlvbiA9IHRydWU7XG4gICAgICB9LCA1MCk7XG4gICAgfVxuICB9XG5cblxuICBjb25zdCBQb3NpdGlvblRpbGU6IElEYXNoYm9hcmRUaWxlVHlwZU9wdGlvbnMgPSB7XG4gICAgbmFtZTogJ3Bvc2l0aW9uJyxcbiAgICBjbGFzczogJ3BpcC1wb3NpdGlvbi10aWxlJyxcbiAgICBjb250cm9sbGVyQXM6ICckY3RybCcsXG4gICAgY29udHJvbGxlcjogUG9zaXRpb25UaWxlQ29udHJvbGxlcixcbiAgICB0ZW1wbGF0ZVVybDogJ3Bvc2l0aW9uX3RpbGUvUG9zaXRpb25UaWxlLmh0bWwnXG4gIH1cblxuICBjb25zdCBjb25maWcgPSBmdW5jdGlvbihwaXBEYXNoYm9hcmRQcm92aWRlcjogSURhc2hib2FyZFByb3ZpZGVyKSB7XG4gICAgcGlwRGFzaGJvYXJkUHJvdmlkZXIucmVnaXN0ZXJUaWxlVHlwZShQb3NpdGlvblRpbGUpO1xuICB9XG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ3BpcERhc2hib2FyZCcpXG4gICAgLmNvbmZpZyhjb25maWcpO1xufSIsImltcG9ydCB7XG4gIERhc2hib2FyZFRpbGVcbn0gZnJvbSAnLi4vY29tbW9uX3RpbGUvRGFzaGJvYXJkVGlsZSc7XG5pbXBvcnQgeyBJRGFzaGJvYXJkUHJvdmlkZXIsIElEYXNoYm9hcmRUaWxlVHlwZU9wdGlvbnMgfSBmcm9tICcuLi91dGlsaXR5L0lEYXNoYm9hcmRTZXJ2aWNlJztcbntcbiAgY29uc3QgU01BTExfQ0hBUlQ6IG51bWJlciA9IDcwO1xuICBjb25zdCBCSUdfQ0hBUlQ6IG51bWJlciA9IDI1MDtcblxuICBjbGFzcyBTdGF0aXN0aWNzVGlsZUNvbnRyb2xsZXIgZXh0ZW5kcyBEYXNoYm9hcmRUaWxlIHtcbiAgICBwcml2YXRlIF8kc2NvcGU6IGFuZ3VsYXIuSVNjb3BlO1xuICAgIHByaXZhdGUgXyR0aW1lb3V0OiBhbmd1bGFyLklUaW1lb3V0U2VydmljZTtcblxuICAgIHB1YmxpYyByZXNldDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHB1YmxpYyBjaGFydFNpemU6IG51bWJlciA9IFNNQUxMX0NIQVJUO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAkc2NvcGU6IGFuZ3VsYXIuSVNjb3BlLFxuICAgICAgJHRpbWVvdXQ6IGFuZ3VsYXIuSVRpbWVvdXRTZXJ2aWNlXG4gICAgKSB7XG4gICAgICBzdXBlcigpO1xuICAgICAgdGhpcy5fJHNjb3BlID0gJHNjb3BlO1xuICAgICAgdGhpcy5fJHRpbWVvdXQgPSAkdGltZW91dDtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucykge1xuICAgICAgICB0aGlzLm1lbnUgPSB0aGlzLm9wdGlvbnMubWVudSA/IF8udW5pb24odGhpcy5tZW51LCB0aGlzLm9wdGlvbnMubWVudSkgOiB0aGlzLm1lbnU7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2V0Q2hhcnRTaXplKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGNoYW5nZVNpemUocGFyYW1zKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuc2l6ZS5jb2xTcGFuID0gcGFyYW1zLnNpemVYO1xuICAgICAgdGhpcy5vcHRpb25zLnNpemUucm93U3BhbiA9IHBhcmFtcy5zaXplWTtcblxuICAgICAgdGhpcy5yZXNldCA9IHRydWU7XG4gICAgICB0aGlzLnNldENoYXJ0U2l6ZSgpO1xuICAgICAgdGhpcy5fJHRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLnJlc2V0ID0gZmFsc2U7XG4gICAgICB9LCA1MDApO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0Q2hhcnRTaXplKCkge1xuICAgICAgdGhpcy5jaGFydFNpemUgPSB0aGlzLm9wdGlvbnMuc2l6ZS5jb2xTcGFuID09IDIgJiYgdGhpcy5vcHRpb25zLnNpemUucm93U3BhbiA9PSAyID8gQklHX0NIQVJUIDogU01BTExfQ0hBUlQ7XG4gICAgfVxuICB9XG5cblxuICBjb25zdCBTdGF0aXN0aWNzVGlsZTogSURhc2hib2FyZFRpbGVUeXBlT3B0aW9ucyA9IHtcbiAgICBuYW1lOiAnc3RhdGlzdGljcycsXG4gICAgY2xhc3M6ICdwaXAtc3RhdGlzdGljcy10aWxlJyxcbiAgICBjb250cm9sbGVyQXM6ICckY3RybCcsXG4gICAgY29udHJvbGxlcjogU3RhdGlzdGljc1RpbGVDb250cm9sbGVyLFxuICAgIHRlbXBsYXRlVXJsOiAnc3RhdGlzdGljc190aWxlL1N0YXRpc3RpY3NUaWxlLmh0bWwnXG4gIH1cblxuICBjb25zdCBjb25maWcgPSBmdW5jdGlvbihwaXBEYXNoYm9hcmRQcm92aWRlcjogSURhc2hib2FyZFByb3ZpZGVyKSB7XG4gICAgcGlwRGFzaGJvYXJkUHJvdmlkZXIucmVnaXN0ZXJUaWxlVHlwZShTdGF0aXN0aWNzVGlsZSk7XG4gIH1cblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgncGlwRGFzaGJvYXJkJylcbiAgICAuY29uZmlnKGNvbmZpZyk7XG59Iiwie1xuICBpbnRlcmZhY2UgRHJhZ2dhYmxlVGlsZUF0dHJpYnV0ZXMgZXh0ZW5kcyBuZy5JQXR0cmlidXRlcyB7XG4gICAgcGlwRHJhZ2dhYmxlVGlsZXM6IGFueTtcbiAgfVxuXG4gIGZ1bmN0aW9uIERyYWdnYWJsZVRpbGVMaW5rKFxuICAgICRzY29wZTogbmcuSVNjb3BlLFxuICAgICRlbGVtOiBKUXVlcnksXG4gICAgJGF0dHI6IERyYWdnYWJsZVRpbGVBdHRyaWJ1dGVzLFxuICAgICRjb21waWxlOiBhbmd1bGFyLklDb21waWxlU2VydmljZVxuICApIHtcbiAgICBjb25zdCBkb2NGcmFnID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuICAgICAgZ3JvdXAgPSAkc2NvcGUuJGV2YWwoJGF0dHIucGlwRHJhZ2dhYmxlVGlsZXMpO1xuXG4gICAgZ3JvdXAuZm9yRWFjaChmdW5jdGlvbiAodGlsZSkge1xuICAgICAgY29uc3QgdHBsID0gd3JhcENvbXBvbmVudCh0aWxlLmdldENvbXBpbGVkVGVtcGxhdGUoKSk7XG5cbiAgICAgIGRvY0ZyYWcuYXBwZW5kQ2hpbGQodHBsKTtcbiAgICB9KTtcblxuICAgICRlbGVtLmFwcGVuZChkb2NGcmFnKTtcblxuICAgIGZ1bmN0aW9uIHdyYXBDb21wb25lbnQoZWxlbSkge1xuICAgICAgcmV0dXJuICRjb21waWxlKCQoJzxkaXY+JylcbiAgICAgICAgLmFkZENsYXNzKCdwaXAtZHJhZ2dhYmxlLXRpbGUnKVxuICAgICAgICAuYXR0cigncGlwLWRyYWcnLCAndHJ1ZScpXG4gICAgICAgIC5hdHRyKCdwaXAtc2Nyb2xsLWNvbnRhaW5lcicsIFwiJy5waXAtZGFzaGJvYXJkLXNjcm9sbCdcIilcbiAgICAgICAgLmdldCgwKSkoJHNjb3BlKS5hcHBlbmQoZWxlbSkuZ2V0KDApO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIERyYWdnYWJsZVRpbGVzKCRjb21waWxlKTogbmcuSURpcmVjdGl2ZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICBsaW5rOiBmdW5jdGlvbiAoXG4gICAgICAgICRzY29wZTogbmcuSVNjb3BlLFxuICAgICAgICAkZWxlbTogSlF1ZXJ5LFxuICAgICAgICAkYXR0cjogRHJhZ2dhYmxlVGlsZUF0dHJpYnV0ZXNcbiAgICAgICkge1xuICAgICAgICBuZXcgRHJhZ2dhYmxlVGlsZUxpbmsoJHNjb3BlLCAkZWxlbSwgJGF0dHIsICRjb21waWxlKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ3BpcERyYWdnYWJsZVRpbGVzR3JvdXAnKVxuICAgIC5kaXJlY3RpdmUoJ3BpcERyYWdnYWJsZVRpbGVzJywgRHJhZ2dhYmxlVGlsZXMpO1xufSIsImV4cG9ydCBpbnRlcmZhY2UgVGlsZXNHcmlkQ29uc3RydWN0b3Ige1xuICBuZXcodGlsZXMsIG9wdGlvbnMsIGNvbHVtbnMsIGVsZW0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gSVRpbGVzR3JpZENvbnN0cnVjdG9yKGNvbnN0cnVjdG9yOiBUaWxlc0dyaWRDb25zdHJ1Y3RvciwgdGlsZXMsIG9wdGlvbnMsIGNvbHVtbnMsIGVsZW0pOiBJVGlsZXNHcmlkU2VydmljZSB7XG4gIHJldHVybiBuZXcgY29uc3RydWN0b3IodGlsZXMsIG9wdGlvbnMsIGNvbHVtbnMsIGVsZW0pO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElUaWxlc0dyaWRTZXJ2aWNlIHtcbiAgdGlsZXM6IGFueTtcbiAgb3B0czogYW55O1xuICBjb2x1bW5zOiBhbnk7XG4gIGVsZW06IGFueTtcbiAgZ3JpZENlbGxzOiBhbnk7XG4gIGlubGluZTogYm9vbGVhbjtcbiAgaXNNb2JpbGVMYXlvdXQ6IGJvb2xlYW47XG5cbiAgYWRkVGlsZSh0aWxlKTogYW55O1xuICBnZXRDZWxsQnlQb3NpdGlvbihyb3csIGNvbCk6IGFueTtcbiAgZ2V0Q2VsbHMocHJldkNlbGwsIHJvd1NwYW4sIGNvbFNwYW4pOiBhbnk7XG4gIGdldEF2YWlsYWJsZUNlbGxzRGVza3RvcChwcmV2Q2VsbCwgcm93U3BhbiwgY29sU3Bhbik6IGFueTtcbiAgZ2V0Q2VsbChzcmMsIGJhc2ljUm93LCBiYXNpY0NvbCwgY29sdW1ucyk6IGFueTtcbiAgZ2V0QXZhaWxhYmxlQ2VsbHNNb2JpbGUocHJldkNlbGwsIHJvd1NwYW4sIGNvbFNwYW4pOiBhbnk7XG4gIGdldEJhc2ljUm93KHByZXZDZWxsKTogYW55O1xuICBpc0NlbGxGcmVlKHJvdywgY29sKTogYW55O1xuICBnZXRDZWxsSW5kZXgoc3JjQ2VsbCk6IGFueTtcbiAgcmVzZXJ2ZUNlbGxzKHN0YXJ0LCBlbmQsIGVsZW0pOiB2b2lkO1xuICBjbGVhckVsZW1lbnRzKCk6IHZvaWQ7XG4gIHNldEF2YWlsYWJsZUNvbHVtbnMoY29sdW1ucyk6IGFueTtcbiAgZ2VuZXJhdGVHcmlkKHNpbmdsZVRpbGVXaWR0aCA/ICk6IGFueTtcbiAgc2V0VGlsZXNEaW1lbnNpb25zKG9ubHlQb3NpdGlvbiwgZHJhZ2dlZFRpbGUpOiBhbnk7XG4gIGNhbGNDb250YWluZXJIZWlnaHQoKTogYW55O1xuICBnZXRUaWxlQnlOb2RlKG5vZGUpOiBhbnk7XG4gIGdldFRpbGVCeUNvb3JkaW5hdGVzKGNvb3JkcywgZHJhZ2dlZFRpbGUpOiBhbnk7XG4gIGdldFRpbGVJbmRleCh0aWxlKTogYW55O1xuICBzd2FwVGlsZXMobW92ZWRUaWxlLCBiZWZvcmVUaWxlKTogYW55O1xuICByZW1vdmVUaWxlKHJlbW92ZVRpbGUpOiBhbnk7XG4gIHVwZGF0ZVRpbGVPcHRpb25zKG9wdHMpOiBhbnk7XG59XG5cbmNvbnN0IE1PQklMRV9MQVlPVVRfQ09MVU1OUyA9IDI7XG5cbmV4cG9ydCBjbGFzcyBUaWxlc0dyaWRTZXJ2aWNlIGltcGxlbWVudHMgSVRpbGVzR3JpZFNlcnZpY2Uge1xuICBwdWJsaWMgdGlsZXM6IGFueTtcbiAgcHVibGljIG9wdHM6IGFueTtcbiAgcHVibGljIGNvbHVtbnM6IGFueTtcbiAgcHVibGljIGVsZW06IGFueTtcbiAgcHVibGljIGdyaWRDZWxsczogYW55ID0gW107XG4gIHB1YmxpYyBpbmxpbmU6IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHVibGljIGlzTW9iaWxlTGF5b3V0OiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKHRpbGVzLCBvcHRpb25zLCBjb2x1bW5zLCBlbGVtKSB7XG4gICAgdGhpcy50aWxlcyA9IHRpbGVzO1xuICAgIHRoaXMub3B0cyA9IG9wdGlvbnM7XG4gICAgdGhpcy5jb2x1bW5zID0gY29sdW1ucyB8fCAwOyAvLyBhdmFpbGFibGUgY29sdW1ucyBpbiBhIHJvd1xuICAgIHRoaXMuZWxlbSA9IGVsZW07XG4gICAgdGhpcy5ncmlkQ2VsbHMgPSBbXTtcbiAgICB0aGlzLmlubGluZSA9IG9wdGlvbnMuaW5saW5lIHx8IGZhbHNlO1xuICAgIHRoaXMuaXNNb2JpbGVMYXlvdXQgPSBjb2x1bW5zID09PSBNT0JJTEVfTEFZT1VUX0NPTFVNTlM7XG4gIH1cblxuICBwdWJsaWMgYWRkVGlsZSh0aWxlKTogYW55IHtcbiAgICB0aGlzLnRpbGVzLnB1c2godGlsZSk7XG4gICAgaWYgKHRoaXMudGlsZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICB0aGlzLmdlbmVyYXRlR3JpZCgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHB1YmxpYyBnZXRDZWxsQnlQb3NpdGlvbihyb3csIGNvbCk6IGFueSB7XG4gICAgcmV0dXJuIHRoaXMuZ3JpZENlbGxzW3Jvd11bY29sXTtcbiAgfTtcblxuICBwdWJsaWMgZ2V0Q2VsbHMocHJldkNlbGwsIHJvd1NwYW4sIGNvbFNwYW4pOiBhbnkge1xuICAgIGNvbnNvbGUubG9nKCdwcmV2Q2VsbCcsIHByZXZDZWxsKTtcblxuICAgIGlmICh0aGlzLmlzTW9iaWxlTGF5b3V0KSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRBdmFpbGFibGVDZWxsc01vYmlsZShwcmV2Q2VsbCwgcm93U3BhbiwgY29sU3Bhbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmdldEF2YWlsYWJsZUNlbGxzRGVza3RvcChwcmV2Q2VsbCwgcm93U3BhbiwgY29sU3Bhbik7XG4gICAgfVxuICB9O1xuXG4gIHB1YmxpYyBnZXRBdmFpbGFibGVDZWxsc0Rlc2t0b3AocHJldkNlbGwsIHJvd1NwYW4sIGNvbFNwYW4pOiBhbnkge1xuICAgIGxldCBsZWZ0Q29ybmVyQ2VsbDtcbiAgICBsZXQgcmlnaHRDb3JuZXJDZWxsO1xuICAgIGNvbnN0IGJhc2ljQ29sID0gcHJldkNlbGwgJiYgcHJldkNlbGwuY29sIHx8IDA7XG4gICAgY29uc3QgYmFzaWNSb3cgPSB0aGlzLmdldEJhc2ljUm93KHByZXZDZWxsKTtcblxuICAgIC8vIFNtYWxsIHRpbGVcbiAgICBpZiAoY29sU3BhbiA9PT0gMSAmJiByb3dTcGFuID09PSAxKSB7XG4gICAgICBjb25zdCBncmlkQ29weSA9IHRoaXMuZ3JpZENlbGxzLnNsaWNlKCk7XG5cbiAgICAgIGlmICghcHJldkNlbGwpIHtcbiAgICAgICAgbGVmdENvcm5lckNlbGwgPSBncmlkQ29weVswXVswXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxlZnRDb3JuZXJDZWxsID0gdGhpcy5nZXRDZWxsKGdyaWRDb3B5LCBiYXNpY1JvdywgYmFzaWNDb2wsIHRoaXMuY29sdW1ucyk7XG5cbiAgICAgICAgaWYgKCFsZWZ0Q29ybmVyQ2VsbCkge1xuICAgICAgICAgIGNvbnN0IHJvd1NoaWZ0ID0gdGhpcy5pc01vYmlsZUxheW91dCA/IDEgOiAyO1xuICAgICAgICAgIGxlZnRDb3JuZXJDZWxsID0gdGhpcy5nZXRDZWxsKGdyaWRDb3B5LCBiYXNpY1JvdyArIHJvd1NoaWZ0LCAwLCB0aGlzLmNvbHVtbnMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gTWVkaXVtIHRpbGVcbiAgICBpZiAoY29sU3BhbiA9PT0gMiAmJiByb3dTcGFuID09PSAxKSB7XG4gICAgICBjb25zdCBwcmV2VGlsZVNpemUgPSBwcmV2Q2VsbCAmJiBwcmV2Q2VsbC5lbGVtLnNpemUgfHwgbnVsbDtcblxuICAgICAgaWYgKCFwcmV2VGlsZVNpemUpIHtcbiAgICAgICAgbGVmdENvcm5lckNlbGwgPSB0aGlzLmdldENlbGxCeVBvc2l0aW9uKGJhc2ljUm93LCBiYXNpY0NvbCk7XG4gICAgICAgIHJpZ2h0Q29ybmVyQ2VsbCA9IHRoaXMuZ2V0Q2VsbEJ5UG9zaXRpb24oYmFzaWNSb3csIGJhc2ljQ29sICsgMSk7XG4gICAgICB9IGVsc2UgaWYgKHByZXZUaWxlU2l6ZS5jb2xTcGFuID09PSAyICYmIHByZXZUaWxlU2l6ZS5yb3dTcGFuID09PSAyKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbHVtbnMgLSBiYXNpY0NvbCAtIDIgPiAwKSB7XG4gICAgICAgICAgbGVmdENvcm5lckNlbGwgPSB0aGlzLmdldENlbGxCeVBvc2l0aW9uKGJhc2ljUm93LCBiYXNpY0NvbCArIDEpO1xuICAgICAgICAgIHJpZ2h0Q29ybmVyQ2VsbCA9IHRoaXMuZ2V0Q2VsbEJ5UG9zaXRpb24oYmFzaWNSb3csIGJhc2ljQ29sICsgMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGVmdENvcm5lckNlbGwgPSB0aGlzLmdldENlbGxCeVBvc2l0aW9uKGJhc2ljUm93ICsgMiwgMCk7XG4gICAgICAgICAgcmlnaHRDb3JuZXJDZWxsID0gdGhpcy5nZXRDZWxsQnlQb3NpdGlvbihiYXNpY1JvdyArIDIsIDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHByZXZUaWxlU2l6ZS5jb2xTcGFuID09PSAyICYmIHByZXZUaWxlU2l6ZS5yb3dTcGFuID09PSAxKSB7XG4gICAgICAgIGlmIChwcmV2Q2VsbC5yb3cgJSAyID09PSAwKSB7XG4gICAgICAgICAgbGVmdENvcm5lckNlbGwgPSB0aGlzLmdldENlbGxCeVBvc2l0aW9uKGJhc2ljUm93ICsgMSwgYmFzaWNDb2wgLSAxKTtcbiAgICAgICAgICByaWdodENvcm5lckNlbGwgPSB0aGlzLmdldENlbGxCeVBvc2l0aW9uKGJhc2ljUm93ICsgMSwgYmFzaWNDb2wpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh0aGlzLmNvbHVtbnMgLSBiYXNpY0NvbCAtIDMgPj0gMCkge1xuICAgICAgICAgICAgbGVmdENvcm5lckNlbGwgPSB0aGlzLmdldENlbGxCeVBvc2l0aW9uKGJhc2ljUm93LCBiYXNpY0NvbCArIDEpO1xuICAgICAgICAgICAgcmlnaHRDb3JuZXJDZWxsID0gdGhpcy5nZXRDZWxsQnlQb3NpdGlvbihiYXNpY1JvdywgYmFzaWNDb2wgKyAyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGVmdENvcm5lckNlbGwgPSB0aGlzLmdldENlbGxCeVBvc2l0aW9uKGJhc2ljUm93ICsgMiwgMCk7XG4gICAgICAgICAgICByaWdodENvcm5lckNlbGwgPSB0aGlzLmdldENlbGxCeVBvc2l0aW9uKGJhc2ljUm93ICsgMiwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHByZXZUaWxlU2l6ZS5jb2xTcGFuID09PSAxICYmIHByZXZUaWxlU2l6ZS5yb3dTcGFuID09PSAxKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbHVtbnMgLSBiYXNpY0NvbCAtIDMgPj0gMCkge1xuICAgICAgICAgIGlmICh0aGlzLmlzQ2VsbEZyZWUoYmFzaWNSb3csIGJhc2ljQ29sICsgMSkpIHtcbiAgICAgICAgICAgIGxlZnRDb3JuZXJDZWxsID0gdGhpcy5nZXRDZWxsQnlQb3NpdGlvbihiYXNpY1JvdywgYmFzaWNDb2wgKyAxKTtcbiAgICAgICAgICAgIHJpZ2h0Q29ybmVyQ2VsbCA9IHRoaXMuZ2V0Q2VsbEJ5UG9zaXRpb24oYmFzaWNSb3csIGJhc2ljQ29sICsgMik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxlZnRDb3JuZXJDZWxsID0gdGhpcy5nZXRDZWxsQnlQb3NpdGlvbihiYXNpY1JvdywgYmFzaWNDb2wgKyAyKTtcbiAgICAgICAgICAgIHJpZ2h0Q29ybmVyQ2VsbCA9IHRoaXMuZ2V0Q2VsbEJ5UG9zaXRpb24oYmFzaWNSb3csIGJhc2ljQ29sICsgMyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxlZnRDb3JuZXJDZWxsID0gdGhpcy5nZXRDZWxsQnlQb3NpdGlvbihiYXNpY1JvdyArIDIsIDApO1xuICAgICAgICAgIHJpZ2h0Q29ybmVyQ2VsbCA9IHRoaXMuZ2V0Q2VsbEJ5UG9zaXRpb24oYmFzaWNSb3cgKyAyLCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEJpZyB0aWxlXG4gICAgaWYgKCFwcmV2Q2VsbCAmJiByb3dTcGFuID09PSAyICYmIGNvbFNwYW4gPT09IDIpIHtcbiAgICAgIGxlZnRDb3JuZXJDZWxsID0gdGhpcy5nZXRDZWxsQnlQb3NpdGlvbihiYXNpY1JvdywgYmFzaWNDb2wpO1xuICAgICAgcmlnaHRDb3JuZXJDZWxsID0gdGhpcy5nZXRDZWxsQnlQb3NpdGlvbihiYXNpY1JvdyArIDEsIGJhc2ljQ29sICsgMSk7XG4gICAgfSBlbHNlIGlmIChyb3dTcGFuID09PSAyICYmIGNvbFNwYW4gPT09IDIpIHtcbiAgICAgIGlmICh0aGlzLmNvbHVtbnMgLSBiYXNpY0NvbCAtIDIgPiAwKSB7XG4gICAgICAgIGlmICh0aGlzLmlzQ2VsbEZyZWUoYmFzaWNSb3csIGJhc2ljQ29sICsgMSkpIHtcbiAgICAgICAgICBsZWZ0Q29ybmVyQ2VsbCA9IHRoaXMuZ2V0Q2VsbEJ5UG9zaXRpb24oYmFzaWNSb3csIGJhc2ljQ29sICsgMSk7XG4gICAgICAgICAgcmlnaHRDb3JuZXJDZWxsID0gdGhpcy5nZXRDZWxsQnlQb3NpdGlvbihiYXNpY1JvdyArIDEsIGJhc2ljQ29sICsgMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGVmdENvcm5lckNlbGwgPSB0aGlzLmdldENlbGxCeVBvc2l0aW9uKGJhc2ljUm93LCBiYXNpY0NvbCArIDIpO1xuICAgICAgICAgIHJpZ2h0Q29ybmVyQ2VsbCA9IHRoaXMuZ2V0Q2VsbEJ5UG9zaXRpb24oYmFzaWNSb3cgKyAxLCBiYXNpY0NvbCArIDMpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZWZ0Q29ybmVyQ2VsbCA9IHRoaXMuZ2V0Q2VsbEJ5UG9zaXRpb24oYmFzaWNSb3cgKyAyLCAwKTtcbiAgICAgICAgcmlnaHRDb3JuZXJDZWxsID0gdGhpcy5nZXRDZWxsQnlQb3NpdGlvbihiYXNpY1JvdyArIDMsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBzdGFydDogbGVmdENvcm5lckNlbGwsXG4gICAgICBlbmQ6IHJpZ2h0Q29ybmVyQ2VsbFxuICAgIH07XG4gIH07XG5cbiAgcHVibGljIGdldENlbGwoc3JjLCBiYXNpY1JvdywgYmFzaWNDb2wsIGNvbHVtbnMpOiBhbnkge1xuICAgIGxldCBjZWxsLCBjb2wsIHJvdztcblxuICAgIGlmICh0aGlzLmlzTW9iaWxlTGF5b3V0KSB7XG4gICAgICAvLyBtb2JpbGUgbGF5b3V0XG4gICAgICBmb3IgKGNvbCA9IGJhc2ljQ29sOyBjb2wgPCBjb2x1bW5zOyBjb2wrKykge1xuICAgICAgICBpZiAoIXNyY1tiYXNpY1Jvd11bY29sXS5lbGVtKSB7XG4gICAgICAgICAgY2VsbCA9IHNyY1tiYXNpY1Jvd11bY29sXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gY2VsbDtcbiAgICB9XG5cbiAgICAvLyBkZXNrdG9wXG4gICAgZm9yIChjb2wgPSBiYXNpY0NvbDsgY29sIDwgY29sdW1uczsgY29sKyspIHtcbiAgICAgIGZvciAocm93ID0gMDsgcm93IDwgMjsgcm93KyspIHtcbiAgICAgICAgaWYgKCFzcmNbcm93ICsgYmFzaWNSb3ddW2NvbF0uZWxlbSkge1xuICAgICAgICAgIGNlbGwgPSBzcmNbcm93ICsgYmFzaWNSb3ddW2NvbF07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGNlbGwpIHtcbiAgICAgICAgcmV0dXJuIGNlbGw7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHB1YmxpYyBnZXRBdmFpbGFibGVDZWxsc01vYmlsZShwcmV2Q2VsbCwgcm93U3BhbiwgY29sU3Bhbik6IGFueSB7XG4gICAgbGV0IGxlZnRDb3JuZXJDZWxsO1xuICAgIGxldCByaWdodENvcm5lckNlbGw7XG4gICAgY29uc3QgYmFzaWNSb3cgPSB0aGlzLmdldEJhc2ljUm93KHByZXZDZWxsKTtcbiAgICBjb25zdCBiYXNpY0NvbCA9IHByZXZDZWxsICYmIHByZXZDZWxsLmNvbCB8fCAwO1xuXG5cbiAgICBpZiAoY29sU3BhbiA9PT0gMSAmJiByb3dTcGFuID09PSAxKSB7XG4gICAgICBjb25zdCBncmlkQ29weSA9IHRoaXMuZ3JpZENlbGxzLnNsaWNlKCk7XG5cbiAgICAgIGlmICghcHJldkNlbGwpIHtcbiAgICAgICAgbGVmdENvcm5lckNlbGwgPSBncmlkQ29weVswXVswXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxlZnRDb3JuZXJDZWxsID0gdGhpcy5nZXRDZWxsKGdyaWRDb3B5LCBiYXNpY1JvdywgYmFzaWNDb2wsIHRoaXMuY29sdW1ucyk7XG5cbiAgICAgICAgaWYgKCFsZWZ0Q29ybmVyQ2VsbCkge1xuICAgICAgICAgIGNvbnN0IHJvd1NoaWZ0ID0gdGhpcy5pc01vYmlsZUxheW91dCA/IDEgOiAyO1xuICAgICAgICAgIGxlZnRDb3JuZXJDZWxsID0gdGhpcy5nZXRDZWxsKGdyaWRDb3B5LCBiYXNpY1JvdyArIHJvd1NoaWZ0LCAwLCB0aGlzLmNvbHVtbnMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFwcmV2Q2VsbCkge1xuICAgICAgbGVmdENvcm5lckNlbGwgPSB0aGlzLmdldENlbGxCeVBvc2l0aW9uKGJhc2ljUm93LCAwKTtcbiAgICAgIHJpZ2h0Q29ybmVyQ2VsbCA9IHRoaXMuZ2V0Q2VsbEJ5UG9zaXRpb24oYmFzaWNSb3cgKyByb3dTcGFuIC0gMSwgMSk7XG4gICAgfSBlbHNlIGlmIChjb2xTcGFuID09PSAyKSB7XG4gICAgICBsZWZ0Q29ybmVyQ2VsbCA9IHRoaXMuZ2V0Q2VsbEJ5UG9zaXRpb24oYmFzaWNSb3cgKyAxLCAwKTtcbiAgICAgIHJpZ2h0Q29ybmVyQ2VsbCA9IHRoaXMuZ2V0Q2VsbEJ5UG9zaXRpb24oYmFzaWNSb3cgKyByb3dTcGFuLCAxKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgc3RhcnQ6IGxlZnRDb3JuZXJDZWxsLFxuICAgICAgZW5kOiByaWdodENvcm5lckNlbGxcbiAgICB9O1xuICB9O1xuXG4gIHB1YmxpYyBnZXRCYXNpY1JvdyhwcmV2Q2VsbCk6IGFueSB7XG4gICAgbGV0IGJhc2ljUm93O1xuXG4gICAgaWYgKHRoaXMuaXNNb2JpbGVMYXlvdXQpIHtcbiAgICAgIGlmIChwcmV2Q2VsbCkge1xuICAgICAgICBiYXNpY1JvdyA9IHByZXZDZWxsICYmIHByZXZDZWxsLnJvdyB8fCAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzaWNSb3cgPSAwO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJldkNlbGwpIHtcbiAgICAgICAgYmFzaWNSb3cgPSBwcmV2Q2VsbC5yb3cgJSAyID09PSAwID8gcHJldkNlbGwucm93IDogcHJldkNlbGwucm93IC0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJhc2ljUm93ID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYmFzaWNSb3c7XG4gIH07XG5cbiAgcHVibGljIGlzQ2VsbEZyZWUocm93LCBjb2wpOiBhbnkge1xuICAgIHJldHVybiAhdGhpcy5ncmlkQ2VsbHNbcm93XVtjb2xdLmVsZW07XG4gIH07XG5cbiAgcHVibGljIGdldENlbGxJbmRleChzcmNDZWxsKTogYW55IHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBsZXQgaW5kZXg7XG5cbiAgICB0aGlzLmdyaWRDZWxscy5mb3JFYWNoKChyb3csIHJvd0luZGV4KSA9PiB7XG4gICAgICBpbmRleCA9IF8uZmluZEluZGV4KHNlbGYuZ3JpZENlbGxzW3Jvd0luZGV4XSwgKGNlbGwpID0+IHtcbiAgICAgICAgcmV0dXJuIGNlbGwgPT09IHNyY0NlbGw7XG4gICAgICB9KTtcblxuICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gaW5kZXggIT09IC0xID8gaW5kZXggOiAwO1xuICB9O1xuXG4gIHB1YmxpYyByZXNlcnZlQ2VsbHMoc3RhcnQsIGVuZCwgZWxlbSkge1xuICAgIHRoaXMuZ3JpZENlbGxzLmZvckVhY2goKHJvdykgPT4ge1xuICAgICAgcm93LmZvckVhY2goKGNlbGwpID0+IHtcbiAgICAgICAgaWYgKGNlbGwucm93ID49IHN0YXJ0LnJvdyAmJiBjZWxsLnJvdyA8PSBlbmQucm93ICYmXG4gICAgICAgICAgY2VsbC5jb2wgPj0gc3RhcnQuY29sICYmIGNlbGwuY29sIDw9IGVuZC5jb2wpIHtcbiAgICAgICAgICBjZWxsLmVsZW0gPSBlbGVtO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBwdWJsaWMgY2xlYXJFbGVtZW50cygpIHtcbiAgICB0aGlzLmdyaWRDZWxscy5mb3JFYWNoKChyb3cpID0+IHtcbiAgICAgIHJvdy5mb3JFYWNoKCh0aWxlKSA9PiB7XG4gICAgICAgIHRpbGUuZWxlbSA9IG51bGw7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBwdWJsaWMgc2V0QXZhaWxhYmxlQ29sdW1ucyhjb2x1bW5zKTogYW55IHtcbiAgICB0aGlzLmlzTW9iaWxlTGF5b3V0ID0gY29sdW1ucyA9PT0gTU9CSUxFX0xBWU9VVF9DT0xVTU5TO1xuICAgIHRoaXMuY29sdW1ucyA9IGNvbHVtbnM7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBwdWJsaWMgZ2VuZXJhdGVHcmlkKHNpbmdsZVRpbGVXaWR0aCA/ICk6IGFueSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXMsXG4gICAgICB0aWxlV2lkdGggPSBzaW5nbGVUaWxlV2lkdGggfHwgdGhpcy5vcHRzLnRpbGVXaWR0aCxcbiAgICAgIG9mZnNldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5waXAtZHJhZ2dhYmxlLWdyb3VwLXRpdGxlJykuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgbGV0IGNvbHNJblJvdyA9IDAsXG4gICAgICByb3dzID0gMCxcbiAgICAgIGdyaWRJblJvdyA9IFtdO1xuXG4gICAgdGhpcy5ncmlkQ2VsbHMgPSBbXTtcblxuICAgIHRoaXMudGlsZXMuZm9yRWFjaCgodGlsZSwgaW5kZXgsIHNyY1RpbGVzKSA9PiB7XG4gICAgICBjb25zdCB0aWxlU2l6ZSA9IHRpbGUuZ2V0U2l6ZSgpO1xuXG4gICAgICBnZW5lcmF0ZUNlbGxzKHRpbGVTaXplLmNvbFNwYW4pO1xuXG4gICAgICBpZiAoc3JjVGlsZXMubGVuZ3RoID09PSBpbmRleCArIDEpIHtcbiAgICAgICAgaWYgKGNvbHNJblJvdyA8IHNlbGYuY29sdW1ucykge1xuICAgICAgICAgIGdlbmVyYXRlQ2VsbHMoc2VsZi5jb2x1bW5zIC0gY29sc0luUm93KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEdlbmVyYXRlIG1vcmUgY2VsbHMgZm9yIGV4dGVuZHMgdGlsZSBzaXplIHRvIGJpZ1xuICAgICAgICBpZiAoc2VsZi50aWxlcy5sZW5ndGggKiAyID4gc2VsZi5ncmlkQ2VsbHMubGVuZ3RoKSB7XG4gICAgICAgICAgQXJyYXkuYXBwbHkobnVsbCwgQXJyYXkoc2VsZi50aWxlcy5sZW5ndGggKiAyIC0gc2VsZi5ncmlkQ2VsbHMubGVuZ3RoKSkuZm9yRWFjaCgoKSA9PiB7XG4gICAgICAgICAgICBnZW5lcmF0ZUNlbGxzKHNlbGYuY29sdW1ucyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlQ2VsbHMobmV3Q2VsbENvdW50KSB7XG4gICAgICBBcnJheS5hcHBseShudWxsLCBBcnJheShuZXdDZWxsQ291bnQpKS5mb3JFYWNoKCgpID0+IHtcbiAgICAgICAgaWYgKHNlbGYuY29sdW1ucyA8IGNvbHNJblJvdyArIDEpIHtcbiAgICAgICAgICByb3dzKys7XG4gICAgICAgICAgY29sc0luUm93ID0gMDtcblxuICAgICAgICAgIHNlbGYuZ3JpZENlbGxzLnB1c2goZ3JpZEluUm93KTtcbiAgICAgICAgICBncmlkSW5Sb3cgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB0b3AgPSByb3dzICogc2VsZi5vcHRzLnRpbGVIZWlnaHQgKyAocm93cyA/IHJvd3MgKiBzZWxmLm9wdHMuZ3V0dGVyIDogMCkgKyBvZmZzZXQuaGVpZ2h0O1xuICAgICAgICBsZXQgbGVmdCA9IGNvbHNJblJvdyAqIHRpbGVXaWR0aCArIChjb2xzSW5Sb3cgPyBjb2xzSW5Sb3cgKiBzZWxmLm9wdHMuZ3V0dGVyIDogMCk7XG5cbiAgICAgICAgLy8gRGVzY3JpYmUgZ3JpZCBjZWxsIHNpemUgdGhyb3VnaCBibG9jayBjb3JuZXJzIGNvb3JkaW5hdGVzXG4gICAgICAgIGdyaWRJblJvdy5wdXNoKHtcbiAgICAgICAgICB0b3A6IHRvcCxcbiAgICAgICAgICBsZWZ0OiBsZWZ0LFxuICAgICAgICAgIGJvdHRvbTogdG9wICsgc2VsZi5vcHRzLnRpbGVIZWlnaHQsXG4gICAgICAgICAgcmlnaHQ6IGxlZnQgKyB0aWxlV2lkdGgsXG4gICAgICAgICAgcm93OiByb3dzLFxuICAgICAgICAgIGNvbDogY29sc0luUm93XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbHNJblJvdysrO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgcHVibGljIHNldFRpbGVzRGltZW5zaW9ucyhvbmx5UG9zaXRpb24sIGRyYWdnZWRUaWxlKTogYW55IHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBsZXQgY3VyckluZGV4ID0gMDtcbiAgICBsZXQgcHJldkNlbGw7XG5cbiAgICBpZiAob25seVBvc2l0aW9uKSB7XG4gICAgICBzZWxmLmNsZWFyRWxlbWVudHMoKTtcbiAgICB9XG5cbiAgICB0aGlzLnRpbGVzLmZvckVhY2goKHRpbGUpID0+IHtcbiAgICAgIGNvbnN0IHRpbGVTaXplID0gdGlsZS5nZXRTaXplKCk7XG4gICAgICBsZXQgc3RhcnRDZWxsO1xuICAgICAgbGV0IHdpZHRoO1xuICAgICAgbGV0IGhlaWdodDtcbiAgICAgIGxldCBjZWxscztcblxuICAgICAgdGlsZS51cGRhdGVFbGVtKCcucGlwLWRyYWdnYWJsZS10aWxlJyk7XG4gICAgICBpZiAodGlsZVNpemUuY29sU3BhbiA9PT0gMSkge1xuICAgICAgICBpZiAocHJldkNlbGwgJiYgcHJldkNlbGwuZWxlbS5zaXplLmNvbFNwYW4gPT09IDIgJiYgcHJldkNlbGwuZWxlbS5zaXplLnJvd1NwYW4gPT09IDEpIHtcbiAgICAgICAgICBzdGFydENlbGwgPSBzZWxmLmdldENlbGxzKHNlbGYuZ2V0Q2VsbEJ5UG9zaXRpb24ocHJldkNlbGwucm93LCBwcmV2Q2VsbC5jb2wgLSAxKSwgMSwgMSkuc3RhcnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RhcnRDZWxsID0gc2VsZi5nZXRDZWxscyhwcmV2Q2VsbCwgMSwgMSkuc3RhcnQ7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGlmICghb25seVBvc2l0aW9uKSB7XG4gICAgICAgICAgd2lkdGggPSBzdGFydENlbGwucmlnaHQgLSBzdGFydENlbGwubGVmdDtcbiAgICAgICAgICBoZWlnaHQgPSBzdGFydENlbGwuYm90dG9tIC0gc3RhcnRDZWxsLnRvcDtcbiAgICAgICAgfVxuXG4gICAgICAgIHByZXZDZWxsID0gc3RhcnRDZWxsO1xuXG4gICAgICAgIHNlbGYucmVzZXJ2ZUNlbGxzKHN0YXJ0Q2VsbCwgc3RhcnRDZWxsLCB0aWxlKTtcblxuICAgICAgICBjdXJySW5kZXgrKztcbiAgICAgIH0gZWxzZSBpZiAodGlsZVNpemUuY29sU3BhbiA9PT0gMikge1xuICAgICAgICBjZWxscyA9IHNlbGYuZ2V0Q2VsbHMocHJldkNlbGwsIHRpbGVTaXplLnJvd1NwYW4sIHRpbGVTaXplLmNvbFNwYW4pO1xuICAgICAgICBzdGFydENlbGwgPSBjZWxscy5zdGFydDtcblxuICAgICAgICBpZiAoIW9ubHlQb3NpdGlvbikge1xuICAgICAgICAgIGNvbnN0IGd1dHRlciA9IHRoaXMuaXNNb2JpbGVMYXlvdXQgPyB0aGlzLm9wdHMuZ3V0dGVyIDogMDtcblxuICAgICAgICAgIHdpZHRoID0gY2VsbHMuZW5kLnJpZ2h0IC0gY2VsbHMuc3RhcnQubGVmdCArIGd1dHRlcjtcbiAgICAgICAgICBoZWlnaHQgPSBjZWxscy5lbmQuYm90dG9tIC0gY2VsbHMuc3RhcnQudG9wO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJldkNlbGwgPSBjZWxscy5lbmQ7XG5cbiAgICAgICAgc2VsZi5yZXNlcnZlQ2VsbHMoY2VsbHMuc3RhcnQsIGNlbGxzLmVuZCwgdGlsZSk7XG5cbiAgICAgICAgY3VyckluZGV4ICs9IDI7XG4gICAgICB9XG5cbiAgICAgIC8vIFJlbmRlciBwcmV2aWV3XG4gICAgICAvLyB3aGlsZSB0aWxlcyBmcm9tIGdyb3VwIGlzIGRyYWdnZWRcbiAgICAgIGlmIChkcmFnZ2VkVGlsZSA9PT0gdGlsZSkge1xuICAgICAgICB0aWxlLnNldFByZXZpZXdQb3NpdGlvbih7XG4gICAgICAgICAgbGVmdDogc3RhcnRDZWxsLmxlZnQsXG4gICAgICAgICAgdG9wOiBzdGFydENlbGwudG9wXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFvbmx5UG9zaXRpb24pIHtcbiAgICAgICAgdGlsZS5zZXRTaXplKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgfVxuXG4gICAgICB0aWxlLnNldFBvc2l0aW9uKHN0YXJ0Q2VsbC5sZWZ0LCBzdGFydENlbGwudG9wKTtcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHB1YmxpYyBjYWxjQ29udGFpbmVySGVpZ2h0KG1pbkhlaWdodCA/OiBudW1iZXIpOiBhbnkge1xuICAgIGxldCBtYXhIZWlnaHRTaXplLCBtYXhXaWR0aFNpemU7XG5cbiAgICBpZiAoIXRoaXMudGlsZXMubGVuZ3RoKSB7XG4gICAgICBpZiAobWluSGVpZ2h0KSB7XG4gICAgICAgIHRoaXMuZWxlbS5zdHlsZS5oZWlnaHQgPSBtaW5IZWlnaHQgKyA0MCArICdweCc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIG1heEhlaWdodFNpemUgPSBfLm1heEJ5KHRoaXMudGlsZXMsICh0aWxlKSA9PiB7XG4gICAgICBjb25zdCB0aWxlU2l6ZSA9IHRpbGVbJ2dldFNpemUnXSgpO1xuICAgICAgcmV0dXJuIHRpbGVTaXplLnRvcCArIHRpbGVTaXplLmhlaWdodDtcbiAgICB9KVsnZ2V0U2l6ZSddKCk7XG5cbiAgICB0aGlzLmVsZW0uc3R5bGUuaGVpZ2h0ID0gbWF4SGVpZ2h0U2l6ZS50b3AgKyBtYXhIZWlnaHRTaXplLmhlaWdodCArICdweCc7XG5cbiAgICBpZiAodGhpcy5pbmxpbmUpIHtcbiAgICAgIG1heFdpZHRoU2l6ZSA9IF8ubWF4QnkodGhpcy50aWxlcywgKHRpbGUpID0+IHtcbiAgICAgICAgY29uc3QgdGlsZVNpemUgPSB0aWxlWydnZXRTaXplJ10oKTtcbiAgICAgICAgcmV0dXJuIHRpbGVTaXplLmxlZnQgKyB0aWxlU2l6ZS53aWR0aDtcbiAgICAgIH0pWydnZXRTaXplJ10oKTtcblxuICAgICAgdGhpcy5lbGVtLnN0eWxlLndpZHRoID0gbWF4V2lkdGhTaXplLmxlZnQgKyBtYXhXaWR0aFNpemUud2lkdGggKyAncHgnO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHB1YmxpYyBnZXRUaWxlQnlOb2RlKG5vZGUpOiBhbnkge1xuICAgIGNvbnN0IGZvdW5kVGlsZSA9IHRoaXMudGlsZXMuZmlsdGVyKCh0aWxlKSA9PiB7XG4gICAgICByZXR1cm4gbm9kZSA9PT0gdGlsZS5nZXRFbGVtKCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZm91bmRUaWxlLmxlbmd0aCA/IGZvdW5kVGlsZVswXSA6IG51bGw7XG4gIH07XG5cbiAgcHVibGljIGdldFRpbGVCeUNvb3JkaW5hdGVzKGNvb3JkcywgZHJhZ2dlZFRpbGUpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLnRpbGVzXG4gICAgICAuZmlsdGVyKCh0aWxlKSA9PiB7XG4gICAgICAgIGNvbnN0IHRpbGVTaXplID0gdGlsZS5nZXRTaXplKCk7XG5cbiAgICAgICAgcmV0dXJuIHRpbGUgIT09IGRyYWdnZWRUaWxlICYmXG4gICAgICAgICAgdGlsZVNpemUubGVmdCA8PSBjb29yZHMubGVmdCAmJiBjb29yZHMubGVmdCA8PSAodGlsZVNpemUubGVmdCArIHRpbGVTaXplLndpZHRoKSAmJlxuICAgICAgICAgIHRpbGVTaXplLnRvcCA8PSBjb29yZHMudG9wICYmIGNvb3Jkcy50b3AgPD0gKHRpbGVTaXplLnRvcCArIHRpbGVTaXplLmhlaWdodCk7XG4gICAgICB9KVswXSB8fCBudWxsO1xuICB9O1xuXG4gIHB1YmxpYyBnZXRUaWxlSW5kZXgodGlsZSk6IGFueSB7XG4gICAgcmV0dXJuIF8uZmluZEluZGV4KHRoaXMudGlsZXMsIHRpbGUpO1xuICB9O1xuXG4gIHB1YmxpYyBzd2FwVGlsZXMobW92ZWRUaWxlLCBiZWZvcmVUaWxlKTogYW55IHtcbiAgICBjb25zdCBtb3ZlZFRpbGVJbmRleCA9IF8uZmluZEluZGV4KHRoaXMudGlsZXMsIG1vdmVkVGlsZSk7XG4gICAgY29uc3QgYmVmb3JlVGlsZUluZGV4ID0gXy5maW5kSW5kZXgodGhpcy50aWxlcywgYmVmb3JlVGlsZSk7XG5cbiAgICB0aGlzLnRpbGVzLnNwbGljZShtb3ZlZFRpbGVJbmRleCwgMSk7XG4gICAgdGhpcy50aWxlcy5zcGxpY2UoYmVmb3JlVGlsZUluZGV4LCAwLCBtb3ZlZFRpbGUpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgcHVibGljIHJlbW92ZVRpbGUocmVtb3ZlVGlsZSk6IGFueSB7XG4gICAgbGV0IGRyb3BwZWRUaWxlO1xuXG4gICAgdGhpcy50aWxlcy5mb3JFYWNoKCh0aWxlLCBpbmRleCwgdGlsZXMpID0+IHtcbiAgICAgIGlmICh0aWxlID09PSByZW1vdmVUaWxlKSB7XG4gICAgICAgIGRyb3BwZWRUaWxlID0gdGlsZXMuc3BsaWNlKGluZGV4LCAxKVswXTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRyb3BwZWRUaWxlO1xuICB9O1xuXG4gIHB1YmxpYyB1cGRhdGVUaWxlT3B0aW9ucyhvcHRzKTogYW55IHtcbiAgICBjb25zdCBpbmRleCA9IF8uZmluZEluZGV4KHRoaXMudGlsZXMsICh0aWxlKSA9PiB7XG4gICAgICByZXR1cm4gdGlsZVsnZ2V0T3B0aW9ucyddKCkgPT09IG9wdHM7XG4gICAgfSk7XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICB0aGlzLnRpbGVzW2luZGV4XS5zZXRPcHRpb25zKG9wdHMpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xufVxuXG5cbmFuZ3VsYXJcbiAgLm1vZHVsZSgncGlwRHJhZ2dhYmxlVGlsZXNHcm91cCcpXG4gIC5zZXJ2aWNlKCdwaXBUaWxlc0dyaWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0aWxlcywgb3B0aW9ucywgY29sdW1ucywgZWxlbSkge1xuICAgICAgY29uc3QgbmV3R3JpZCA9IG5ldyBUaWxlc0dyaWRTZXJ2aWNlKHRpbGVzLCBvcHRpb25zLCBjb2x1bW5zLCBlbGVtKTtcblxuICAgICAgcmV0dXJuIG5ld0dyaWQ7XG4gICAgfVxuICB9KTsiLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgncGlwRHJhZ2dhYmxlVGlsZXNHcm91cCcsIFtdKTtcblxuaW1wb3J0ICcuL1RpbGVHcm91cERpcmVjdGl2ZSc7XG5pbXBvcnQgJy4vVGlsZUdyb3VwU2VydmljZSc7IiwiaW1wb3J0IHsgSURhc2hib2FyZFByb3ZpZGVyLCBJRGFzaGJvYXJkVGlsZVR5cGVPcHRpb25zLCBJRGFzaGJvYXJkU2VydmljZSB9IGZyb20gJy4vSURhc2hib2FyZFNlcnZpY2UnO1xuXG57XG4gICAgY2xhc3MgRGFzaGJvYXJkUHJvdmlkZXIgaW1wbGVtZW50cyBJRGFzaGJvYXJkUHJvdmlkZXIge1xuICAgICAgICBwcml2YXRlIHRpbGVzVHlwZXM6IElEYXNoYm9hcmRUaWxlVHlwZU9wdGlvbnNbXSA9IFtdO1xuICAgICAgICBwcml2YXRlIF9zZXJ2aWNlOiBJRGFzaGJvYXJkU2VydmljZTtcblxuICAgICAgICBjb25zdHJ1Y3RvciggKSB7IH1cblxuICAgICAgICBwdWJsaWMgcmVnaXN0ZXJUaWxlVHlwZShuZXdUaWxlVHlwZU9wdGlvbnM6IElEYXNoYm9hcmRUaWxlVHlwZU9wdGlvbnMpIHtcbiAgICAgICAgICAgIGxldCBuZXdDb250cm9sbGVyTmFtZTogc3RyaW5nO1xuICAgICAgICAgICAgbGV0IG5ld1RlbXBsYXRlVXJsOiBzdHJpbmc7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgbmV3VGlsZVR5cGVPcHRpb25zLmNvbnRyb2xsZXIgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgbmV3Q29udHJvbGxlck5hbWUgPSAncGlwJyArIG5ld1RpbGVUeXBlT3B0aW9ucy5uYW1lLnN1YnN0cigwLCAxKS50b1VwcGVyQ2FzZSgpICsgbmV3VGlsZVR5cGVPcHRpb25zLm5hbWUuc3Vic3RyKDEpICsgJ1RpbGUnO1xuXG4gICAgICAgICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ3BpcERhc2hib2FyZCcpLmNvbnRyb2xsZXIobmV3Q29udHJvbGxlck5hbWUsIDxhbmd1bGFyLklDb250cm9sbGVyQ29uc3RydWN0b3I+bmV3VGlsZVR5cGVPcHRpb25zLmNvbnRyb2xsZXIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIW5ld1RpbGVUeXBlT3B0aW9ucy50ZW1wbGF0ZVVybCAmJiBuZXdUaWxlVHlwZU9wdGlvbnMudGVtcGxhdGUpIHtcbiAgICAgICAgICAgICAgICBuZXdUZW1wbGF0ZVVybCA9ICdwaXAnICsgbmV3VGlsZVR5cGVPcHRpb25zLm5hbWUuc3Vic3RyKDAsIDEpLnRvVXBwZXJDYXNlKCkgKyBuZXdUaWxlVHlwZU9wdGlvbnMubmFtZS5zdWJzdHIoMSkgKyAnVGlsZS5odG1sJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy50aWxlc1R5cGVzLnB1c2goe1xuICAgICAgICAgICAgICAgIG5hbWU6IG5ld1RpbGVUeXBlT3B0aW9ucy5uYW1lLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IG5ld0NvbnRyb2xsZXJOYW1lIHx8IG5ld1RpbGVUeXBlT3B0aW9ucy5jb250cm9sbGVyLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBuZXdUZW1wbGF0ZVVybCB8fCBuZXdUaWxlVHlwZU9wdGlvbnMudGVtcGxhdGVVcmwsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiBuZXdUaWxlVHlwZU9wdGlvbnMuY29udHJvbGxlckFzLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlOiBuZXdUaWxlVHlwZU9wdGlvbnMudGVtcGxhdGUsXG4gICAgICAgICAgICAgICAgY2xhc3M6IG5ld1RpbGVUeXBlT3B0aW9ucy5jbGFzc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgJGdldCgkdGVtcGxhdGVDYWNoZSkge1xuICAgICAgICAgICAgXCJuZ0luamVjdFwiO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5fc2VydmljZSA9PSBudWxsKVxuICAgICAgICAgICAgICAgIHRoaXMuX3NlcnZpY2UgPSBuZXcgRGFzaGJvYXJkU2VydmljZSh0aGlzLnRpbGVzVHlwZXMsICR0ZW1wbGF0ZUNhY2hlKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NlcnZpY2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjbGFzcyBEYXNoYm9hcmRTZXJ2aWNlIHtcbiAgICAgICAgY29uc3RydWN0b3IoXG4gICAgICAgICAgICBwcml2YXRlIHRpbGVUeXBlczogSURhc2hib2FyZFRpbGVUeXBlT3B0aW9uc1tdLFxuICAgICAgICAgICAgcHJpdmF0ZSAkdGVtcGxhdGVDYWNoZTogYW5ndWxhci5JVGVtcGxhdGVDYWNoZVNlcnZpY2VcbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLnB1dFRlbXBsYXRlcygpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBwdXRUZW1wbGF0ZXMoKTogdm9pZCB7XG4gICAgICAgICAgICBfLmVhY2godGhpcy50aWxlVHlwZXMsICh0eXBlOiBJRGFzaGJvYXJkVGlsZVR5cGVPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGUudGVtcGxhdGUpIHRoaXMuJHRlbXBsYXRlQ2FjaGUucHV0KHR5cGUudGVtcGxhdGVVcmwsIHR5cGUudGVtcGxhdGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZ2V0VGlsZVR5cGVzKCk6IElEYXNoYm9hcmRUaWxlVHlwZU9wdGlvbnNbXSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50aWxlVHlwZXM7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZ2V0VHlwZUJ5TmFtZShuYW1lOiBzdHJpbmcpOiBJRGFzaGJvYXJkVGlsZVR5cGVPcHRpb25zIHtcbiAgICAgICAgICAgIHJldHVybiBfLmZpbmQodGhpcy50aWxlVHlwZXMsICh0eXBlOiBJRGFzaGJvYXJkVGlsZVR5cGVPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGUubmFtZSA9PT0gbmFtZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgY29uZmlnID0gZnVuY3Rpb24gKCRjb250cm9sbGVyUHJvdmlkZXIpIHtcbiAgICAgICAgbGV0IGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdwaXBEYXNoYm9hcmQnKTtcblxuICAgICAgICAoPGFueT5hcHApLmNvbnRyb2xsZXIgPSBmdW5jdGlvbiAobmFtZTogc3RyaW5nLCBjb25zdHJ1Y3RvcjogYW55KTogbmcuSU1vZHVsZSB7XG4gICAgICAgICAgICAkY29udHJvbGxlclByb3ZpZGVyLnJlZ2lzdGVyKG5hbWUsIGNvbnN0cnVjdG9yKTtcbiAgICAgICAgICAgIHJldHVybiAodGhpcyk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdwaXBEYXNoYm9hcmQnKVxuICAgICAgICAuY29uZmlnKGNvbmZpZylcbiAgICAgICAgLnByb3ZpZGVyKCdwaXBEYXNoYm9hcmQnLCBEYXNoYm9hcmRQcm92aWRlcik7XG59IiwiZXhwb3J0IGludGVyZmFjZSBJVGlsZVRlbXBsYXRlU2VydmljZSB7XG4gICAgZ2V0VGVtcGxhdGUoc291cmNlLCB0cGwgPyAsIHRpbGVTY29wZSA/ICwgc3RyaWN0Q29tcGlsZSA/ICk6IGFueTtcbiAgICBzZXRJbWFnZU1hcmdpbkNTUygkZWxlbWVudCwgaW1hZ2UpOiB2b2lkO1xufSBcblxue1xuICAgIGNsYXNzIHRpbGVUZW1wbGF0ZVNlcnZpY2UgaW1wbGVtZW50cyBJVGlsZVRlbXBsYXRlU2VydmljZSB7XG4gICAgICAgIHByaXZhdGUgXyRpbnRlcnBvbGF0ZTogYW5ndWxhci5JSW50ZXJwb2xhdGVTZXJ2aWNlO1xuICAgICAgICBwcml2YXRlIF8kY29tcGlsZTogYW5ndWxhci5JQ29tcGlsZVNlcnZpY2U7XG4gICAgICAgIHByaXZhdGUgXyR0ZW1wbGF0ZVJlcXVlc3Q6IGFuZ3VsYXIuSVRlbXBsYXRlUmVxdWVzdFNlcnZpY2U7XG5cbiAgICAgICAgY29uc3RydWN0b3IoXG4gICAgICAgICAgICAkaW50ZXJwb2xhdGU6IGFuZ3VsYXIuSUludGVycG9sYXRlU2VydmljZSxcbiAgICAgICAgICAgICRjb21waWxlOiBhbmd1bGFyLklDb21waWxlU2VydmljZSxcbiAgICAgICAgICAgICR0ZW1wbGF0ZVJlcXVlc3Q6IGFuZ3VsYXIuSVRlbXBsYXRlUmVxdWVzdFNlcnZpY2VcbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLl8kaW50ZXJwb2xhdGUgPSAkaW50ZXJwb2xhdGU7XG4gICAgICAgICAgICB0aGlzLl8kY29tcGlsZSA9ICRjb21waWxlO1xuICAgICAgICAgICAgdGhpcy5fJHRlbXBsYXRlUmVxdWVzdCA9ICR0ZW1wbGF0ZVJlcXVlc3Q7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZ2V0VGVtcGxhdGUoc291cmNlLCB0cGwgPyAsIHRpbGVTY29wZSA/ICwgc3RyaWN0Q29tcGlsZSA/ICk6IGFueSB7XG4gICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGUsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmwsXG4gICAgICAgICAgICAgICAgdHlwZVxuICAgICAgICAgICAgfSA9IHNvdXJjZTtcbiAgICAgICAgICAgIGxldCByZXN1bHQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW50ZXJwb2xhdGVkID0gdHBsID8gdGhpcy5fJGludGVycG9sYXRlKHRwbCkoc291cmNlKSA6IHRoaXMuXyRpbnRlcnBvbGF0ZSh0ZW1wbGF0ZSkoc291cmNlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyaWN0Q29tcGlsZSA9PSB0cnVlID9cbiAgICAgICAgICAgICAgICAgICAgKHRpbGVTY29wZSA/IHRoaXMuXyRjb21waWxlKGludGVycG9sYXRlZCkodGlsZVNjb3BlKSA6IHRoaXMuXyRjb21waWxlKGludGVycG9sYXRlZCkpIDpcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJwb2xhdGVkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGVtcGxhdGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGlsZVNjb3BlID8gdGhpcy5fJGNvbXBpbGUodGVtcGxhdGUpKHRpbGVTY29wZSkgOiB0aGlzLl8kY29tcGlsZSh0ZW1wbGF0ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0ZW1wbGF0ZVVybCkge1xuICAgICAgICAgICAgICAgIHRoaXMuXyR0ZW1wbGF0ZVJlcXVlc3QodGVtcGxhdGVVcmwsIGZhbHNlKS50aGVuKChodG1sKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRpbGVTY29wZSA/IHRoaXMuXyRjb21waWxlKGh0bWwpKHRpbGVTY29wZSkgOiB0aGlzLl8kY29tcGlsZShodG1sKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzZXRJbWFnZU1hcmdpbkNTUygkZWxlbWVudCwgaW1hZ2UpIHtcbiAgICAgICAgICAgIGxldFxuICAgICAgICAgICAgICAgIGNvbnRhaW5lcldpZHRoID0gJGVsZW1lbnQud2lkdGggPyAkZWxlbWVudC53aWR0aCgpIDogJGVsZW1lbnQuY2xpZW50V2lkdGgsXG4gICAgICAgICAgICAgICAgY29udGFpbmVySGVpZ2h0ID0gJGVsZW1lbnQuaGVpZ2h0ID8gJGVsZW1lbnQuaGVpZ2h0KCkgOiAkZWxlbWVudC5jbGllbnRIZWlnaHQsXG4gICAgICAgICAgICAgICAgaW1hZ2VXaWR0aCA9IChpbWFnZVswXSA/IGltYWdlWzBdLm5hdHVyYWxXaWR0aCA6IGltYWdlLm5hdHVyYWxXaWR0aCkgfHwgaW1hZ2Uud2lkdGgsXG4gICAgICAgICAgICAgICAgaW1hZ2VIZWlnaHQgPSAoaW1hZ2VbMF0gPyBpbWFnZVswXS5uYXR1cmFsSGVpZ2h0IDogaW1hZ2UubmF0dXJhbFdpZHRoKSB8fCBpbWFnZS5oZWlnaHQsXG4gICAgICAgICAgICAgICAgbWFyZ2luID0gMCxcbiAgICAgICAgICAgICAgICBjc3NQYXJhbXMgPSB7fTtcblxuICAgICAgICAgICAgaWYgKChpbWFnZVdpZHRoIC8gY29udGFpbmVyV2lkdGgpID4gKGltYWdlSGVpZ2h0IC8gY29udGFpbmVySGVpZ2h0KSkge1xuICAgICAgICAgICAgICAgIG1hcmdpbiA9IC0oKGltYWdlV2lkdGggLyBpbWFnZUhlaWdodCAqIGNvbnRhaW5lckhlaWdodCAtIGNvbnRhaW5lcldpZHRoKSAvIDIpO1xuICAgICAgICAgICAgICAgIGNzc1BhcmFtc1snbWFyZ2luLWxlZnQnXSA9ICcnICsgbWFyZ2luICsgJ3B4JztcbiAgICAgICAgICAgICAgICBjc3NQYXJhbXNbJ2hlaWdodCddID0gJycgKyBjb250YWluZXJIZWlnaHQgKyAncHgnOyAvLycxMDAlJztcbiAgICAgICAgICAgICAgICBjc3NQYXJhbXNbJ3dpZHRoJ10gPSAnJyArIGltYWdlV2lkdGggKiBjb250YWluZXJIZWlnaHQgLyBpbWFnZUhlaWdodCArICdweCc7IC8vJzEwMCUnO1xuICAgICAgICAgICAgICAgIGNzc1BhcmFtc1snbWFyZ2luLXRvcCddID0gJyc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1hcmdpbiA9IC0oKGltYWdlSGVpZ2h0IC8gaW1hZ2VXaWR0aCAqIGNvbnRhaW5lcldpZHRoIC0gY29udGFpbmVySGVpZ2h0KSAvIDIpO1xuICAgICAgICAgICAgICAgIGNzc1BhcmFtc1snbWFyZ2luLXRvcCddID0gJycgKyBtYXJnaW4gKyAncHgnO1xuICAgICAgICAgICAgICAgIGNzc1BhcmFtc1snaGVpZ2h0J10gPSAnJyArIGltYWdlSGVpZ2h0ICogY29udGFpbmVyV2lkdGggLyBpbWFnZVdpZHRoICsgJ3B4JzsgLy8nMTAwJSc7XG4gICAgICAgICAgICAgICAgY3NzUGFyYW1zWyd3aWR0aCddID0gJycgKyBjb250YWluZXJXaWR0aCArICdweCc7IC8vJzEwMCUnO1xuICAgICAgICAgICAgICAgIGNzc1BhcmFtc1snbWFyZ2luLWxlZnQnXSA9ICcnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkKGltYWdlKS5jc3MoY3NzUGFyYW1zKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGltYWdlIGxvYWQgZGlyZWN0aXZlIFRPRE86IHJlbW92ZSB0byBwaXBJbWFnZVV0aWxzXG4gICAgY29uc3QgSW1hZ2VMb2FkID0gZnVuY3Rpb24gSW1hZ2VMb2FkKCRwYXJzZTogbmcuSVBhcnNlU2VydmljZSk6IG5nLklEaXJlY3RpdmUge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZTogbmcuSVNjb3BlLCBlbGVtZW50OiBKUXVlcnksIGF0dHJzOiBhbnkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjYWxsYmFjayA9ICRwYXJzZShhdHRycy5waXBJbWFnZUxvYWQpO1xuXG4gICAgICAgICAgICAgICAgZWxlbWVudC5iaW5kKCdsb2FkJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHNjb3BlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkZXZlbnQ6IGV2ZW50XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdwaXBEYXNoYm9hcmQnKVxuICAgICAgICAuc2VydmljZSgncGlwVGlsZVRlbXBsYXRlJywgdGlsZVRlbXBsYXRlU2VydmljZSlcbiAgICAgICAgLmRpcmVjdGl2ZSgncGlwSW1hZ2VMb2FkJywgSW1hZ2VMb2FkKTtcbn0iLCIoZnVuY3Rpb24obW9kdWxlKSB7XG50cnkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgncGlwRGFzaGJvYXJkLlRlbXBsYXRlcycpO1xufSBjYXRjaCAoZSkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgncGlwRGFzaGJvYXJkLlRlbXBsYXRlcycsIFtdKTtcbn1cbm1vZHVsZS5ydW4oWyckdGVtcGxhdGVDYWNoZScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dCgnYWRkX3RpbGVfZGlhbG9nL0FkZFRpbGUuaHRtbCcsXG4gICAgJzxtZC1kaWFsb2cgY2xhc3M9XCJwaXAtZGlhbG9nIHBpcC1hZGQtY29tcG9uZW50LWRpYWxvZ1wiPjxtZC1kaWFsb2ctY29udGVudCBjbGFzcz1cImxheW91dC1jb2x1bW5cIj48ZGl2IGNsYXNzPVwidGhlbWUtZGl2aWRlciBwMTYgZmxleC1hdXRvXCI+PGgzIGNsYXNzPVwiaGlkZS14cyBtMCBibTE2IHRoZW1lLXRleHQtcHJpbWFyeVwiIGhpZGUteHM9XCJcIj57eyBcXCdEQVNIQk9BUkRfQUREX1RJTEVfRElBTE9HX1RJVExFXFwnIHwgdHJhbnNsYXRlIH19PG1kLWlucHV0LWNvbnRhaW5lciBjbGFzcz1cImxheW91dC1yb3cgZmxleC1hdXRvIG0wIHRtMTZcIj48bWQtc2VsZWN0IGNsYXNzPVwiZmxleC1hdXRvIG0wIHRoZW1lLXRleHQtcHJpbWFyeVwiIG5nLW1vZGVsPVwiZGlhbG9nQ3RybC5hY3RpdmVHcm91cEluZGV4XCIgcGxhY2Vob2xkZXI9XCJ7eyBcXCdEQVNIQk9BUkRfQUREX1RJTEVfRElBTE9HX0NSRUFURV9ORVdfR1JPVVBcXCcgfCB0cmFuc2xhdGUgfX1cIiBhcmlhLWxhYmVsPVwiR3JvdXBcIj48bWQtb3B0aW9uIG5nLXZhbHVlPVwiJGluZGV4XCIgbmctcmVwZWF0PVwiZ3JvdXAgaW4gZGlhbG9nQ3RybC5ncm91cHNcIj57eyBncm91cCB9fTwvbWQtb3B0aW9uPjwvbWQtc2VsZWN0PjwvbWQtaW5wdXQtY29udGFpbmVyPjwvaDM+PC9kaXY+PGRpdiBjbGFzcz1cInBpcC1ib2R5IHBpcC1zY3JvbGwgcDAgZmxleC1hdXRvXCI+PHAgY2xhc3M9XCJtZC1ib2R5LTEgdGhlbWUtdGV4dC1zZWNvbmRhcnkgbTAgbHAxNiBycDE2XCI+e3sgXFwnREFTSEJPQVJEX0FERF9USUxFX0RJQUxPR19VU0VfSE9UX0tFWVNcXCcgfCB0cmFuc2xhdGUgfX08L3A+PG1kLWxpc3QgbmctaW5pdD1cImdyb3VwSW5kZXggPSAkaW5kZXhcIiBuZy1yZXBlYXQ9XCJncm91cCBpbiBkaWFsb2dDdHJsLmRlZmF1bHRUaWxlc1wiPjxtZC1saXN0LWl0ZW0gY2xhc3M9XCJsYXlvdXQtcm93IHBpcC1saXN0LWl0ZW0gbHAxNiBycDE2XCIgbmctcmVwZWF0PVwiaXRlbSBpbiBncm91cFwiPjxkaXYgY2xhc3M9XCJpY29uLWhvbGRlciBmbGV4LW5vbmVcIj48bWQtaWNvbiBtZC1zdmctaWNvbj1cImljb25zOnt7OjogaXRlbS5pY29uIH19XCI+PC9tZC1pY29uPjxkaXYgY2xhc3M9XCJwaXAtYmFkZ2UgdGhlbWUtYmFkZ2UgbWQtd2FyblwiIG5nLWlmPVwiaXRlbS5hbW91bnRcIj48c3Bhbj57eyBpdGVtLmFtb3VudCB9fTwvc3Bhbj48L2Rpdj48L2Rpdj48c3BhbiBjbGFzcz1cImZsZXgtYXV0byBsbTI0IHRoZW1lLXRleHQtcHJpbWFyeVwiPnt7OjogaXRlbS50aXRsZSB9fTwvc3Bhbj48bWQtYnV0dG9uIGNsYXNzPVwibWQtaWNvbi1idXR0b24gZmxleC1ub25lXCIgbmctY2xpY2s9XCJkaWFsb2dDdHJsLmVuY3JlYXNlKGdyb3VwSW5kZXgsICRpbmRleClcIiBhcmlhLWxhYmVsPVwiRW5jcmVhc2VcIj48bWQtaWNvbiBtZC1zdmctaWNvbj1cImljb25zOnBsdXMtY2lyY2xlXCI+PC9tZC1pY29uPjwvbWQtYnV0dG9uPjxtZC1idXR0b24gY2xhc3M9XCJtZC1pY29uLWJ1dHRvbiBmbGV4LW5vbmVcIiBuZy1jbGljaz1cImRpYWxvZ0N0cmwuZGVjcmVhc2UoZ3JvdXBJbmRleCwgJGluZGV4KVwiIGFyaWEtbGFiZWw9XCJEZWNyZWFzZVwiPjxtZC1pY29uIG1kLXN2Zy1pY29uPVwiaWNvbnM6bWludXMtY2lyY2xlXCI+PC9tZC1pY29uPjwvbWQtYnV0dG9uPjwvbWQtbGlzdC1pdGVtPjxtZC1kaXZpZGVyIGNsYXNzPVwibG03MiB0bTggYm04XCIgbmctaWY9XCJncm91cEluZGV4ICE9PSAoZGlhbG9nQ3RybC5kZWZhdWx0VGlsZXMubGVuZ3RoIC0gMSlcIj48L21kLWRpdmlkZXI+PC9tZC1saXN0PjwvZGl2PjwvbWQtZGlhbG9nLWNvbnRlbnQ+PG1kLWRpYWxvZy1hY3Rpb25zIGNsYXNzPVwiZmxleC1ub25lIGxheW91dC1hbGlnbi1lbmQtY2VudGVyIHRoZW1lLWRpdmlkZXIgZGl2aWRlci10b3AgdGhlbWUtdGV4dC1wcmltYXJ5XCI+PG1kLWJ1dHRvbiBuZy1jbGljaz1cImRpYWxvZ0N0cmwuY2FuY2VsKClcIiBhcmlhLWxhYmVsPVwiQ2FuY2VsXCI+e3sgXFwnQ0FOQ0VMXFwnIHwgdHJhbnNsYXRlIH19PC9tZC1idXR0b24+PG1kLWJ1dHRvbiBuZy1jbGljaz1cImRpYWxvZ0N0cmwuYWRkKClcIiBuZy1kaXNhYmxlZD1cImRpYWxvZ0N0cmwudG90YWxUaWxlc3MgPT09IDBcIiBhcmlhbC1sYWJlbD1cIkFkZFwiPnt7IFxcJ0FERFxcJyB8IHRyYW5zbGF0ZSB9fTwvbWQtYnV0dG9uPjwvbWQtZGlhbG9nLWFjdGlvbnM+PC9tZC1kaWFsb2c+Jyk7XG59XSk7XG59KSgpO1xuXG4oZnVuY3Rpb24obW9kdWxlKSB7XG50cnkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgncGlwRGFzaGJvYXJkLlRlbXBsYXRlcycpO1xufSBjYXRjaCAoZSkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgncGlwRGFzaGJvYXJkLlRlbXBsYXRlcycsIFtdKTtcbn1cbm1vZHVsZS5ydW4oWyckdGVtcGxhdGVDYWNoZScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dCgnY29tbW9uX3RpbGUvRHluYW1pY1RpbGUuaHRtbCcsXG4gICAgJzxwaXAtdGlsZS1tZW51IHBpcC1tZW51PVwiJGN0cmwub3B0aW9ucy5tZW51XCIgbmctaWY9XCIhJGN0cmwub3B0aW9ucy5oaWRlTWVudVwiPjwvcGlwLXRpbGUtbWVudT48ZGl2IGNsYXNzPVwicGlwLXRpbGUtY29udGVudCB7eyAkY3RybC5jb2xvciB9fSBsYXlvdXQtY29sdW1uXCIgbmctY2xhc3M9XCJ7IHNtYWxsOiAkY3RybC5vcHRpb25zLnNpemUuY29sU3BhbiA9PSAxICYmICRjdHJsLm9wdGlvbnMuc2l6ZS5yb3dTcGFuID09IDEsIG1lZGl1bTogJGN0cmwub3B0aW9ucy5zaXplLmNvbFNwYW4gPT0gMiAmJiAkY3RybC5vcHRpb25zLnNpemUucm93U3BhbiA9PSAxLCBiaWc6ICRjdHJsLm9wdGlvbnMuc2l6ZS5jb2xTcGFuID09IDIgJiYgJGN0cmwub3B0aW9ucy5zaXplLnJvd1NwYW4gPT0gMiB9XCI+PHBpcC1zcGVjaWZpYy10ZW1wbGF0ZT48L3BpcC1zcGVjaWZpYy10ZW1wbGF0ZT48L2Rpdj4nKTtcbn1dKTtcbn0pKCk7XG5cbihmdW5jdGlvbihtb2R1bGUpIHtcbnRyeSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdwaXBEYXNoYm9hcmQuVGVtcGxhdGVzJyk7XG59IGNhdGNoIChlKSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdwaXBEYXNoYm9hcmQuVGVtcGxhdGVzJywgW10pO1xufVxubW9kdWxlLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KCdjb25maWdfdGlsZV9kaWFsb2cvQ29uZmlnRGlhbG9nLmh0bWwnLFxuICAgICc8bWQtZGlhbG9nIGNsYXNzPVwicGlwLWRpYWxvZyBwaXAtdGlsZS1jb25maWctZGlhbG9nIHt7IHZtLnBhcmFtcy5kaWFsb2dDbGFzcyB9fVwiIHdpZHRoPVwiNDAwXCIgbWQtdGhlbWU9XCJ7e3ZtLnRoZW1lfX1cIj48cGlwLXRpbGUtY29uZmlnLWV4dGVuZC1jb21wb25lbnQgY2xhc3M9XCJsYXlvdXQtY29sdW1uXCIgcGlwLWRpYWxvZy1zY29wZT1cInZtXCIgcGlwLWV4dGVuc2lvbi11cmw9XCJ2bS5leHRlbnNpb25VcmxcIiBwaXAtYXBwbHk9XCJ2bS5vbkFwcGx5KHVwZGF0ZWREYXRhKVwiPjwvcGlwLXRpbGUtY29uZmlnLWV4dGVuZC1jb21wb25lbnQ+PC9tZC1kaWFsb2c+Jyk7XG59XSk7XG59KSgpO1xuXG4oZnVuY3Rpb24obW9kdWxlKSB7XG50cnkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgncGlwRGFzaGJvYXJkLlRlbXBsYXRlcycpO1xufSBjYXRjaCAoZSkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgncGlwRGFzaGJvYXJkLlRlbXBsYXRlcycsIFtdKTtcbn1cbm1vZHVsZS5ydW4oWyckdGVtcGxhdGVDYWNoZScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dCgnY29uZmlnX3RpbGVfZGlhbG9nL0NvbmZpZ0RpYWxvZ0V4dGVuZENvbXBvbmVudC5odG1sJyxcbiAgICAnPGgzIGNsYXNzPVwidG0wIGZsZXgtbm9uZVwiPnt7IFxcJ0RBU0hCT0FSRF9USUxFX0NPTkZJR19ESUFMT0dfVElUTEVcXCcgfCB0cmFuc2xhdGUgfX08L2gzPjxkaXYgY2xhc3M9XCJwaXAtYm9keSBwaXAtc2Nyb2xsIHAxNiBicDAgZmxleC1hdXRvXCI+PHBpcC1leHRlbnNpb24tcG9pbnQ+PC9waXAtZXh0ZW5zaW9uLXBvaW50PjxwaXAtdG9nZ2xlLWJ1dHRvbnMgY2xhc3M9XCJibTE2XCIgbmctaWY9XCIhJGN0cmwuaGlkZVNpemVzXCIgcGlwLWJ1dHRvbnM9XCIkY3RybC5zaXplc1wiIG5nLW1vZGVsPVwiJGN0cmwuc2l6ZUlkXCI+PC9waXAtdG9nZ2xlLWJ1dHRvbnM+PHBpcC1jb2xvci1waWNrZXIgbmctaWY9XCIhJGN0cmwuaGlkZUNvbG9yc1wiIHBpcC1jb2xvcnM9XCIkY3RybC5jb2xvcnNcIiBuZy1tb2RlbD1cIiRjdHJsLmNvbG9yXCI+PC9waXAtY29sb3ItcGlja2VyPjwvZGl2PjxkaXYgY2xhc3M9XCJwaXAtZm9vdGVyIGZsZXgtbm9uZVwiPjxkaXY+PG1kLWJ1dHRvbiBjbGFzcz1cIm1kLWFjY2VudFwiIG5nLWNsaWNrPVwiJGN0cmwub25DYW5jZWwoKVwiPnt7IFxcJ0NBTkNFTFxcJyB8IHRyYW5zbGF0ZSB9fTwvbWQtYnV0dG9uPjxtZC1idXR0b24gY2xhc3M9XCJtZC1hY2NlbnRcIiBuZy1jbGljaz1cIiRjdHJsLm9uQXBwbHkoKVwiPnt7IFxcJ0FQUExZXFwnIHwgdHJhbnNsYXRlIH19PC9tZC1idXR0b24+PC9kaXY+PC9kaXY+Jyk7XG59XSk7XG59KSgpO1xuXG4oZnVuY3Rpb24obW9kdWxlKSB7XG50cnkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgncGlwRGFzaGJvYXJkLlRlbXBsYXRlcycpO1xufSBjYXRjaCAoZSkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgncGlwRGFzaGJvYXJkLlRlbXBsYXRlcycsIFtdKTtcbn1cbm1vZHVsZS5ydW4oWyckdGVtcGxhdGVDYWNoZScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dCgnZGFzaGJvYXJkL0Rhc2hib2FyZC5odG1sJyxcbiAgICAnPG1kLWJ1dHRvbiBjbGFzcz1cIm1kLWFjY2VudCBtZC1yYWlzZWQgbWQtZmFiIGxheW91dC1jb2x1bW4gbGF5b3V0LWFsaWduLWNlbnRlci1jZW50ZXJcIiBhcmlhLWxhYmVsPVwiQWRkIGNvbXBvbmVudFwiIG5nLWNsaWNrPVwiJGN0cmwuYWRkQ29tcG9uZW50KClcIj48bWQtaWNvbiBtZC1zdmctaWNvbj1cImljb25zOnBsdXNcIiBjbGFzcz1cIm1kLWhlYWRsaW5lIGNlbnRlcmVkLWFkZC1pY29uXCI+PC9tZC1pY29uPjwvbWQtYnV0dG9uPjxkaXYgY2xhc3M9XCJwaXAtZHJhZ2dhYmxlLWdyaWQtaG9sZGVyXCI+PHBpcC1kcmFnZ2FibGUtZ3JpZCBwaXAtdGlsZXMtdGVtcGxhdGVzPVwiJGN0cmwuZ3JvdXBlZFdpZGdldHNcIiBwaXAtdGlsZXMtY29udGV4dD1cIiRjdHJsLndpZGdldHNDb250ZXh0XCIgcGlwLWRyYWdnYWJsZS1ncmlkPVwiJGN0cmwuZHJhZ2dhYmxlR3JpZE9wdGlvbnNcIiBwaXAtZ3JvdXAtbWVudS1hY3Rpb25zPVwiJGN0cmwuZ3JvdXBNZW51QWN0aW9uc1wiPjwvcGlwLWRyYWdnYWJsZS1ncmlkPjxtZC1wcm9ncmVzcy1jaXJjdWxhciBtZC1tb2RlPVwiaW5kZXRlcm1pbmF0ZVwiIGNsYXNzPVwicHJvZ3Jlc3MtcmluZ1wiPjwvbWQtcHJvZ3Jlc3MtY2lyY3VsYXI+PC9kaXY+Jyk7XG59XSk7XG59KSgpO1xuXG4oZnVuY3Rpb24obW9kdWxlKSB7XG50cnkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgncGlwRGFzaGJvYXJkLlRlbXBsYXRlcycpO1xufSBjYXRjaCAoZSkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgncGlwRGFzaGJvYXJkLlRlbXBsYXRlcycsIFtdKTtcbn1cbm1vZHVsZS5ydW4oWyckdGVtcGxhdGVDYWNoZScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dCgnZHJhZ2dhYmxlL0RyYWdnYWJsZS5odG1sJyxcbiAgICAnPGRpdiBjbGFzcz1cInBpcC1kcmFnZ2FibGUtaG9sZGVyXCI+PGRpdiBjbGFzcz1cInBpcC1kcmFnZ2FibGUtZ3JvdXBcIiBwaXAtZHJvcD1cInRydWVcIiBwaXAtZHJvcC1zdWNjZXNzPVwiJGN0cmwub25Ecm9wTGlzdGVuZXIoJGluZGV4LCAkZXZlbnQpXCIgcGlwLWVudGVyPVwiJGN0cmwub25Ecm9wRW50ZXJMaXN0ZW5lcigkaW5kZXgsICRldmVudClcIiBwaXAtbGVhdmU9XCIkY3RybC5vbkRyb3BMZWF2ZUxpc3RlbmVyKCRpbmRleCwgJGV2ZW50KVwiIHBpcC1kZWFjdGl2ZT1cIiRjdHJsLm9uRHJvcERlYWN0aXZhdGVMaXN0ZW5lcigkaW5kZXgsICRldmVudClcIiBuZy1yZXBlYXQ9XCJncm91cCBpbiAkY3RybC5ncm91cHNcIiBkYXRhLWdyb3VwLWlkPVwie3sgJGluZGV4IH19XCIgcGlwLWRyYWdnYWJsZS10aWxlcz1cImdyb3VwLnNvdXJjZVwiPjxkaXYgY2xhc3M9XCJwaXAtZHJhZ2dhYmxlLWdyb3VwLXRpdGxlIGxheW91dC1yb3cgbGF5b3V0LWFsaWduLXN0YXJ0LWNlbnRlclwiPjxkaXYgY2xhc3M9XCJ0aXRsZS1pbnB1dC1jb250YWluZXJcIiBuZy1jbGljaz1cIiRjdHJsLm9uVGl0bGVDbGljayhncm91cCwgJGV2ZW50KVwiPjxpbnB1dCBuZy1pZj1cImdyb3VwLmVkaXRpbmdOYW1lXCIgbmctYmx1cj1cIiRjdHJsLm9uQmx1clRpdGxlSW5wdXQoZ3JvdXApXCIgbmcta2V5cHJlc3M9XCIkY3RybC5vbkt5ZXByZXNzVGl0bGVJbnB1dChncm91cCwgJGV2ZW50KVwiIG5nLW1vZGVsPVwiZ3JvdXAudGl0bGVcIj48ZGl2IGNsYXNzPVwidGV4dC1vdmVyZmxvdyBmbGV4LW5vbmVcIiBuZy1pZj1cIiFncm91cC5lZGl0aW5nTmFtZVwiPnt7IGdyb3VwLnRpdGxlIH19PC9kaXY+PC9kaXY+PG1kLWJ1dHRvbiBjbGFzcz1cIm1kLWljb24tYnV0dG9uIGZsZXgtbm9uZSBsYXlvdXQtYWxpZ24tY2VudGVyLWNlbnRlclwiIG5nLXNob3c9XCJncm91cC5lZGl0aW5nTmFtZVwiIG5nLWNsaWNrPVwiJGN0cmwuY2FuY2VsRWRpdGluZyhncm91cClcIiBhcmlhLWxhYmVsPVwiQ2FuY2VsXCI+PG1kLWljb24gbWQtc3ZnLWljb249XCJpY29uczpjcm9zc1wiPjwvbWQtaWNvbj48L21kLWJ1dHRvbj48bWQtbWVudSBjbGFzcz1cImZsZXgtbm9uZSBsYXlvdXQtY29sdW1uXCIgbWQtcG9zaXRpb24tbW9kZT1cInRhcmdldC1yaWdodCB0YXJnZXRcIiBuZy1zaG93PVwiIWdyb3VwLmVkaXRpbmdOYW1lXCI+PG1kLWJ1dHRvbiBjbGFzcz1cIm1kLWljb24tYnV0dG9uIGZsZXgtbm9uZSBsYXlvdXQtYWxpZ24tY2VudGVyLWNlbnRlclwiIG5nLWNsaWNrPVwiJG1kT3Blbk1lbnUoKTsgZ3JvdXBJZCA9ICRpbmRleFwiIGFyaWEtbGFiZWw9XCJNZW51XCI+PG1kLWljb24gbWQtc3ZnLWljb249XCJpY29uczpkb3RzXCI+PC9tZC1pY29uPjwvbWQtYnV0dG9uPjxtZC1tZW51LWNvbnRlbnQgd2lkdGg9XCI0XCI+PG1kLW1lbnUtaXRlbSBuZy1yZXBlYXQ9XCJhY3Rpb24gaW4gJGN0cmwuZ3JvdXBNZW51QWN0aW9uc1wiPjxtZC1idXR0b24gbmctY2xpY2s9XCJhY3Rpb24uY2FsbGJhY2soZ3JvdXBJZClcIj57eyBhY3Rpb24udGl0bGUgfX08L21kLWJ1dHRvbj48L21kLW1lbnUtaXRlbT48L21kLW1lbnUtY29udGVudD48L21kLW1lbnU+PC9kaXY+PC9kaXY+PGRpdiBjbGFzcz1cInBpcC1kcmFnZ2FibGUtZ3JvdXAgZmljdC1ncm91cCBsYXlvdXQtYWxpZ24tY2VudGVyLWNlbnRlciBsYXlvdXQtY29sdW1uIHRtMTZcIiBwaXAtZHJvcD1cInRydWVcIiBwaXAtZHJvcC1zdWNjZXNzPVwiJGN0cmwub25Ecm9wVG9GaWN0R3JvdXBMaXN0ZW5lcigkZXZlbnQpXCIgcGlwLWVudGVyPVwiJGN0cmwub25Ecm9wRW50ZXJMaXN0ZW5lcihudWxsLCAkZXZlbnQpXCIgcGlwLWxlYXZlPVwiJGN0cmwub25Ecm9wTGVhdmVMaXN0ZW5lcihudWxsLCAkZXZlbnQpXCIgcGlwLWRlYWN0aXZlPVwiJGN0cmwub25Ecm9wRGVhY3RpdmF0ZUxpc3RlbmVyKG51bGwsICRldmVudClcIj48ZGl2IGNsYXNzPVwiZmljdC1ncm91cC10ZXh0LWNvbnRhaW5lclwiPjxtZC1pY29uIG1kLXN2Zy1pY29uPVwiaWNvbnM6cGx1c1wiPjwvbWQtaWNvbj57eyBcXCdEUk9QX1RPX0NSRUFURV9ORVdfR1JPVVBcXCcgfCB0cmFuc2xhdGUgfX08L2Rpdj48L2Rpdj48L2Rpdj4nKTtcbn1dKTtcbn0pKCk7XG5cbihmdW5jdGlvbihtb2R1bGUpIHtcbnRyeSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdwaXBEYXNoYm9hcmQuVGVtcGxhdGVzJyk7XG59IGNhdGNoIChlKSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdwaXBEYXNoYm9hcmQuVGVtcGxhdGVzJywgW10pO1xufVxubW9kdWxlLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KCdldmVudF90aWxlL0NvbmZpZ0RpYWxvZ0V4dGVuc2lvbi5odG1sJyxcbiAgICAnPGRpdiBjbGFzcz1cInctc3RyZXRjaFwiPjxtZC1pbnB1dC1jb250YWluZXIgY2xhc3M9XCJ3LXN0cmV0Y2ggYm0wXCI+PGxhYmVsPlRpdGxlOjwvbGFiZWw+IDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwiJGN0cmwudGl0bGVcIj48L21kLWlucHV0LWNvbnRhaW5lcj5EYXRlOjxtZC1kYXRlcGlja2VyIG5nLW1vZGVsPVwiJGN0cmwuZGF0ZVwiIGNsYXNzPVwidy1zdHJldGNoIGJtOFwiPjwvbWQtZGF0ZXBpY2tlcj48bWQtaW5wdXQtY29udGFpbmVyIGNsYXNzPVwidy1zdHJldGNoXCI+PGxhYmVsPkRlc2NyaXB0aW9uOjwvbGFiZWw+IDx0ZXh0YXJlYSB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwiJGN0cmwudGV4dFwiPlxcbicgK1xuICAgICcgICAgPC90ZXh0YXJlYT48L21kLWlucHV0LWNvbnRhaW5lcj5CYWNrZHJvcFxcJ3Mgb3BhY2l0eTo8bWQtc2xpZGVyIGFyaWEtbGFiZWw9XCJvcGFjaXR5XCIgdHlwZT1cIm51bWJlclwiIG1pbj1cIjAuMVwiIG1heD1cIjAuOVwiIHN0ZXA9XCIwLjAxXCIgbmctbW9kZWw9XCIkY3RybC5vcGFjaXR5XCIgbmctY2hhbmdlPVwiJGN0cmwub25PcGFjaXR5dGVzdCgkY3RybC5vcGFjaXR5KVwiPjwvbWQtc2xpZGVyPjwvZGl2PicpO1xufV0pO1xufSkoKTtcblxuKGZ1bmN0aW9uKG1vZHVsZSkge1xudHJ5IHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ3BpcERhc2hib2FyZC5UZW1wbGF0ZXMnKTtcbn0gY2F0Y2ggKGUpIHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ3BpcERhc2hib2FyZC5UZW1wbGF0ZXMnLCBbXSk7XG59XG5tb2R1bGUucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoJ2V2ZW50X3RpbGUvRXZlbnRUaWxlLmh0bWwnLFxuICAgICc8aW1nIG5nLWlmPVwiJGN0cmwub3B0aW9ucy5pbWFnZVwiIG5nLXNyYz1cInt7JGN0cmwub3B0aW9ucy5pbWFnZX19XCIgYWx0PVwie3skY3RybC5vcHRpb25zLnRpdGxlIHx8ICRjdHJsLm9wdGlvbnMubmFtZX19XCI+PGRpdiBjbGFzcz1cInRleHQtYmFja2Ryb3BcIiBzdHlsZT1cImJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwge3sgJGN0cmwub3BhY2l0eSB9fSlcIj48ZGl2IGNsYXNzPVwidGlsZS1oZWFkaW5nIGxheW91dC1yb3cgbGF5b3V0LWFsaWduLXN0YXJ0LWNlbnRlciBmbGV4LW5vbmVcIj48c3BhbiBjbGFzcz1cInRpbGUtdGl0bGUgZmxleC1hdXRvIHRleHQtb3ZlcmZsb3dcIj57eyAkY3RybC5vcHRpb25zLnRpdGxlIHx8ICRjdHJsLm9wdGlvbnMubmFtZSB9fTwvc3Bhbj48L2Rpdj48ZGl2IGNsYXNzPVwidGV4dC1jb250YWluZXIgZmxleC1hdXRvIHBpcC1zY3JvbGxcIj48cCBjbGFzcz1cImRhdGUgZmxleC1ub25lXCIgbmctaWY9XCIkY3RybC5vcHRpb25zLmRhdGVcIj57eyAkY3RybC5vcHRpb25zLmRhdGUgfX08L3A+PHAgY2xhc3M9XCJ0ZXh0IGZsZXgtYXV0b1wiPnt7ICRjdHJsLm9wdGlvbnMudGV4dCB8fCAkY3RybC5vcHRpb25zLmRlc2NyaXB0aW9uIH19PC9wPjwvZGl2PjwvZGl2PicpO1xufV0pO1xufSkoKTtcblxuKGZ1bmN0aW9uKG1vZHVsZSkge1xudHJ5IHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ3BpcERhc2hib2FyZC5UZW1wbGF0ZXMnKTtcbn0gY2F0Y2ggKGUpIHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ3BpcERhc2hib2FyZC5UZW1wbGF0ZXMnLCBbXSk7XG59XG5tb2R1bGUucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoJ21lbnVfdGlsZS9NZW51VGlsZS5odG1sJyxcbiAgICAnPG1kLW1lbnUgY2xhc3M9XCJ0aWxlLW1lbnVcIiBtZC1wb3NpdGlvbi1tb2RlPVwidGFyZ2V0LXJpZ2h0IHRhcmdldFwiPjxtZC1idXR0b24gY2xhc3M9XCJtZC1pY29uLWJ1dHRvbiBmbGV4LW5vbmVcIiBuZy1jbGljaz1cIiRtZE9wZW5NZW51KClcIiBhcmlhLWxhYmVsPVwiTWVudVwiPjxtZC1pY29uIG1kLXN2Zy1pY29uPVwiaWNvbnM6dmRvdHNcIj48L21kLWljb24+PC9tZC1idXR0b24+PG1kLW1lbnUtY29udGVudCB3aWR0aD1cIjRcIj48bWQtbWVudS1pdGVtIG5nLXJlcGVhdD1cIml0ZW0gaW4gJGN0cmwubWVudVwiPjxtZC1idXR0b24gbmctaWY9XCIhaXRlbS5zdWJtZW51XCIgbmctY2xpY2s9XCJpdGVtLmFjdGlvbihpdGVtLCAkaW5kZXgpXCI+e3s6OiBpdGVtLnRpdGxlIH19PC9tZC1idXR0b24+PG1kLW1lbnUgbmctaWY9XCJpdGVtLnN1Ym1lbnVcIj48bWQtYnV0dG9uIG5nLWNsaWNrPVwiaXRlbS5hY3Rpb24oaXRlbSwgJGluZGV4KVwiPnt7OjogaXRlbS50aXRsZSB9fTwvbWQtYnV0dG9uPjxtZC1tZW51LWNvbnRlbnQ+PG1kLW1lbnUtaXRlbSBuZy1yZXBlYXQ9XCJzdWJpdGVtIGluIGl0ZW0uc3VibWVudVwiPjxtZC1idXR0b24gbmctY2xpY2s9XCJzdWJpdGVtLmFjdGlvbihpdGVtLCAkaW5kZXgpXCI+e3s6OiBzdWJpdGVtLnRpdGxlIH19PC9tZC1idXR0b24+PC9tZC1tZW51LWl0ZW0+PC9tZC1tZW51LWNvbnRlbnQ+PC9tZC1tZW51PjwvbWQtbWVudS1pdGVtPjwvbWQtbWVudS1jb250ZW50PjwvbWQtbWVudT4nKTtcbn1dKTtcbn0pKCk7XG5cbihmdW5jdGlvbihtb2R1bGUpIHtcbnRyeSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdwaXBEYXNoYm9hcmQuVGVtcGxhdGVzJyk7XG59IGNhdGNoIChlKSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdwaXBEYXNoYm9hcmQuVGVtcGxhdGVzJywgW10pO1xufVxubW9kdWxlLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KCdub3RlX3RpbGUvQ29uZmlnRGlhbG9nRXh0ZW5zaW9uLmh0bWwnLFxuICAgICc8ZGl2IGNsYXNzPVwidy1zdHJldGNoXCI+PG1kLWlucHV0LWNvbnRhaW5lciBjbGFzcz1cInctc3RyZXRjaCBibTBcIj48bGFiZWw+VGl0bGU6PC9sYWJlbD4gPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCIkY3RybC50aXRsZVwiPjwvbWQtaW5wdXQtY29udGFpbmVyPjxtZC1pbnB1dC1jb250YWluZXIgY2xhc3M9XCJ3LXN0cmV0Y2ggdG0wXCI+PGxhYmVsPlRleHQ6PC9sYWJlbD4gPHRleHRhcmVhIHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCIkY3RybC50ZXh0XCI+XFxuJyArXG4gICAgJyAgICA8L3RleHRhcmVhPjwvbWQtaW5wdXQtY29udGFpbmVyPjwvZGl2PicpO1xufV0pO1xufSkoKTtcblxuKGZ1bmN0aW9uKG1vZHVsZSkge1xudHJ5IHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ3BpcERhc2hib2FyZC5UZW1wbGF0ZXMnKTtcbn0gY2F0Y2ggKGUpIHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ3BpcERhc2hib2FyZC5UZW1wbGF0ZXMnLCBbXSk7XG59XG5tb2R1bGUucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoJ25vdGVfdGlsZS9Ob3RlVGlsZS5odG1sJyxcbiAgICAnPGRpdiBjbGFzcz1cInRpbGUtaGVhZGluZyBsYXlvdXQtcm93IGxheW91dC1hbGlnbi1zdGFydC1jZW50ZXIgZmxleC1ub25lXCIgbmctaWY9XCIkY3RybC5vcHRpb25zLnRpdGxlIHx8ICRjdHJsLm9wdGlvbnMubmFtZVwiPjxzcGFuIGNsYXNzPVwidGlsZS10aXRsZSBmbGV4LWF1dG8gdGV4dC1vdmVyZmxvd1wiPnt7ICRjdHJsLm9wdGlvbnMudGl0bGUgfHwgJGN0cmwub3B0aW9ucy5uYW1lIH19PC9zcGFuPjwvZGl2PjxkaXYgY2xhc3M9XCJ0ZXh0LWNvbnRhaW5lciBmbGV4LWF1dG8gcGlwLXNjcm9sbFwiPjxwPnt7ICRjdHJsLm9wdGlvbnMudGV4dCB9fTwvcD48L2Rpdj4nKTtcbn1dKTtcbn0pKCk7XG5cbihmdW5jdGlvbihtb2R1bGUpIHtcbnRyeSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdwaXBEYXNoYm9hcmQuVGVtcGxhdGVzJyk7XG59IGNhdGNoIChlKSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdwaXBEYXNoYm9hcmQuVGVtcGxhdGVzJywgW10pO1xufVxubW9kdWxlLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KCdwaWN0dXJlX3NsaWRlcl90aWxlL1BpY3R1cmVTbGlkZXJUaWxlLmh0bWwnLFxuICAgICc8ZGl2IGNsYXNzPVwidGlsZS1oZWFkaW5nIGxheW91dC1yb3cgbGF5b3V0LWFsaWduLXN0YXJ0LWNlbnRlciBmbGV4LW5vbmVcIj48c3BhbiBjbGFzcz1cInRpbGUtdGl0bGUgZmxleC1hdXRvIHRleHQtb3ZlcmZsb3dcIj57eyAkY3RybC5vcHRpb25zLnRpdGxlIHx8ICRjdHJsLm9wdGlvbnMubmFtZSB9fTwvc3Bhbj48L2Rpdj48ZGl2IGNsYXNzPVwic2xpZGVyLWNvbnRhaW5lclwiPjxkaXYgcGlwLWltYWdlLXNsaWRlcj1cIlwiIHBpcC1hbmltYXRpb24tdHlwZT1cIlxcJ2ZhZGluZ1xcJ1wiIHBpcC1hbmltYXRpb24taW50ZXJ2YWw9XCIkY3RybC5hbmltYXRpb25JbnRlcnZhbFwiIG5nLWlmPVwiJGN0cmwuYW5pbWF0aW9uVHlwZSA9PSBcXCdmYWRpbmdcXCdcIj48ZGl2IGNsYXNzPVwicGlwLWFuaW1hdGlvbi1ibG9ja1wiIG5nLXJlcGVhdD1cInNsaWRlIGluICRjdHJsLm9wdGlvbnMuc2xpZGVzXCI+PGltZyBuZy1zcmM9XCJ7eyBzbGlkZS5pbWFnZSB9fVwiIGFsdD1cInt7IHNsaWRlLmltYWdlIH19XCIgcGlwLWltYWdlLWxvYWQ9XCIkY3RybC5vbkltYWdlTG9hZCgkZXZlbnQpXCI+PHAgY2xhc3M9XCJzbGlkZS10ZXh0XCIgbmctaWY9XCJzbGlkZS50ZXh0XCI+e3sgc2xpZGUudGV4dCB9fTwvcD48L2Rpdj48L2Rpdj48ZGl2IHBpcC1pbWFnZS1zbGlkZXI9XCJcIiBwaXAtYW5pbWF0aW9uLXR5cGU9XCJcXCdjYXJvdXNlbFxcJ1wiIHBpcC1hbmltYXRpb24taW50ZXJ2YWw9XCIkY3RybC5hbmltYXRpb25JbnRlcnZhbFwiIG5nLWlmPVwiJGN0cmwuYW5pbWF0aW9uVHlwZSA9PSBcXCdjYXJvdXNlbFxcJ1wiPjxkaXYgY2xhc3M9XCJwaXAtYW5pbWF0aW9uLWJsb2NrXCIgbmctcmVwZWF0PVwic2xpZGUgaW4gJGN0cmwub3B0aW9ucy5zbGlkZXNcIj48aW1nIG5nLXNyYz1cInt7IHNsaWRlLmltYWdlIH19XCIgYWx0PVwie3sgc2xpZGUuaW1hZ2UgfX1cIiBwaXAtaW1hZ2UtbG9hZD1cIiRjdHJsLm9uSW1hZ2VMb2FkKCRldmVudClcIj48cCBjbGFzcz1cInNsaWRlLXRleHRcIiBuZy1pZj1cInNsaWRlLnRleHRcIj57eyBzbGlkZS50ZXh0IH19PC9wPjwvZGl2PjwvZGl2PjwvZGl2PicpO1xufV0pO1xufSkoKTtcblxuKGZ1bmN0aW9uKG1vZHVsZSkge1xudHJ5IHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ3BpcERhc2hib2FyZC5UZW1wbGF0ZXMnKTtcbn0gY2F0Y2ggKGUpIHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ3BpcERhc2hib2FyZC5UZW1wbGF0ZXMnLCBbXSk7XG59XG5tb2R1bGUucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoJ3Bvc2l0aW9uX3RpbGUvQ29uZmlnRGlhbG9nRXh0ZW5zaW9uLmh0bWwnLFxuICAgICc8ZGl2IGNsYXNzPVwidy1zdHJldGNoXCI+PG1kLWlucHV0LWNvbnRhaW5lciBjbGFzcz1cInctc3RyZXRjaCBibTBcIj48bGFiZWw+TG9jYXRpb24gbmFtZTo8L2xhYmVsPiA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cIiRjdHJsLmxvY2F0aW9uTmFtZVwiPjwvbWQtaW5wdXQtY29udGFpbmVyPjwvZGl2PicpO1xufV0pO1xufSkoKTtcblxuKGZ1bmN0aW9uKG1vZHVsZSkge1xudHJ5IHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ3BpcERhc2hib2FyZC5UZW1wbGF0ZXMnKTtcbn0gY2F0Y2ggKGUpIHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ3BpcERhc2hib2FyZC5UZW1wbGF0ZXMnLCBbXSk7XG59XG5tb2R1bGUucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoJ3Bvc2l0aW9uX3RpbGUvUG9zaXRpb25UaWxlLmh0bWwnLFxuICAgICc8ZGl2IGNsYXNzPVwidGlsZS1oZWFkaW5nIGxwMTYgcnA4IGxheW91dC1yb3cgbGF5b3V0LWFsaWduLWVuZC1jZW50ZXIgZmxleC1ub25lXCIgbmctaWY9XCIkY3RybC5vcHRpb25zLmxvY2F0aW9uTmFtZVwiPjxzcGFuIGNsYXNzPVwiZmxleCB0aWxlLXRpdGxlIHRleHQtb3ZlcmZsb3dcIj57eyAkY3RybC5vcHRpb25zLmxvY2F0aW9uTmFtZSB9fTwvc3Bhbj48L2Rpdj48cGlwLWxvY2F0aW9uLW1hcCBjbGFzcz1cImZsZXhcIiBuZy1pZj1cIiRjdHJsLnNob3dQb3NpdGlvblwiIHBpcC1zdHJldGNoPVwidHJ1ZVwiIHBpcC1yZWJpbmQ9XCJ0cnVlXCIgcGlwLWxvY2F0aW9uLXBvcz1cIiRjdHJsLm9wdGlvbnMubG9jYXRpb25cIj48L3BpcC1sb2NhdGlvbi1tYXA+Jyk7XG59XSk7XG59KSgpO1xuXG4oZnVuY3Rpb24obW9kdWxlKSB7XG50cnkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgncGlwRGFzaGJvYXJkLlRlbXBsYXRlcycpO1xufSBjYXRjaCAoZSkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgncGlwRGFzaGJvYXJkLlRlbXBsYXRlcycsIFtdKTtcbn1cbm1vZHVsZS5ydW4oWyckdGVtcGxhdGVDYWNoZScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dCgnc3RhdGlzdGljc190aWxlL1N0YXRpc3RpY3NUaWxlLmh0bWwnLFxuICAgICc8ZGl2IGNsYXNzPVwidGlsZS1oZWFkaW5nIGxheW91dC1yb3cgbGF5b3V0LWFsaWduLXN0YXJ0LWNlbnRlciBmbGV4LW5vbmVcIj48c3BhbiBjbGFzcz1cInRpbGUtdGl0bGUgZmxleC1hdXRvIHRleHQtb3ZlcmZsb3dcIj57eyAkY3RybC5vcHRpb25zLnRpdGxlIHx8ICRjdHJsLm9wdGlvbnMubmFtZSB9fTwvc3Bhbj48L2Rpdj48ZGl2IGNsYXNzPVwiZmxleC1hdXRvIGxheW91dC1yb3cgbGF5b3V0LWFsaWduLWNlbnRlci1jZW50ZXJcIiBuZy1pZj1cIiRjdHJsLm9wdGlvbnMuc2VyaWVzICYmICEkY3RybC5yZXNldFwiPjxwaXAtcGllLWNoYXJ0IHBpcC1zZXJpZXM9XCIkY3RybC5vcHRpb25zLnNlcmllc1wiIG5nLWlmPVwiISRjdHJsLm9wdGlvbnMuY2hhcnRUeXBlIHx8ICRjdHJsLm9wdGlvbnMuY2hhcnRUeXBlID09IFxcJ3BpZVxcJ1wiIHBpcC1kb251dD1cInRydWVcIiBwaXAtcGllLXNpemU9XCIkY3RybC5jaGFydFNpemVcIiBwaXAtc2hvdy10b3RhbD1cInRydWVcIiBwaXAtY2VudGVyZWQ9XCJ0cnVlXCI+PC9waXAtcGllLWNoYXJ0PjwvZGl2PicpO1xufV0pO1xufSkoKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGlwLXdlYnVpLWRhc2hib2FyZC1odG1sLm1pbi5qcy5tYXBcbiJdfQ=="}