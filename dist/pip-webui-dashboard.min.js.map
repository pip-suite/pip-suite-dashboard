{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/add_tile_dialog/AddTileDialogController.ts","src/add_tile_dialog/AddTileProvider.ts","src/add_tile_dialog/index.ts","src/common_tile/DashboardTile.ts","src/common_tile/DynamicTile.ts","src/config_tile_dialog/ConfigDialogController.ts","src/config_tile_dialog/ConfigDialogExtendComponent.ts","src/config_tile_dialog/ConfigDialogService.ts","src/config_tile_dialog/index.ts","src/dashboard/Dashboard.ts","src/draggable/Draggable.ts","src/draggable/DraggableTileService.ts","src/draggable/index.ts","src/event_tile/EventTile.ts","src/index.ts","src/menu_tile/MenuTileDirective.ts","src/menu_tile/index.ts","src/note_tile/NoteTile.ts","src/picture_slider_tile/PictureSliderTile.ts","src/position_tile/PositionTile.ts","src/statistics_tile/StatisticsTile.ts","src/tile_group/TileGroupDirective.ts","src/tile_group/TileGroupService.ts","src/tile_group/index.ts","src/utility/DashboardService.ts","src/utility/TileTemplateUtility.ts","temp/pip-webui-dashboard-html.min.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","pip","dashboard","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","AddTileDialog","AddTileDialogController","prototype","add","$mdDialog","hide","groupIndex","activeGroupIndex","widgets","defaultTiles","cancel","encrease","widgetIndex","amount","totalTiles","decrease","widget","groups","widgetList","_","isNumber","cloneDeep","map","group","setTranslations","$injector","pipTranslate","has","get","DASHBOARD_ADD_TILE_DIALOG_TITLE","DASHBOARD_ADD_TILE_DIALOG_USE_HOT_KEYS","DASHBOARD_ADD_TILE_DIALOG_CREATE_NEW_GROUP","AddTileDialogController_1","$inject","AddTileDialogService_1","show","_this","templateUrl","bindToController","controller","controllerAs","clickOutsideToClose","AddTileDialogProvider","$get","_service","_tilesList","configTilesList","list","config","provider","Object","defineProperty","value","DashboardTile","changeSize","params","options","size","colSpan","sizeX","rowSpan","sizeY","title","action","angular","noop","5","directive","$templateRequest","$compile","$interpolate","restrict","name","$scope","$element","$attrs","setSizes","x","y","extend","menu","DEFAULT_MENU","isDefined","then","html","find","replaceWith","TileColors","all","TileSizes","id","TileConfigDialogController","onApply","updatedData","Number","sizeId","substr","extensionUrl","colors","sizes","onCancel","7","pipTileConfigComponent","$onChanges","changes","pipDialogScope","currentValue","pipExtensionUrl","TileConfigExtendComponentController","pipApply","bindings","DASHBOARD_TILE_CONFIG_DIALOG_TITLE","DASHBOARD_TILE_CONFIG_DIALOG_SIZE_SMALL","DASHBOARD_TILE_CONFIG_DIALOG_SIZE_WIDE","DASHBOARD_TILE_CONFIG_DIALOG_SIZE_LARGE","ConfigDialogController_1","TileConfigDialogService","successCallback","cancelCallback","targetEvent","event","locals","key","9","./ConfigDialogExtendComponent","./ConfigDialogService","10","DROP_TO_CREATE_NEW_GROUP","pipAddTileDialogProvider","icon","DEFAULT_GRID_OPTIONS_1","tileWidth","configureAvailableWidgets","Dashboard","gridOptions","groupAdditionalActions","groupedWidgets","compileWidgets","removedWidgets","source","index","type","pipDashboard","getTypeByName","ctrl","tmpl","template","ctrlAs","class","click","item","object","removeWidget","opts","pipTileTemplate","getTemplate","_dynamicTileTpl","addComponent","pipAddTileDialog","data","activeGroup","addWidgets","push","widgetGroup","forEach","Array","apply","splice","$timeout","DashboardController","$rootScope","defaultGroupMenuActions","callback","removeGroup","console","log","_includeTpl","groupMenuActions","addClass","draggableGridOptions","inline","widgetsContext","component","11","DraggableTileService_1","TileGroupService_1","DEFAULT_TILE_WIDTH","DEFAULT_TILE_HEIGHT","UPDATE_GROUPS_EVENT","DEFAULT_OPTIONS","tileHeight","gutter","tilesTemplates","tilesContext","$postLink","$container","watch","newVal","prevVal","changedGroupIndex","addGroup","removeGroups","groupWidgetDiff","newTiles","slice","each","tile","addTilesIntoGroup","tileGroups","groupsContainers","updateTilesGroups","removeTiles","updateTilesOptions","onTitleClick","editingName","oldTitle","clone","$","currentTarget","children","focus","cancelEditing","onBlurTitleInput","$broadcast","onKyepressTitleInput","keyCode","updateTilesTemplates","updateType","_a","fromIndex","from","elem","attributes","toIndex","to","tileOptions","fromTileIndex","reIndexTiles","DraggableController","createTileScope","tileScope","$new","undefined","indexes","container","tiles","remove","gIndex","child","element","scope","newGroups","removeIndexes","remain","containers","findIndex","reverse","sourceGroup","afterFict","IDragTileConstructor","DragTileService","tpl","wrapComponent","$$phase","$apply","document","querySelectorAll","groupContaninerSelector","ITilesGridConstructor","TilesGridService","availableColumns","generateGrid","getSingleTileWidthForMobile","availableWidth","setTilesDimensions","calcContainerHeight","content","attr","append","groupContainer","newTile","addTile","getCompiledTemplate","appendTo","optionsGroup","optionGroup","updateTileOptions","initTilesGroups","onlyPosition","draggedTile","getContainerWidth","width","getAvailableColumns","mobileBreakpoint","Math","floor","getActiveGroupAndTile","foundTile","getTileByNode","active","onDragStartListener","target","activeEntities","parent","sourceDropZoneElem","activeDraggedGroup","startDrag","onDragMoveListener","containerOffset","getContainerOffset","belowElement","getTileByCoordinates","left","top","getTileIndex","swapTiles","setGroupContainersHeight","onDragEndListener","stopDrag","removeClass","containerRect","getBoundingClientRect","tileGroup","moveTile","movedTile","removeTile","getElem","bind","onDropListener","droppedGroupIndex","droppedGroup","classList","activeDropzoneClass","css","onDropToFictGroupListener","onDropEnterListener","isSameDropzone","onDropDeactivateListener","onDropLeaveListener","initialize","pipDragTile","pipTilesGrid","pipMedia","merge","breakpoints","xs","$watch","debounce","setAvailableColumns","$on","DragComponent","../tile_group/TileGroupService","./DraggableTileService","12","constructor","getSize","setSize","height","setPosition","updateElem","preview","position","zIndex","after","isAnimate","on","onTransitionEnd","off","setPreviewPosition","coords","getOptions","setOptions","DEFAULT_TILE_SIZE","__","d","extendStatics","b","create","pipDashboardProvider","_super","EventTile_1","EventTileController","drawImage","image","onImageLoad","onConfigClick","opacity","color","date","text","onOpacitytest","result","_oldOpacity","setImageMarginCSS","containerWidth","clientWidth","containerHeight","clientHeight","imageWidth","naturalWidth","imageHeight","naturalHeight","margin","cssParams","pipTileConfigDialogService","is","../common_tile/DashboardTile","15","./common_tile/DashboardTile","./common_tile/DynamicTile","./config_tile_dialog","./dashboard/Dashboard","./draggable","./event_tile/EventTile","./menu_tile","./note_tile/NoteTile","./picture_slider_tile/PictureSliderTile","./position_tile/PositionTile","./statistics_tile/StatisticsTile","./tile_group/index","./utility/DashboardService","./utility/TileTemplateUtility","16","NoteTile_1","DashboardTile_1","NoteTileController","hasOwnProperty","PictureSliderTile_1","PictureSliderController","$event","animationType","animationInterval","__proto__","PositionTile_1","PositionTileController","dialogClass","locationName","hideColors","openLocationEditDialog","pipLocationEditDialog","locationPos","location","newPosition","locatioName","reDrawPosition","showPosition","setPrototypeOf","registerTileType","StatisticsTile_1","StatisticsTileController","reset","setChartSize","_$timeout","chartSize","_$scope","union","22","$elem","$attr","docFrag","createDocumentFragment","$eval","pipDraggableTiles","appendChild","link","DraggableTileLink","DraggableTiles","columns","getCellByPosition","row","col","gridCells","getCells","prevCell","isMobileLayout","getAvailableCellsMobile","getAvailableCellsDesktop","basicRow","getBasicRow","gridCopy","leftCornerCell","getCell","basicCol","rowShift","prevTileSize","rightCornerCell","isCellFree","end","src","cell","getCellIndex","srcCell","rowIndex","reserveCells","start","clearElements","singleTileWidth","offset","querySelector","rows","gridInRow","newCellCount","colsInRow","bottom","right","srcTiles","generateCells","startCell","cells","tileSize","minHeight","maxHeightSize","maxWidthSize","maxBy","style","node","filter","beforeTile","beforeTileIndex","movedTileIndex","droppedTile","service","./TileGroupService","25","$controllerProvider","register","newTileTypeOptions","newControllerName","newTemplateUrl","toUpperCase","tilesTypes","$templateCache","DashboardService_1","putTemplates","tileTypes","put","getTileTypes","DashboardProvider","$parse","attrs","strictCompile","interpolated","_$interpolate","_$compile","_$templateRequest","tileTemplateService","ImageLoad","27","run"],"mappings":"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","file":"pip-webui-dashboard.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","export class AddTileDialog {\n    title: string;\n    icon: string;\n    name: string;\n    amount: number;\n}\n\nexport class AddTileDialogController implements ng.IController {\n    public defaultTiles: [AddTileDialog[]];\n    public groups: any;\n    public totalTiles: number = 0;\n\n    constructor(\n        groups: any,\n        public activeGroupIndex: number,\n        widgetList: [AddTileDialog[]],\n        public $mdDialog: angular.material.IDialogService\n    ) {\n        this.activeGroupIndex = _.isNumber(activeGroupIndex) ? activeGroupIndex : -1;\n        this.defaultTiles = _.cloneDeep(widgetList);\n        this.groups = _.map(groups, (group) => {\n            return group['title'];\n        });\n    }\n\n    public add() {\n        this.$mdDialog.hide({\n            groupIndex: this.activeGroupIndex,\n            widgets: this.defaultTiles\n        });\n    };\n\n    public cancel() {\n        this.$mdDialog.cancel();\n    };\n\n    public encrease(groupIndex: number, widgetIndex: number) {\n        const widget = this.defaultTiles[groupIndex][widgetIndex];\n        widget.amount++;\n        this.totalTiles++;\n    };\n\n    public decrease(groupIndex: number, widgetIndex: number) {\n        const widget = this.defaultTiles[groupIndex][widgetIndex];\n        widget.amount = widget.amount ? widget.amount - 1 : 0;\n        this.totalTiles = this.totalTiles ? this.totalTiles - 1 : 0;\n    };\n}","import {\n  AddTileDialog,\n  AddTileDialogController\n} from './AddTileDialogController';\n\nexport interface IAddTileDialogService {\n  show(groups, activeGroupIndex): angular.IPromise < any > ;\n}\n\nexport interface IAddTileDialogprovider {\n  configTilesList(list: [AddTileDialog[]]): void;\n}\n\n{\n  const setTranslations = function($injector: ng.auto.IInjectorService) {\n    const pipTranslate = $injector.has('pipTranslateProvider') ? $injector.get('pipTranslateProvider') : null;\n    if (pipTranslate) {\n      (<any>pipTranslate).setTranslations('en', {\n        DASHBOARD_ADD_TILE_DIALOG_TITLE: 'Add component',\n        DASHBOARD_ADD_TILE_DIALOG_USE_HOT_KEYS: 'Use \"Enter\" or \"+\" buttons on keyboard to encrease and \"Delete\" or \"-\" to decrease tiles amount',\n        DASHBOARD_ADD_TILE_DIALOG_CREATE_NEW_GROUP: 'Create new group'\n      });\n      (<any>pipTranslate).setTranslations('ru', {\n        DASHBOARD_ADD_TILE_DIALOG_TITLE: 'Добавить компонент',\n        DASHBOARD_ADD_TILE_DIALOG_USE_HOT_KEYS: 'Используйте \"Enter\" или \"+\" клавиши на клавиатуре чтобы увеличить и \"Delete\" or \"-\" чтобы уменшить количество тайлов',\n        DASHBOARD_ADD_TILE_DIALOG_CREATE_NEW_GROUP: 'Создать новую группу'\n      });\n    }\n  }\n\n  class AddTileDialogService implements IAddTileDialogService {\n    public constructor(\n      private widgetList: [AddTileDialog[]],\n      private $mdDialog: angular.material.IDialogService\n    ) {}\n\n    public show(groups, activeGroupIndex) {\n      return this.$mdDialog\n        .show({\n          templateUrl: 'add_tile_dialog/AddTile.html',\n          bindToController: true,\n          controller: AddTileDialogController,\n          controllerAs: 'dialogCtrl',\n          clickOutsideToClose: true,\n          resolve: {\n            groups: () => {\n              return groups;\n            },\n            activeGroupIndex: () => {\n              return activeGroupIndex;\n            },\n            widgetList: () => {\n              return (<any>this.widgetList);\n            }\n          }\n        });\n    };\n  }\n\n  class AddTileDialogProvider implements IAddTileDialogprovider {\n    private _service: AddTileDialogService;\n    private _tilesList: [AddTileDialog[]] = null;\n\n    constructor() {}\n\n    public configTilesList = function (list: [AddTileDialog[]]) {\n      this._tilesList = list;\n    };\n\n    public $get($mdDialog: angular.material.IDialogService) {\n      \"ngInject\";\n\n      if (this._service == null)\n        this._service = new AddTileDialogService(this._tilesList, $mdDialog);\n\n      return this._service;\n    }\n  }\n\n  angular\n    .module('pipAddDashboardTileDialog')\n    .config(setTranslations)\n    .provider('pipAddTileDialog', AddTileDialogProvider);\n}","angular\n    .module('pipAddDashboardTileDialog', ['ngMaterial']);\n\nimport './AddTileDialogController';\nimport './AddTileProvider';","export interface IDashboardTile {\n    options: any;\n    color: string;\n    size: Object | string | number;\n    menu: any;\n}\n\nexport class DashboardTile implements IDashboardTile {\n    public options: any;\n    public color: string;\n    public size: Object | string | number;\n    public menu: any = [{\n        title: 'Change Size',\n        action: angular.noop,\n        submenu: [{\n                title: '1 x 1',\n                action: () => { this.changeSize({sizeX: 1, sizeY: 1}) },\n                params: {\n                    sizeX: 1,\n                    sizeY: 1\n                }\n            },\n            {\n                title: '2 x 1',\n                action: 'changeSize',\n                params: {\n                    sizeX: 2,\n                    sizeY: 1\n                }\n            },\n            {\n                title: '2 x 2',\n                action: 'changeSize',\n                params: {\n                    sizeX: 2,\n                    sizeY: 2\n                }\n            }\n        ]\n    }];\n\n    constructor() {}\n\n    protected changeSize(params) {\n        this.options.size.colSpan = params.sizeX;\n        this.options.size.rowSpan = params.sizeY;\n    }\n}","{\n    angular.module('pipDashboard')\n        .directive('pipDynamicTile', function (\n            $templateRequest: angular.ITemplateRequestService,\n            $compile: angular.ICompileService,\n            $interpolate: angular.IInterpolateService\n        ) {\n            return {\n                restrict: 'E',\n                scope: {\n                    options: '=pipOptions'\n                },\n                templateUrl: 'common_tile/DynamicTile.html',\n                controller: '@',\n                name: 'controller',\n                controllerAs: '$ctrl',\n                bindToController: true,\n                link: function ($scope, $element, $attrs) {\n                    const DEFAULT_MENU = [{\n                        title: 'Change Size',\n                        action: angular.noop,\n                        submenu: [{\n                                title: '1 x 1',\n                                action: () => {\n                                    setSizes(1, 1);\n                                },\n                                params: {\n                                    sizeX: 1,\n                                    sizeY: 1\n                                }\n                            },\n                            {\n                                title: '2 x 1',\n                                action: () => {\n                                    setSizes(2, 1);\n                                },\n                                params: {\n                                    sizeX: 2,\n                                    sizeY: 1\n                                }\n                            },\n                            {\n                                title: '2 x 2',\n                                action: () => {\n                                    setSizes(2, 2);\n                                },\n                                params: {\n                                    sizeX: 2,\n                                    sizeY: 2\n                                }\n                            }\n                        ]\n                    }];\n\n                    angular.extend($scope['$ctrl'].options.menu, DEFAULT_MENU);\n\n                    if (angular.isDefined($attrs['controllerAs']) && $attrs['controllerAs']) {\n                        $scope[$attrs['controllerAs']] = $scope['$ctrl'];\n                    }\n\n                    if (angular.isDefined($attrs['template'])) {\n                        $templateRequest($attrs['template']).then((html) => {\n                            $element.find('pip-specific-template').replaceWith($compile(html)($scope));\n                        });\n                    }\n\n                    function setSizes(x, y) {\n                        $scope['$ctrl'].options.size.colSpan = x;\n                        $scope['$ctrl'].options.size.rowSpan = y;\n                    }\n                }\n            }\n        })\n}","\nclass TileColors {\n    static all: string[] = ['purple', 'green', 'gray', 'orange', 'blue'];\n}\n\nclass TileSizes {\n    static all: any = [{\n            name: 'DASHBOARD_TILE_CONFIG_DIALOG_SIZE_SMALL',\n            id: '11'\n        },\n        {\n            name: 'DASHBOARD_TILE_CONFIG_DIALOG_SIZE_WIDE',\n            id: '21'\n        },\n        {\n            name: 'DASHBOARD_TILE_CONFIG_DIALOG_SIZE_LARGE',\n            id: '22'\n        }\n    ];\n}\n\nexport class TileConfigDialogController {\n    public colors: string[] = TileColors.all;\n    public sizes: any = TileSizes.all;\n    public sizeId: string = TileSizes.all[0].id;\n    public onCancel: Function;\n\n    constructor(\n        public params,\n        public extensionUrl,\n        public $mdDialog: angular.material.IDialogService\n    ) {\n        \"ngInject\";\n\n        angular.extend(this, this.params);\n        this.sizeId = '' + this.params.size.colSpan + this.params.size.rowSpan;\n\n        this.onCancel = () => {\n            this.$mdDialog.cancel();\n        }\n    }\n\n    public onApply(updatedData) {\n        this['size'].sizeX = Number(this.sizeId.substr(0, 1));\n        this['size'].sizeY = Number(this.sizeId.substr(1, 1));\n        this.$mdDialog.hide(updatedData);\n    }\n}","{    \n    interface ITileConfigExtendComponentBindings {\n        [key: string]: any;\n\n        pipExtensionUrl: any;\n        pipDialogScope: any;\n        pipApply: any;\n    }\n\n    const TileConfigExtendComponentBindings: ITileConfigExtendComponentBindings = {\n        pipExtensionUrl: '<',\n        pipDialogScope: '<',\n        pipApply: '&'\n    }\n\n    class TileConfigExtendComponentChanges implements ng.IOnChangesObject, ITileConfigExtendComponentBindings {\n        [key: string]: ng.IChangesObject<any>;\n\n        pipExtensionUrl: ng.IChangesObject<string>;\n        pipDialogScope: ng.IChangesObject<ng.IScope>;\n\n        pipApply: ng.IChangesObject<({updatedData: any}) => ng.IPromise<void>>;\n    }\n\n    interface ITileConfigExtendComponentAttributes extends ng.IAttributes {\n        pipExtensionUrl: string\n    }\n\n    class TileConfigExtendComponentController implements ITileConfigExtendComponentBindings {\n        public pipExtensionUrl: string;\n        public pipDialogScope: ng.IScope;\n        public pipApply: (param: {updatedData: any}) => ng.IPromise<void>;\n\n        constructor(\n            private $templateRequest: angular.ITemplateRequestService,\n            private $compile: angular.ICompileService,\n            private $scope: angular.IScope, \n            private $element: JQuery, \n            private $attrs: ITileConfigExtendComponentAttributes\n        ) { }\n\n        public $onChanges(changes: TileConfigExtendComponentChanges) {\n            if (changes.pipDialogScope) {\n                delete changes.pipDialogScope.currentValue['$scope'];\n                angular.extend(this, changes.pipDialogScope.currentValue);\n            }\n            if (changes.pipExtensionUrl && changes.pipExtensionUrl.currentValue) {\n                this.$templateRequest(changes.pipExtensionUrl.currentValue, false).then((html) => {\n                    this.$element.find('pip-extension-point').replaceWith(this.$compile(html)(this.$scope));\n                });\n            }\n        }\n\n        public onApply() {\n            this.pipApply({updatedData: this});\n        }\n    }\n\n    const pipTileConfigComponent: ng.IComponentOptions = {\n        templateUrl: 'config_tile_dialog/ConfigDialogExtendComponent.html',\n        controller: TileConfigExtendComponentController,\n        bindings: TileConfigExtendComponentBindings\n    }\n\n    angular\n        .module('pipConfigDashboardTileDialog')\n        .component('pipTileConfigExtendComponent', pipTileConfigComponent);\n}","import { TileConfigDialogController } from './ConfigDialogController';\n\nexport interface ITileConfigService {\n    show(params: ITileConfigDialogOptions, successCallback ? : (key) => void, cancelCallback ? : () => void): any;\n}\n\nexport interface ITileConfigDialogOptions extends angular.material.IDialogOptions {\n    dialogClass?: string;\n    extensionUrl?: string;\n    event?: any;\n}\n\n{\n    const setTranslations = function($injector: ng.auto.IInjectorService) {\n        const pipTranslate = $injector.has('pipTranslateProvider') ? $injector.get('pipTranslateProvider') : null;\n        if (pipTranslate) {\n            ( < any > pipTranslate).setTranslations('en', {\n                DASHBOARD_TILE_CONFIG_DIALOG_TITLE: 'Edit tile',\n                DASHBOARD_TILE_CONFIG_DIALOG_SIZE_SMALL: 'Small',\n                DASHBOARD_TILE_CONFIG_DIALOG_SIZE_WIDE: 'Wide',\n                DASHBOARD_TILE_CONFIG_DIALOG_SIZE_LARGE: 'Large'\n            });\n            ( < any > pipTranslate).setTranslations('ru', {\n                DASHBOARD_TILE_CONFIG_DIALOG_TITLE: 'Изменить виджет',\n                DASHBOARD_TILE_CONFIG_DIALOG_SIZE_SMALL: 'Мален.',\n                DASHBOARD_TILE_CONFIG_DIALOG_SIZE_WIDE: 'Широкий',\n                DASHBOARD_TILE_CONFIG_DIALOG_SIZE_LARGE: 'Большой'\n            });\n        }\n    }\n\n    class TileConfigDialogService {\n        public constructor(\n            public $mdDialog: angular.material.IDialogService\n        ) {}\n\n        public show(params: ITileConfigDialogOptions, successCallback ? : (key) => void, cancelCallback ? : () => void) {\n            this.$mdDialog.show({\n                    targetEvent: params.event,\n                    templateUrl: params.templateUrl || 'config_tile_dialog/ConfigDialog.html',\n                    controller: TileConfigDialogController,\n                    bindToController: true,\n                    controllerAs: 'vm',\n                    locals: {\n                        extensionUrl: params.extensionUrl,\n                        params: params.locals\n                    },\n                    clickOutsideToClose: true\n                })\n                .then((key) => {\n                    if (successCallback) {\n                        successCallback(key);\n                    }\n                }, () => {\n                    if (cancelCallback) {\n                        cancelCallback();\n                    }\n                });\n        }\n    }\n\n    angular\n        .module('pipConfigDashboardTileDialog')\n        .config(setTranslations)\n        .service('pipTileConfigDialogService', TileConfigDialogService);\n}","\nangular\n    .module('pipConfigDashboardTileDialog', ['ngMaterial']);\n\nimport './ConfigDialogController';\nimport './ConfigDialogService';\nimport './ConfigDialogExtendComponent';","import {\n  ITileTemplateService\n} from '../utility/TileTemplateUtility';\nimport {\n  IAddTileDialogService,\n  IAddTileDialogprovider\n} from '../add_tile_dialog/AddTileProvider'\nimport {IDashboardService, IDashboardTileTypeOptions} from '../utility/IDashboardService';\n\n{\n  const setTranslations = function ($injector: ng.auto.IInjectorService) {\n    const pipTranslate = $injector.has('pipTranslateProvider') ? $injector.get('pipTranslateProvider') : null;\n    if (pipTranslate) {\n      ( < any > pipTranslate).setTranslations('en', {\n        DROP_TO_CREATE_NEW_GROUP: 'Drop here to create new group',\n      });\n      ( < any > pipTranslate).setTranslations('ru', {\n        DROP_TO_CREATE_NEW_GROUP: 'Перетащите сюда для создания новой группы'\n      });\n    }\n  }\n\n  const configureAvailableWidgets = function (pipAddTileDialogProvider: IAddTileDialogprovider) {\n    pipAddTileDialogProvider.configTilesList([\n      [{\n          title: 'Event',\n          icon: 'document',\n          name: 'event',\n          amount: 0\n        },\n        {\n          title: 'Position',\n          icon: 'location',\n          name: 'position',\n          amount: 0\n        }\n      ],\n      [{\n          title: 'Calendar',\n          icon: 'date',\n          name: 'calendar',\n          amount: 0\n        },\n        {\n          title: 'Sticky Notes',\n          icon: 'note-take',\n          name: 'notes',\n          amount: 0\n        },\n        {\n          title: 'Statistics',\n          icon: 'tr-statistics',\n          name: 'statistics',\n          amount: 0\n        }\n      ]\n    ]);\n  }\n\n  class draggableOptions {\n    tileWidth: number;\n    tileHeight: number;\n    gutter: number;\n    inline: boolean;\n  }\n\n  const DEFAULT_GRID_OPTIONS: draggableOptions = {\n    tileWidth: 150, // 'px'\n    tileHeight: 150, // 'px'\n    gutter: 10, // 'px'\n    inline: false\n  };\n\n  interface DashboardBindings {\n      gridOptions: any;\n      groupAdditionalActions: any;\n      groupedWidgets: any;\n  }\n\n  class DashboardController implements ng.IController, DashboardBindings {\n    private defaultGroupMenuActions: any = [{\n        title: 'Add Component',\n        callback: (groupIndex) => {\n          this.addComponent(groupIndex);\n        }\n      },\n      {\n        title: 'Remove',\n        callback: (groupIndex) => {\n          this.removeGroup(groupIndex);\n        }\n      },\n      {\n        title: 'Configurate',\n        callback: (groupIndex) => {\n          console.log('configurate group with index:', groupIndex);\n        }\n      }\n    ];\n    private _includeTpl: string = '<pip-{{ type }}-tile group=\"groupIndex\" index=\"index\"' +\n      'pip-options=\"$parent.$ctrl.groupedWidgets[groupIndex][\\'source\\'][index].opts\">' +\n      '</pip-{{ type }}-tile>';\n    private _dynamicTileTpl: string = '<pip-dynamic-tile controller=\"{{ ctrl }}\"' + \n    ' template=\"{{ tmpl }}\" class=\"{{ class }}\" controller-as=\"{{ ctrlAs }}\" ' + \n    'pip-options=\"$parent.$ctrl.groupedWidgets[groupIndex][\\'source\\'][index].opts\"></pip-dynamic-tile>';\n\n    public groupedWidgets: any;\n    public draggableGridOptions: draggableOptions;\n    public widgetsTemplates: any;\n    public groupMenuActions: any = this.defaultGroupMenuActions;\n    public widgetsContext: any;\n    public gridOptions: any;\n    public groupAdditionalActions: any;\n\n    constructor(\n      $scope: angular.IScope,\n      private $rootScope: angular.IRootScopeService,\n      private $attrs: any,\n      private $element: any,\n      private $timeout: angular.ITimeoutService,\n      private $interpolate: angular.IInterpolateService,\n      private pipAddTileDialog: IAddTileDialogService,\n      private pipTileTemplate: ITileTemplateService,\n      private pipDashboard: IDashboardService\n    ) {\n      // Add class to style scroll bar\n      $element.addClass('pip-scroll');\n\n      // Set tiles grid options\n      this.draggableGridOptions = this.gridOptions || DEFAULT_GRID_OPTIONS;\n\n      // Switch inline displaying\n      if (this.draggableGridOptions.inline === true) {\n        $element.addClass('inline-grid');\n      }\n      // Extend group's menu actions\n      if (this.groupAdditionalActions) angular.extend(this.groupMenuActions, this.groupAdditionalActions);\n\n      // Compile widgets\n      this.widgetsContext = $scope;\n      this.compileWidgets();\n\n      this.$timeout(() => {\n        this.$element.addClass('visible');\n      }, 700);\n    }\n\n    private compileWidgets() {\n      _.each(this.groupedWidgets, (group, groupIndex) => {\n        group.removedWidgets = group.removedWidgets || [],\n          group.source = group.source.map((widget, index) => {\n            let type: IDashboardTileTypeOptions;\n            let specificType: boolean = false;\n            // Establish default props\n            widget.size = widget.size || {\n              colSpan: 1,\n              rowSpan: 1\n            };\n            widget.index = index;\n            widget.groupIndex = groupIndex;\n            widget.menu = widget.menu || [];\n            if (type = this.pipDashboard.getTypeByName(widget.type)) {\n              widget.ctrl = type.controller;\n              widget.tmpl = type.templateUrl || type.template;\n              widget.ctrlAs = type.controllerAs;\n              widget.class = type.class;\n\n              specificType = true;\n            }\n            angular.extend(widget.menu, [{\n              title: 'Remove',\n              click: (item, params, object) => {\n                this.removeWidget(item, params, object);\n              }\n            }]);\n\n            return {\n              opts: widget.opts || widget,\n              template:this.pipTileTemplate.getTemplate(widget, this._dynamicTileTpl)\n            };\n          })\n      });\n    }\n\n    public addComponent(groupIndex) {\n      this.pipAddTileDialog\n        .show(this.groupedWidgets, groupIndex)\n        .then((data) => {\n          var activeGroup;\n\n          if (!data) {\n            return;\n          }\n\n          if (data.groupIndex !== -1) {\n            activeGroup = this.groupedWidgets[data.groupIndex];\n          } else {\n            activeGroup = {\n              title: 'New group',\n              source: []\n            };\n          }\n\n          this.addWidgets(activeGroup.source, data.widgets);\n\n          if (data.groupIndex === -1) {\n            this.groupedWidgets.push(activeGroup);\n          }\n\n          this.compileWidgets();\n        });\n    };\n\n    public removeGroup = (groupIndex) => {\n      this.groupedWidgets.splice(groupIndex, 1);\n    }\n\n    private addWidgets(group, widgets) {\n      widgets.forEach((widgetGroup) => {\n        widgetGroup.forEach((widget) => {\n          if (widget.amount) {\n            Array.apply(null, Array(widget.amount)).forEach(() => {\n              group.push({\n                type: widget.name\n              });\n            });\n          }\n        });\n      });\n    }\n\n    private removeWidget(item, params, object) {\n      this.groupedWidgets[params.options.groupIndex].removedWidgets = [];\n      this.groupedWidgets[params.options.groupIndex].removedWidgets.push(params.options.index);\n      this.groupedWidgets[params.options.groupIndex].source.splice(params.options.index, 1);\n      this.$timeout(() => {\n        this.groupedWidgets[params.options.groupIndex].removedWidgets = [];\n      });\n    }\n\n  }\n\n  const Dashboard: ng.IComponentOptions = {\n    bindings: {\n      gridOptions: '=pipGridOptions',\n      groupAdditionalActions: '=pipGroupActions',\n      groupedWidgets: '=pipGroups'\n    },\n    controller: DashboardController,\n    templateUrl: 'dashboard/Dashboard.html'\n  }\n\n  angular\n    .module('pipDashboard')\n    .config(configureAvailableWidgets)\n    .config(setTranslations)\n    .component('pipDashboard', Dashboard);\n\n}","declare var interact;\n\nimport {\n  DragTileService,\n  IDragTileService,\n  IDragTileConstructor\n} from './DraggableTileService';\nimport {\n  TilesGridService,\n  ITilesGridService,\n  ITilesGridConstructor\n} from '../tile_group/TileGroupService';\n\nexport const DEFAULT_TILE_WIDTH: number = 150;\nexport const DEFAULT_TILE_HEIGHT: number = 150;\nexport const UPDATE_GROUPS_EVENT = \"pipUpdateDashboardGroupsConfig\";\n\nconst SIMPLE_LAYOUT_COLUMNS_COUNT: number = 2;\nconst DEFAULT_OPTIONS = {\n  tileWidth: DEFAULT_TILE_WIDTH, // 'px'\n  tileHeight: DEFAULT_TILE_HEIGHT, // 'px'\n  gutter: 0, // 'px'\n  container: 'pip-draggable-grid:first-of-type',\n  //mobileBreakpoint       : XXX,   // Get from pipMedia Service in the constructor\n  activeDropzoneClass: 'dropzone-active',\n  groupContaninerSelector: '.pip-draggable-group:not(.fict-group)',\n};\n\n{\n  interface IDraggableBindings {\n      tilesTemplates: any;\n      tilesContext: any;\n      options: any;\n      groupMenuActions: any;\n      $container: JQuery;\n  }\n\n  interface IDraggableControllerScope extends ng.IScope {\n    $container: JQuery;\n    tilesTemplates: any;\n    options: any;\n  }\n\n  interface ITileScope extends ng.IScope {\n    index: number | string;\n    groupIndex: number | string;\n  }\n\n  class DraggableController implements ng.IComponentController, IDraggableBindings {\n    public opts: any;\n    public groups: any;\n    public sourceDropZoneElem: any = null;\n    public isSameDropzone: boolean = true;\n    public tileGroups: any = null;\n    public availableWidth: number;\n    public availableColumns: number;\n    public groupsContainers: any;\n    public container: any;\n    public activeDraggedGroup: any;\n    public draggedTile: any;\n    public containerOffset: any;\n    public tilesTemplates: any;\n    public tilesContext: any;\n    public options: any;\n    public groupMenuActions: any;\n    public $container: JQuery;\n\n    constructor(\n      private $scope: IDraggableControllerScope,\n      private $rootScope: angular.IRootScopeService,\n      private $compile: angular.ICompileService,\n      private $timeout: angular.ITimeoutService,\n      private $element: JQuery,\n      pipDragTile: IDragTileService,\n      pipTilesGrid: ITilesGridService,\n      pipMedia: pip.layouts.IMediaService\n    ) {\n      this.opts = _.merge({\n        mobileBreakpoint: pipMedia.breakpoints.xs\n      }, DEFAULT_OPTIONS, this.options);\nconsole.log('this.options', this.options);\n\nconsole.log('this.opts', this.opts);\n      this.groups = this.tilesTemplates.map((group, groupIndex) => {\n        return {\n          title: group.title,\n          editingName: false,\n          index: groupIndex,\n          source: group.source.map((tile) => {\n            const tileScope = this.createTileScope(tile);\n\n            return IDragTileConstructor(DragTileService, {\n              tpl: $compile(tile.template)(tileScope),\n              options: tile.opts,\n              size: tile.opts.size\n            });\n          })\n        };\n      });\n\n      // Add templates watcher\n      $scope.$watch('$ctrl.tilesTemplates', (newVal) => {\n        this.watch(newVal);\n      }, true);\n\n      // Initialize data\n      this.initialize();\n\n      // Resize handler TODO: replace by pip resize watchers\n      $(window).on('resize', _.debounce(() => {\n        this.availableWidth = this.getContainerWidth();\n        this.availableColumns = this.getAvailableColumns(this.availableWidth);\n\n        this.tileGroups.forEach((group) => {\n          group\n            .setAvailableColumns(this.availableColumns)\n            .generateGrid(this.getSingleTileWidthForMobile(this.availableWidth))\n            .setTilesDimensions()\n            .calcContainerHeight();\n        });\n      }, 50));\n\n      this.$rootScope.$on('draggable:start', (data, event) => {\n        this.onDragStartListener(event);\n      });\n\n      this.$rootScope.$on('draggable:move', (data, event) => {\n        this.onDragMoveListener(event);\n      });\n\n      this.$rootScope.$on('draggable:end', (data, event) => {\n        this.onDragEndListener();\n      });\n    }\n\n    // Post link function\n    public $postLink() {\n      this.$container = this.$element;\n    }\n\n    // Watch handler\n    private watch(newVal) {\n      const prevVal = this.groups;\n      let changedGroupIndex = null;\n\n      if (newVal.length > prevVal.length) {\n        this.addGroup(newVal[newVal.length - 1]);\n\n        return;\n      }\n\n      if (newVal.length < prevVal.length) {\n        this.removeGroups(newVal);\n\n        return;\n      }\n\n      for (let i = 0; i < newVal.length; i++) {\n        const groupWidgetDiff = prevVal[i].source.length - newVal[i].source.length;\n        if (groupWidgetDiff || (newVal[i].removedWidgets && newVal[i].removedWidgets.length > 0)) {\n          changedGroupIndex = i;\n\n          if (groupWidgetDiff < 0) {\n            const newTiles = newVal[changedGroupIndex].source.slice(groupWidgetDiff);\n\n            _.each(newTiles, (tile) => {\n              console.log('tile', tile);\n            });\n\n            this.addTilesIntoGroup(newTiles, this.tileGroups[changedGroupIndex], this.groupsContainers[changedGroupIndex]);\n\n            this.$timeout(() => {\n              this.updateTilesGroups();\n            });\n          } else {\n            this.removeTiles(this.tileGroups[changedGroupIndex], newVal[changedGroupIndex].removedWidgets, this.groupsContainers[changedGroupIndex]);\n            this.updateTilesOptions(newVal);\n            this.$timeout(() => {\n              this.updateTilesGroups();\n            });\n          }\n\n          return;\n        }\n      }\n\n      if (newVal && this.tileGroups) {\n        this.updateTilesOptions(newVal);\n        this.$timeout(() => {\n          this.updateTilesGroups();\n        });\n      }\n    }\n\n    // Inline edit group handlers\n    public onTitleClick(group, event) {\n      if (!group.editingName) {\n        group.oldTitle = _.clone(group.title);\n        group.editingName = true;\n        this.$timeout(() => {\n          $(event.currentTarget.children[0]).focus();\n        });\n      }\n    }\n\n    public cancelEditing(group) {\n      group.title = group.oldTitle;\n    }\n\n    public onBlurTitleInput(group) {\n      this.$timeout(() => {\n        group.editingName = false;\n        this.$rootScope.$broadcast(UPDATE_GROUPS_EVENT, this.groups);\n        // Update title in outer scope\n        this.tilesTemplates[group.index].title = group.title;\n      }, 100);\n    }\n\n    public onKyepressTitleInput(group, event) {\n      if (event.keyCode === 13) {\n        this.onBlurTitleInput(group);\n      }\n    }\n\n    // Update outer scope functions\n    private updateTilesTemplates(updateType: string, source ? : any) {\n      switch (updateType) {\n        case 'addGroup':\n          if (this.groups.length !== this.tilesTemplates.length) {\n            this.tilesTemplates.push(source);\n          }\n          break;\n        case 'moveTile':\n          const {\n            fromIndex,\n            toIndex,\n            tileOptions,\n            fromTileIndex\n          } = {\n            fromIndex: source.from.elem.attributes['data-group-id'].value,\n            toIndex: source.to.elem.attributes['data-group-id'].value,\n            tileOptions: source.tile.opts.options,\n            fromTileIndex: source.tile.opts.options.index\n          }\n          this.tilesTemplates[fromIndex].source.splice(fromTileIndex, 1);\n          this.tilesTemplates[toIndex].source.push({\n            opts: tileOptions\n          });\n\n          this.reIndexTiles(source.from.elem);\n          this.reIndexTiles(source.to.elem);\n          break;\n      }\n    }\n\n    // Manage tiles functions\n    private createTileScope(tile: any): ITileScope {\n      const tileScope = < ITileScope > this.$rootScope.$new(false, this.tilesContext);\n      tileScope.index = tile.opts.index == undefined ? tile.opts.options.index : tile.opts.index;\n      tileScope.groupIndex = tile.opts.groupIndex == undefined ? tile.opts.options.groupIndex : tile.opts.groupIndex;\n\n      return tileScope;\n    }\n\n    private removeTiles(group, indexes, container) {\n      const tiles = $(container).find('.pip-draggable-tile');\n\n      _.each(indexes, (index) => {\n        group.tiles.splice(index, 1);\n        tiles[index].remove();\n      });\n\n      this.reIndexTiles(container);\n    }\n\n    private reIndexTiles(container, gIndex ? ) {\n      const tiles = $(container).find('.pip-draggable-tile'),\n        groupIndex = gIndex === undefined ? container.attributes['data-group-id'].value : gIndex;\n\n      _.each(tiles, (tile, index) => {\n        const child = $(tile).children()[0];\n        angular.element(child).scope()['index'] = index;\n        angular.element(child).scope()['groupIndex'] = groupIndex;\n      });\n    }\n\n    private removeGroups(newGroups) {\n      const removeIndexes = [],\n        remain = [],\n        containers = [];\n\n      _.each(this.groups, (group, index) => {\n        if (_.findIndex(newGroups, (g) => {\n            return g['title'] === group.title\n          }) < 0) {\n          removeIndexes.push(index);\n        } else {\n          remain.push(index);\n        }\n      });\n\n      _.each(removeIndexes.reverse(), (index) => {\n        this.groups.splice(index, 1);\n        this.tileGroups.splice(index, 1);\n      });\n\n      _.each(remain, (index) => {\n        containers.push(this.groupsContainers[index]);\n      });\n\n      this.groupsContainers = containers;\n\n      _.each(this.groupsContainers, (container, index) => {\n        this.reIndexTiles(container, index);\n      });\n    }\n\n    private addGroup(sourceGroup, afterFict = false) {\n      const group = {\n        title: sourceGroup.title,\n        source: sourceGroup.source.map((tile) => {\n          const tileScope = this.createTileScope(tile);\n\n          return IDragTileConstructor(DragTileService, {\n            tpl: this.$compile(this.wrapComponent(tile.template))(tileScope),\n            options: tile.opts,\n            size: tile.opts.size\n          });\n        })\n      };\n\n      this.groups.push(group);\n      if (afterFict && !this.$scope.$$phase) this.$scope.$apply();\n\n      this.$timeout(() => {\n        this.groupsContainers = document.querySelectorAll(this.opts.groupContaninerSelector);\n        this.tileGroups.push(\n          ITilesGridConstructor(TilesGridService, group.source, this.opts, this.availableColumns, this.groupsContainers[this.groupsContainers.length - 1])\n          .generateGrid(this.getSingleTileWidthForMobile(this.availableWidth))\n          .setTilesDimensions()\n          .calcContainerHeight()\n        );\n      });\n\n      this.updateTilesTemplates('addGroup', sourceGroup);\n    }\n\n    private wrapComponent(content): any {\n      return $('<div>')\n          .addClass('pip-draggable-tile')\n          .attr('pip-drag', 'true')\n          .attr('pip-scroll-container', \"'.pip-dashboard-scroll'\")\n          .append(content)\n          .get(0);\n    }\n\n    private addTilesIntoGroup(newTiles, group, groupContainer) {\n      newTiles.forEach((tile) => {\n        const tileScope = this.createTileScope(tile);\n\n        const newTile = IDragTileConstructor(DragTileService, {\n          tpl: this.$compile(this.wrapComponent(tile.template))(tileScope),\n          options: tile.opts,\n          size: tile.opts.size\n        });\n\n        group.addTile(newTile);\n\n        $(newTile.getCompiledTemplate())\n          .appendTo(groupContainer);\n      });\n    }\n\n    private updateTilesOptions(optionsGroup) {\n      optionsGroup.forEach((optionGroup) => {\n        optionGroup.source.forEach((tileOptions) => {\n          this.tileGroups.forEach((group) => {\n            group.updateTileOptions(tileOptions.opts);\n          });\n        });\n      });\n    }\n\n    private initTilesGroups(tileGroups, opts, groupsContainers) {\n      return tileGroups.map((group, index) => {\n        return ITilesGridConstructor(TilesGridService, group.source, opts, this.availableColumns, groupsContainers[index])\n          .generateGrid(this.getSingleTileWidthForMobile(this.availableWidth))\n          .setTilesDimensions()\n          .calcContainerHeight();\n      });\n    }\n\n    private updateTilesGroups(onlyPosition ? , draggedTile ? ) {\n      this.tileGroups.forEach((group) => {\n        if (!onlyPosition) {\n          group.generateGrid(this.getSingleTileWidthForMobile(this.availableWidth));\n        }\n\n        group\n          .setTilesDimensions(onlyPosition, draggedTile)\n          .calcContainerHeight(this.options.tileHeight);\n      });\n    }\n\n    private getContainerWidth(): any {\n      const container = this.$container || $('body');\n      return container.width();\n    }\n\n    private getAvailableColumns(availableWidth): any {\n      return this.opts.mobileBreakpoint > availableWidth ? SIMPLE_LAYOUT_COLUMNS_COUNT :\n        Math.floor(availableWidth / (this.opts.tileWidth + this.opts.gutter));\n    }\n\n    private getActiveGroupAndTile(elem): any {\n      const active = {};\n\n      this.tileGroups.forEach((group) => {\n        const foundTile = group.getTileByNode(elem);\n\n        if (foundTile) {\n          active['group'] = group;\n          active['tile'] = foundTile;\n          return;\n        }\n      });\n\n      return active;\n    }\n\n    private getSingleTileWidthForMobile(availableWidth): any {\n      console.log('gut', this.opts.gutter);\n      return this.opts.mobileBreakpoint > availableWidth ? availableWidth / 2 - this.opts.gutter : null;\n    }\n\n    public onDragStartListener(event) {\n      if (!event.x) return;\nconsole.log('drag start');\n      event.target = event.element.get(0);\n\n      const activeEntities = this.getActiveGroupAndTile(event.target);\n\n      this.container = $(event.target).parent('.pip-draggable-group').get(0);\n      this.sourceDropZoneElem = this.container;\n      this.draggedTile = activeEntities['tile'];\n      this.activeDraggedGroup = activeEntities['group'];\nconsole.log('activeDraggedGroup', this.activeDraggedGroup);\n      this.$element.addClass('drag-transfer');\n\n      this.draggedTile.startDrag();\n    }\n\n    public onDragMoveListener(event) {\n      const target = event.element.get(0);\nconsole.log('drag move');\n      this.containerOffset = this.getContainerOffset();\n      \n      const belowElement = this.activeDraggedGroup.getTileByCoordinates({\n        left: event.x - this.containerOffset.left,\n        top: event.y - this.containerOffset.top\n      }, this.draggedTile);\n\n      if (belowElement) {\n        const draggedTileIndex = this.activeDraggedGroup.getTileIndex(this.draggedTile);\n        const belowElemIndex = this.activeDraggedGroup.getTileIndex(belowElement);\n\n        if ((draggedTileIndex + 1) === belowElemIndex) {\n          return;\n        }\n\n        this.activeDraggedGroup\n          .swapTiles(this.draggedTile, belowElement)\n          .setTilesDimensions(true, this.draggedTile);\n\n        this.$timeout(() => {\n          this.setGroupContainersHeight();\n        }, 0);\n      }\n    }\n\n    public onDragEndListener() {\n      if (!this.draggedTile) return;\nconsole.log('drag end');\n      this.draggedTile.stopDrag(false);\n      this.$element.removeClass('drag-transfer');\n    }\n\n    private getContainerOffset() {\n      const containerRect = this.container.getBoundingClientRect();\n\n      return {\n        left: containerRect.left,\n        top: containerRect.top\n      };\n    }\n\n    private setGroupContainersHeight() {\n      this.tileGroups.forEach((tileGroup) => {\n        tileGroup.calcContainerHeight();\n      });\n    }\n\n    private moveTile(from, to, tile) {\n      let elem;\n      const movedTile = from.removeTile(tile);\n      const tileScope = this.createTileScope(tile);\n\n      $(this.groupsContainers[_.findIndex(this.tileGroups, from)])\n        .find(movedTile.getElem())\n        .remove();\n\n      if (to !== null) {\n        to.addTile(movedTile);\n\n        elem = this.$compile(movedTile.getElem())(tileScope);\n        $(this.groupsContainers[_.findIndex(this.tileGroups, to)])\n          .append(elem);\n\n        this.$timeout(to.setTilesDimensions.bind(to, true));\n      }\n\n      this.updateTilesTemplates('moveTile', {\n        from: from,\n        to: to,\n        tile: movedTile\n      });\n    }\n\n    public onDropListener(droppedGroupIndex, event) {\n      if (!this.draggedTile) return;\n\n      const droppedGroup = this.tileGroups[droppedGroupIndex];\n\n      if (this.activeDraggedGroup !== droppedGroup) {\n        this.moveTile(this.activeDraggedGroup, droppedGroup, this.draggedTile);\n      }\n\n      this.groupsContainers[droppedGroupIndex].classList.remove(this.opts.activeDropzoneClass);\n      $('body').css('cursor', '');\n\n      this.updateTilesGroups(true);\n      this.sourceDropZoneElem = null;\n      this.activeDraggedGroup = null;\n      this.draggedTile = null;\n    }\n\n    public onDropToFictGroupListener(event) {\n      const from = this.activeDraggedGroup;\n      const tile = this.draggedTile;\n\n      this.addGroup({\n        title: 'New group',\n        source: []\n      }, true);\n      this.$timeout(() => {\n        this.moveTile(from, this.tileGroups[this.tileGroups.length - 1], tile);\n        this.updateTilesGroups(true);\n      });\n      $('body').css('cursor', '');\n\n      this.sourceDropZoneElem = null;\n      this.activeDraggedGroup = null;\n      this.draggedTile = null;\n    }\n\n    public onDropEnterListener(groupIndex, event) {\n      if (!this.sourceDropZoneElem) {\n        this.sourceDropZoneElem = this.groupsContainers[groupIndex];\n      }\nconsole.log('sourceDropZoneElem', this.sourceDropZoneElem);\n      if (groupIndex !== null && this.sourceDropZoneElem !== this.groupsContainers[groupIndex]) {\n        this.groupsContainers[groupIndex].classList.add('dropzone-active');\n        $('body').css('cursor', 'copy');\n        this.isSameDropzone = false;\n      } else {\n        $('body').css('cursor', '');\n        this.isSameDropzone = true;\n      }\n    }\n\n    public onDropDeactivateListener(groupIndex, event) {\n      if (this.sourceDropZoneElem !== event.target && groupIndex !== null) {\n        this.groupsContainers[groupIndex].classList.remove(this.opts.activeDropzoneClass);\n        $('body').css('cursor', '');\n      }\n    }\n\n    public onDropLeaveListener(groupIndex, event) {\n      if (groupIndex !== null) this.groupsContainers[groupIndex].classList.remove(this.opts.activeDropzoneClass);\n    }\n\n    private initialize() {\n      this.$timeout(() => {\n        this.availableWidth = this.getContainerWidth();\n        this.availableColumns = this.getAvailableColumns(this.availableWidth);\n        this.groupsContainers = document.querySelectorAll(this.opts.groupContaninerSelector);\n        this.tileGroups = this.initTilesGroups(this.groups, this.opts, this.groupsContainers);\n/*\n        interact('.pip-draggable-tile')\n          .draggable({\n            inertia: true,\n            autoScroll: {\n              enabled: true,\n              container: $('#content').get(0),\n              speed: 1000\n            },\n            onstart: (event) => {\n              this.onDragStartListener(event)\n            },\n            onmove: (event) => {\n              this.onDragMoveListener(event)\n            },\n            onend: (event) => {\n              this.onDragEndListener()\n            }\n          });\n\n        interact('.pip-draggable-group.fict-group')\n          .dropzone({\n            ondrop: (event) => {\n              this.onDropToFictGroupListener(event)\n            },\n            ondragenter: (event) => {\n              this.onDropEnterListener(event)\n            },\n            ondropdeactivate: (event) => {\n              this.onDropDeactivateListener(event)\n            },\n            ondragleave: (event) => {\n              this.onDropLeaveListener(event)\n            }\n          });\n\n        interact('.pip-draggable-group')\n          .dropzone({\n            ondrop: (event) => {\n              this.onDropListener(event)\n            },\n            ondragenter: (event) => {\n              this.onDropEnterListener(event)\n            },\n            ondropdeactivate: (event) => {\n              this.onDropDeactivateListener(event)\n            },\n            ondragleave: (event) => {\n              this.onDropLeaveListener(event)\n            }\n          });\n\n          */\n      }, 0);\n    }\n  }\n\n  const DragComponent: ng.IComponentOptions = {\n    bindings: {\n      tilesTemplates: '=pipTilesTemplates',\n      tilesContext: '=pipTilesContext',\n      options: '=pipDraggableGrid',\n      groupMenuActions: '=pipGroupMenuActions'\n    },\n    //controllerAs: 'DraggedCtrl',\n    templateUrl: 'draggable/Draggable.html',\n    controller: DraggableController\n  }\n\n  angular.module('pipDraggableTiles')\n    .component('pipDraggableGrid', DragComponent);\n}","export interface DragTileConstructor {\n  new (options: any);\n}\n\nexport function IDragTileConstructor(constructor: DragTileConstructor, options: any): IDragTileService {\n  return new constructor(options);\n}\n\nexport interface IDragTileService {\n  tpl: any;\n  opts: any;\n  size: any;\n  elem: any;\n  preview: any;\n  getSize(): any;\n  setSize(width, height): any;\n  setPosition(left, top): any;\n  getCompiledTemplate(): any;\n  updateElem(parent): any;\n  getElem(): any;\n  startDrag(): any;\n  stopDrag(isAnimate): any;\n  setPreviewPosition(coords): void;\n  getOptions(): any;\n  setOptions(options): any;\n}\n\nlet DEFAULT_TILE_SIZE = {\n  colSpan: 1,\n  rowSpan: 1\n};\n\nexport class DragTileService implements IDragTileService {\n  public tpl: any;\n  public opts: any;\n  public size: any;\n  public elem: any;\n  public preview: any;\n\n  constructor (options: any) {\n    this.tpl = options.tpl.get(0);\n    this.opts = options;\n    this.size = _.merge({}, DEFAULT_TILE_SIZE, options.size);\n    this.elem = null;\n  }\n\n  public getSize(): any {\n    return this.size;\n  }\n\n  public setSize(width, height): any {\n    this.size.width = width;\n    this.size.height = height;\n\n    if (this.elem) {\n      this.elem.css({\n        width: width,\n        height: height\n      });\n    }\n\n    return this;\n  }\n\n  public setPosition(left, top): any {\n    this.size.left = left;\n    this.size.top = top;\n\n    if (this.elem) {\n      this.elem.css({\n        left: left,\n        top: top\n      });\n    }\n\n    return this;\n  }\n\n  public getCompiledTemplate(): any {\n    return this.tpl;\n  };\n\n  public updateElem(parent): any {\n    this.elem = $(this.tpl).parent(parent);\n\n    return this;\n  };\n\n  public getElem(): any {\n    return this.elem.get(0);\n  };\n\n  public startDrag(): any {\n    this.preview = $('<div>')\n      .addClass('pip-dragged-preview')\n      .css({\n        position: 'absolute',\n        left: this.elem.css('left'),\n        top: this.elem.css('top'),\n        width: this.elem.css('width'),\n        height: this.elem.css('height')\n      });\n\n    this.elem\n      .addClass('no-animation')\n      .css({\n        zIndex: '9999'\n      })\n      .after(this.preview);\n\n    return this;\n  };\n\n  public stopDrag(isAnimate): any {\n    if (!this.preview) return;\n    let self = this;\n\n    if (isAnimate) {\n      self.elem\n        .removeClass('no-animation')\n        .css({\n          left: self.preview.css('left'),\n          top: self.preview.css('top')\n        })\n        .on('transitionend', () => { onTransitionEnd(); });\n    } else {\n      self.elem\n        .css({\n          left: self.preview.css('left'),\n          top: self.preview.css('top'),\n          zIndex: ''\n        })\n        .removeClass('no-animation');\n\n      self.preview.remove();\n      self.preview = null;\n    }\n\n    return this;\n\n    function onTransitionEnd() {\n      if (self.preview) {\n        self.preview.remove();\n        self.preview = null;\n      }\n\n      if (!self.elem) return;\n\n      self.elem\n        .css('zIndex', '')\n        .off('transitionend', onTransitionEnd);\n    }\n  };\n\n  public setPreviewPosition(coords) {\n    this.preview.css(coords);\n  };\n\n  public getOptions(): any {\n    return this.opts.options;\n  };\n\n  public setOptions(options): any {\n    _.merge(this.opts.options, options);\n    _.merge(this.size, options.size);\n\n    return this;\n  };\n}\n\nangular\n  .module('pipDraggableTiles')\n  .service('pipDragTile', function () {\n    return function (options) {\n      let newTile = new DragTileService(options);\n\n      return newTile;\n    }\n  });","angular.module('pipDraggableTiles', []);\n\nimport './DraggableTileService';\nimport './Draggable';","import {\n  DashboardTile\n} from '../common_tile/DashboardTile';\nimport {\n  ITileConfigService\n} from '../config_tile_dialog/ConfigDialogService';\nimport { IDashboardProvider, IDashboardTileTypeOptions } from '../utility/IDashboardService';\n{\n  class EventTileController extends DashboardTile {\n    private _oldOpacity: number;\n\n    public opacity: number = 0.57;\n\n    constructor(\n      $scope: ng.IScope,\n      private $element: JQuery,\n      private $timeout: angular.ITimeoutService,\n      private pipTileConfigDialogService: ITileConfigService\n    ) {\n      super();\n      this.options.menu.push({\n        title: 'Configurate',\n        action: () => {\n          this.onConfigClick();\n        }\n      });\n      this.color = this.options.color || 'gray';\n      this.opacity = this.options.opacity || this.opacity;\n\n      this.drawImage();\n\n      // TODO it doesn't work\n      $scope.$watch(() => {\n        return $element.is(':visible');\n      }, (newVal) => {\n        this.drawImage();\n      });\n    }\n\n    private drawImage() {\n      if (this.options.image) {\n        this.$timeout(() => {\n          this.onImageLoad(this.$element.find('img'));\n        }, 500);\n      }\n    }\n\n    private onConfigClick() {\n      this._oldOpacity = _.clone(this.opacity);\n      this.pipTileConfigDialogService.show({\n        dialogClass: 'pip-calendar-config',\n        locals: {\n          color: this.color,\n          size: this.options.size || {\n            colSpan: 1,\n            rowSpan: 1\n          },\n          date: this.options.date,\n          title: this.options.title,\n          text: this.options.text,\n          opacity: this.opacity,\n          onOpacitytest: (opacity) => {\n            this.opacity = opacity;\n          }\n        },\n        extensionUrl: 'event_tile/ConfigDialogExtension.html'\n      }, (result: any) => {\n        this.changeSize(result.size);\n\n        this.color = result.color;\n        this.options.color = result.color;\n        this.options.date = result.date;\n        this.options.title = result.title;\n        this.options.text = result.text;\n        this.options.opacity = result.opacity;\n      }, () => {\n        this.opacity = this._oldOpacity;\n      });\n    }\n\n    private onImageLoad(image) {\n      this.setImageMarginCSS(this.$element.parent(), image);\n    }\n\n    public changeSize(params) {\n      this.options.size.colSpan = params.sizeX;\n      this.options.size.rowSpan = params.sizeY;\n\n      if (this.options.image) {\n        this.$timeout(() => {\n          this.setImageMarginCSS(this.$element.parent(), this.$element.find('img'));\n        }, 500);\n      }\n    }\n\n    // Later replace by pipImageUtils sevice's function\n    private setImageMarginCSS($element, image) {\n      let\n        containerWidth = $element.width ? $element.width() : $element.clientWidth, // || 80,\n        containerHeight = $element.height ? $element.height() : $element.clientHeight, // || 80,\n        imageWidth = image[0].naturalWidth || image.width,\n        imageHeight = image[0].naturalHeight || image.height,\n        margin = 0,\n        cssParams = {};\n\n      if ((imageWidth / containerWidth) > (imageHeight / containerHeight)) {\n        margin = -((imageWidth / imageHeight * containerHeight - containerWidth) / 2);\n        cssParams['margin-left'] = '' + margin + 'px';\n        cssParams['height'] = '' + containerHeight + 'px'; //'100%';\n        cssParams['width'] = '' + imageWidth * containerHeight / imageHeight + 'px'; //'100%';\n        cssParams['margin-top'] = '';\n      } else {\n        margin = -((imageHeight / imageWidth * containerWidth - containerHeight) / 2);\n        cssParams['margin-top'] = '' + margin + 'px';\n        cssParams['height'] = '' + imageHeight * containerWidth / imageWidth + 'px'; //'100%';\n        cssParams['width'] = '' + containerWidth + 'px'; //'100%';\n        cssParams['margin-left'] = '';\n      }\n\n      image.css(cssParams);\n    }\n  }\n\n\n  const EventTile: IDashboardTileTypeOptions = {\n    name: 'event',\n    controllerAs: '$ctrl',\n    class: 'pip-event-tile',\n    controller: EventTileController,\n    templateUrl: 'event_tile/EventTile.html'\n  }\n\n  const config = function(pipDashboardProvider: IDashboardProvider) {\n    pipDashboardProvider.registerTileType(EventTile);\n  }\n\n  angular\n    .module('pipDashboard')\n    .config(config);\n}","// Import services\nimport './tile_group/index';\nimport './draggable';\n\n// Import tile services\nimport './menu_tile';\n\n// Import dialogs\nimport './add_tile_dialog';\nimport './config_tile_dialog';\n\nangular.module('pipDashboard', [\n  // Services\n  'pipDraggableTiles',\n  'pipDraggableTilesGroup',\n  // Tile services\n  'pipMenuTile',\n  // Dialogs\n  'pipConfigDashboardTileDialog',\n  'pipAddDashboardTileDialog',\n  //Templates\n  'pipDashboard.Templates',\n  // External pip modules\n  'pipLayout',\n  'pipLocations',\n  'pipDate',\n  'pipCharts',\n  'pipTranslate',\n  'pipControls',\n  'pipButtons',\n  'pipBehaviors'\n]);\n\n\n// Import utility \nimport './utility/TileTemplateUtility';\nimport './utility/DashboardService';\n// Import tiles\nimport './common_tile/DashboardTile';\nimport './common_tile/DynamicTile';\nimport './event_tile/EventTile';\nimport './note_tile/NoteTile';\nimport './picture_slider_tile/PictureSliderTile';\nimport './position_tile/PositionTile';\nimport './statistics_tile/StatisticsTile';\n// Import common component\nimport './dashboard/Dashboard';\n","{\n  const TileMenu: ng.IComponentOptions = {\n    templateUrl: 'menu_tile/MenuTile.html',\n    bindings: {\n      menu: '<pipMenu'\n    }\n  };\n\n  angular\n    .module('pipMenuTile')\n    .component('pipTileMenu', TileMenu);\n}","angular\n    .module('pipMenuTile', []);\n\nimport './MenuTileDirective';","import {\n  DashboardTile\n} from '../common_tile/DashboardTile';\nimport {\n  ITileConfigService\n} from '../config_tile_dialog/ConfigDialogService';\nimport { IDashboardProvider, IDashboardTileTypeOptions } from '../utility/IDashboardService';\n{\n  class NoteTileController extends DashboardTile {\n\n    constructor(\n      private pipTileConfigDialogService: ITileConfigService,\n      $scope\n    ) {\n      super();\n\n      this.options.menu.push({\n        title: 'Configurate',\n        action: () => {\n          this.onConfigClick();\n        }\n      });\n      this.color = this.options.color || 'orange';\n    }\n\n    private onConfigClick() {\n      this.pipTileConfigDialogService.show({\n        locals: {\n          color: this.color,\n          size: this.options.size,\n          title: this.options.title,\n          text: this.options.text,\n        },\n        extensionUrl: 'note_tile/ConfigDialogExtension.html'\n      }, (result: any) => {\n        this.color = result.color;\n        this.options.color = result.color;\n        this.changeSize(result.size);\n        this.options.text = result.text;\n        this.options.title = result.title;\n      });\n    }\n  }\n\n  const NoteTile: IDashboardTileTypeOptions = {\n    name: 'note',\n    controller: NoteTileController,\n    controllerAs: '$ctrl',\n    class: 'pip-notes-tile',\n    templateUrl: 'note_tile/NoteTile.html'\n  }\n\n  const config = function(pipDashboardProvider: IDashboardProvider) {\n    pipDashboardProvider.registerTileType(NoteTile);\n  }\n\n  angular\n    .module('pipDashboard')\n    .config(config);\n}","import {\n  DashboardTile\n} from '../common_tile/DashboardTile';\nimport {\n  ITileConfigService\n} from '../config_tile_dialog/ConfigDialogService';\nimport {\n  ITileTemplateService\n} from '../utility/TileTemplateUtility';\n\nimport { IDashboardProvider, IDashboardTileTypeOptions } from '../utility/IDashboardService';\n\n{\n  class PictureSliderController extends DashboardTile {\n    public animationType: string = 'fading';\n    public animationInterval: number = 5000;\n\n    constructor(\n      private $scope: angular.IScope,\n      private $element: any,\n      private $timeout: angular.ITimeoutService,\n      private pipTileTemplate: ITileTemplateService\n    ) {\n      super();\n\n      if (this.options) {\n        this.animationType = this.options.animationType || this.animationType;\n        this.animationInterval = this.options.animationInterval || this.animationInterval;\n      }\n    }\n\n    public onImageLoad($event) {\n      this.$timeout(() => {\n        this.pipTileTemplate.setImageMarginCSS(this.$element.parent(), $event.target);\n      });\n    }\n\n    public changeSize(params) {\n      this.options.size.colSpan = params.sizeX;\n      this.options.size.rowSpan = params.sizeY;\n\n      this.$timeout(() => {\n        _.each(this.$element.find('img'), (image) => {\n          this.pipTileTemplate.setImageMarginCSS(this.$element.parent(), image);\n        });\n      }, 500);\n    }\n  }\n\n  const PictureSliderTile:IDashboardTileTypeOptions = {\n    name: 'picture-slider',\n    controller: PictureSliderController,\n    controllerAs: '$ctrl',\n    class: 'pip-picture-slider-tile',\n    templateUrl: 'picture_slider_tile/PictureSliderTile.html'\n  }\n\n  const config = function(pipDashboardProvider: IDashboardProvider) {\n    pipDashboardProvider.registerTileType(PictureSliderTile);\n  }\n\n  angular\n    .module('pipDashboard')\n    .config(config);\n}","import {\n  DashboardTile\n} from '../common_tile/DashboardTile';\nimport {\n  ITileConfigService\n} from '../config_tile_dialog/ConfigDialogService';\nimport { IDashboardProvider, IDashboardTileTypeOptions } from '../utility/IDashboardService';\n{\n  class PositionTileController extends DashboardTile {\n    public showPosition: boolean = true;\n\n    constructor(\n      $scope: angular.IScope,\n      private $timeout: angular.ITimeoutService,\n      private $element: any,\n      private pipTileConfigDialogService: ITileConfigService,\n      private pipLocationEditDialog: any,\n    ) {\n      super();\n      this.options.menu.push({\n        title: 'Configurate',\n        action: () => {\n          this.onConfigClick();\n        }\n      });\n      this.options.menu.push({\n        title: 'Change location',\n        action: () => {\n          this.openLocationEditDialog();\n        }\n      });\n\n      this.options.location = this.options.location || this.options.position;\n\n      $scope.$watch('$ctrl.options.location', () => {\n        this.reDrawPosition();\n      });\n\n      // TODO it doesn't work\n      $scope.$watch(() => {\n        return $element.is(':visible');\n      }, (newVal) => {\n        if (newVal == true) this.reDrawPosition();\n      });\n    }\n\n    private onConfigClick() {\n      this.pipTileConfigDialogService.show({\n        dialogClass: 'pip-position-config',\n        locals: {\n          size: this.options.size,\n          locationName: this.options.locationName,\n          hideColors: true,\n        },\n        extensionUrl: 'position_tile/ConfigDialogExtension.html'\n      }, (result: any) => {\n        this.changeSize(result.size);\n        this.options.locationName = result.locationName;\n      });\n    }\n\n    public changeSize(params) {\n      this.options.size.colSpan = params.sizeX;\n      this.options.size.rowSpan = params.sizeY;\n\n      this.reDrawPosition();\n    }\n\n    public openLocationEditDialog() {\n      this.pipLocationEditDialog.show({\n        locationName: this.options.locationName,\n        locationPos: this.options.location\n      }, (newPosition) => {\n        if (newPosition) {\n          this.options.location = newPosition.location;\n          this.options.locationName = newPosition.locatioName;\n        }\n      });\n    }\n\n    private reDrawPosition() {\n      this.showPosition = false;\n      this.$timeout(() => {\n        this.showPosition = true;\n      }, 50);\n    }\n  }\n\n\n  const PositionTile: IDashboardTileTypeOptions = {\n    name: 'position',\n    class: 'pip-position-tile',\n    controllerAs: '$ctrl',\n    controller: PositionTileController,\n    templateUrl: 'position_tile/PositionTile.html'\n  }\n\n  const config = function(pipDashboardProvider: IDashboardProvider) {\n    pipDashboardProvider.registerTileType(PositionTile);\n  }\n\n  angular\n    .module('pipDashboard')\n    .config(config);\n}","import {\n  DashboardTile\n} from '../common_tile/DashboardTile';\nimport { IDashboardProvider, IDashboardTileTypeOptions } from '../utility/IDashboardService';\n{\n  const SMALL_CHART: number = 70;\n  const BIG_CHART: number = 250;\n\n  class StatisticsTileController extends DashboardTile {\n    private _$scope: angular.IScope;\n    private _$timeout: angular.ITimeoutService;\n\n    public reset: boolean = false;\n    public chartSize: number = SMALL_CHART;\n\n    constructor(\n      $scope: angular.IScope,\n      $timeout: angular.ITimeoutService\n    ) {\n      super();\n      this._$scope = $scope;\n      this._$timeout = $timeout;\n\n      if (this.options) {\n        this.menu = this.options.menu ? _.union(this.menu, this.options.menu) : this.menu;\n      }\n\n      this.setChartSize();\n    }\n\n    public changeSize(params) {\n      this.options.size.colSpan = params.sizeX;\n      this.options.size.rowSpan = params.sizeY;\n\n      this.reset = true;\n      this.setChartSize();\n      this._$timeout(() => {\n        this.reset = false;\n      }, 500);\n    }\n\n    private setChartSize() {\n      this.chartSize = this.options.size.colSpan == 2 && this.options.size.rowSpan == 2 ? BIG_CHART : SMALL_CHART;\n    }\n  }\n\n\n  const StatisticsTile: IDashboardTileTypeOptions = {\n    name: 'statistics',\n    class: 'pip-statistics-tile',\n    controllerAs: '$ctrl',\n    controller: StatisticsTileController,\n    templateUrl: 'statistics_tile/StatisticsTile.html'\n  }\n\n  const config = function(pipDashboardProvider: IDashboardProvider) {\n    pipDashboardProvider.registerTileType(StatisticsTile);\n  }\n\n  angular\n    .module('pipDashboard')\n    .config(config);\n}","{\n  interface DraggableTileAttributes extends ng.IAttributes {\n    pipDraggableTiles: any;\n  }\n\n  function DraggableTileLink(\n    $scope: ng.IScope,\n    $elem: JQuery,\n    $attr: DraggableTileAttributes,\n    $compile: angular.ICompileService\n  ) {\n    const docFrag = document.createDocumentFragment(),\n      group = $scope.$eval($attr.pipDraggableTiles);\n\n    group.forEach(function (tile) {\n      const tpl = wrapComponent(tile.getCompiledTemplate());\n\n      docFrag.appendChild(tpl);\n    });\n\n    $elem.append(docFrag);\n\n    function wrapComponent(elem) {\n      return $compile($('<div>')\n        .addClass('pip-draggable-tile')\n        .attr('pip-drag', 'true')\n        .attr('pip-scroll-container', \"'.pip-dashboard-scroll'\")\n        .get(0))($scope).append(elem).get(0);\n    }\n  }\n\n  function DraggableTiles($compile): ng.IDirective {\n    return {\n      restrict: 'A',\n      link: function (\n        $scope: ng.IScope,\n        $elem: JQuery,\n        $attr: DraggableTileAttributes\n      ) {\n        new DraggableTileLink($scope, $elem, $attr, $compile);\n      }\n    };\n  }\n\n  angular\n    .module('pipDraggableTilesGroup')\n    .directive('pipDraggableTiles', DraggableTiles);\n}","export interface TilesGridConstructor {\n  new(tiles, options, columns, elem);\n}\n\nexport function ITilesGridConstructor(constructor: TilesGridConstructor, tiles, options, columns, elem): ITilesGridService {\n  return new constructor(tiles, options, columns, elem);\n}\n\nexport interface ITilesGridService {\n  tiles: any;\n  opts: any;\n  columns: any;\n  elem: any;\n  gridCells: any;\n  inline: boolean;\n  isMobileLayout: boolean;\n\n  addTile(tile): any;\n  getCellByPosition(row, col): any;\n  getCells(prevCell, rowSpan, colSpan): any;\n  getAvailableCellsDesktop(prevCell, rowSpan, colSpan): any;\n  getCell(src, basicRow, basicCol, columns): any;\n  getAvailableCellsMobile(prevCell, rowSpan, colSpan): any;\n  getBasicRow(prevCell): any;\n  isCellFree(row, col): any;\n  getCellIndex(srcCell): any;\n  reserveCells(start, end, elem): void;\n  clearElements(): void;\n  setAvailableColumns(columns): any;\n  generateGrid(singleTileWidth ? ): any;\n  setTilesDimensions(onlyPosition, draggedTile): any;\n  calcContainerHeight(): any;\n  getTileByNode(node): any;\n  getTileByCoordinates(coords, draggedTile): any;\n  getTileIndex(tile): any;\n  swapTiles(movedTile, beforeTile): any;\n  removeTile(removeTile): any;\n  updateTileOptions(opts): any;\n}\n\nconst MOBILE_LAYOUT_COLUMNS = 2;\n\nexport class TilesGridService implements ITilesGridService {\n  public tiles: any;\n  public opts: any;\n  public columns: any;\n  public elem: any;\n  public gridCells: any = [];\n  public inline: boolean = false;\n  public isMobileLayout: boolean;\n\n  constructor(tiles, options, columns, elem) {\n    this.tiles = tiles;\n    this.opts = options;\n    this.columns = columns || 0; // available columns in a row\n    this.elem = elem;\n    this.gridCells = [];\n    this.inline = options.inline || false;\n    this.isMobileLayout = columns === MOBILE_LAYOUT_COLUMNS;\n  }\n\n  public addTile(tile): any {\n    this.tiles.push(tile);\n    if (this.tiles.length === 1) {\n      this.generateGrid();\n    }\n\n    return this;\n  };\n\n  public getCellByPosition(row, col): any {\n    return this.gridCells[row][col];\n  };\n\n  public getCells(prevCell, rowSpan, colSpan): any {\n    console.log('prevCell', prevCell);\n\n    if (this.isMobileLayout) {\n      return this.getAvailableCellsMobile(prevCell, rowSpan, colSpan);\n    } else {\n      return this.getAvailableCellsDesktop(prevCell, rowSpan, colSpan);\n    }\n  };\n\n  public getAvailableCellsDesktop(prevCell, rowSpan, colSpan): any {\n    let leftCornerCell;\n    let rightCornerCell;\n    const basicCol = prevCell && prevCell.col || 0;\n    const basicRow = this.getBasicRow(prevCell);\n\n    // Small tile\n    if (colSpan === 1 && rowSpan === 1) {\n      const gridCopy = this.gridCells.slice();\n\n      if (!prevCell) {\n        leftCornerCell = gridCopy[0][0];\n      } else {\n        leftCornerCell = this.getCell(gridCopy, basicRow, basicCol, this.columns);\n\n        if (!leftCornerCell) {\n          const rowShift = this.isMobileLayout ? 1 : 2;\n          leftCornerCell = this.getCell(gridCopy, basicRow + rowShift, 0, this.columns);\n        }\n      }\n    }\n\n    // Medium tile\n    if (colSpan === 2 && rowSpan === 1) {\n      const prevTileSize = prevCell && prevCell.elem.size || null;\n\n      if (!prevTileSize) {\n        leftCornerCell = this.getCellByPosition(basicRow, basicCol);\n        rightCornerCell = this.getCellByPosition(basicRow, basicCol + 1);\n      } else if (prevTileSize.colSpan === 2 && prevTileSize.rowSpan === 2) {\n        if (this.columns - basicCol - 2 > 0) {\n          leftCornerCell = this.getCellByPosition(basicRow, basicCol + 1);\n          rightCornerCell = this.getCellByPosition(basicRow, basicCol + 2);\n        } else {\n          leftCornerCell = this.getCellByPosition(basicRow + 2, 0);\n          rightCornerCell = this.getCellByPosition(basicRow + 2, 1);\n        }\n      } else if (prevTileSize.colSpan === 2 && prevTileSize.rowSpan === 1) {\n        if (prevCell.row % 2 === 0) {\n          leftCornerCell = this.getCellByPosition(basicRow + 1, basicCol - 1);\n          rightCornerCell = this.getCellByPosition(basicRow + 1, basicCol);\n        } else {\n          if (this.columns - basicCol - 3 >= 0) {\n            leftCornerCell = this.getCellByPosition(basicRow, basicCol + 1);\n            rightCornerCell = this.getCellByPosition(basicRow, basicCol + 2);\n          } else {\n            leftCornerCell = this.getCellByPosition(basicRow + 2, 0);\n            rightCornerCell = this.getCellByPosition(basicRow + 2, 1);\n          }\n        }\n      } else if (prevTileSize.colSpan === 1 && prevTileSize.rowSpan === 1) {\n        if (this.columns - basicCol - 3 >= 0) {\n          if (this.isCellFree(basicRow, basicCol + 1)) {\n            leftCornerCell = this.getCellByPosition(basicRow, basicCol + 1);\n            rightCornerCell = this.getCellByPosition(basicRow, basicCol + 2);\n          } else {\n            leftCornerCell = this.getCellByPosition(basicRow, basicCol + 2);\n            rightCornerCell = this.getCellByPosition(basicRow, basicCol + 3);\n          }\n        } else {\n          leftCornerCell = this.getCellByPosition(basicRow + 2, 0);\n          rightCornerCell = this.getCellByPosition(basicRow + 2, 1);\n        }\n      }\n    }\n\n    // Big tile\n    if (!prevCell && rowSpan === 2 && colSpan === 2) {\n      leftCornerCell = this.getCellByPosition(basicRow, basicCol);\n      rightCornerCell = this.getCellByPosition(basicRow + 1, basicCol + 1);\n    } else if (rowSpan === 2 && colSpan === 2) {\n      if (this.columns - basicCol - 2 > 0) {\n        if (this.isCellFree(basicRow, basicCol + 1)) {\n          leftCornerCell = this.getCellByPosition(basicRow, basicCol + 1);\n          rightCornerCell = this.getCellByPosition(basicRow + 1, basicCol + 2);\n        } else {\n          leftCornerCell = this.getCellByPosition(basicRow, basicCol + 2);\n          rightCornerCell = this.getCellByPosition(basicRow + 1, basicCol + 3);\n        }\n      } else {\n        leftCornerCell = this.getCellByPosition(basicRow + 2, 0);\n        rightCornerCell = this.getCellByPosition(basicRow + 3, 1);\n      }\n    }\n\n    return {\n      start: leftCornerCell,\n      end: rightCornerCell\n    };\n  };\n\n  public getCell(src, basicRow, basicCol, columns): any {\n    let cell, col, row;\n\n    if (this.isMobileLayout) {\n      // mobile layout\n      for (col = basicCol; col < columns; col++) {\n        if (!src[basicRow][col].elem) {\n          cell = src[basicRow][col];\n          break;\n        }\n      }\n\n      return cell;\n    }\n\n    // desktop\n    for (col = basicCol; col < columns; col++) {\n      for (row = 0; row < 2; row++) {\n        if (!src[row + basicRow][col].elem) {\n          cell = src[row + basicRow][col];\n          break;\n        }\n      }\n\n      if (cell) {\n        return cell;\n      }\n    }\n  };\n\n  public getAvailableCellsMobile(prevCell, rowSpan, colSpan): any {\n    let leftCornerCell;\n    let rightCornerCell;\n    const basicRow = this.getBasicRow(prevCell);\n    const basicCol = prevCell && prevCell.col || 0;\n\n\n    if (colSpan === 1 && rowSpan === 1) {\n      const gridCopy = this.gridCells.slice();\n\n      if (!prevCell) {\n        leftCornerCell = gridCopy[0][0];\n      } else {\n        leftCornerCell = this.getCell(gridCopy, basicRow, basicCol, this.columns);\n\n        if (!leftCornerCell) {\n          const rowShift = this.isMobileLayout ? 1 : 2;\n          leftCornerCell = this.getCell(gridCopy, basicRow + rowShift, 0, this.columns);\n        }\n      }\n    }\n\n    if (!prevCell) {\n      leftCornerCell = this.getCellByPosition(basicRow, 0);\n      rightCornerCell = this.getCellByPosition(basicRow + rowSpan - 1, 1);\n    } else if (colSpan === 2) {\n      leftCornerCell = this.getCellByPosition(basicRow + 1, 0);\n      rightCornerCell = this.getCellByPosition(basicRow + rowSpan, 1);\n    }\n\n    return {\n      start: leftCornerCell,\n      end: rightCornerCell\n    };\n  };\n\n  public getBasicRow(prevCell): any {\n    let basicRow;\n\n    if (this.isMobileLayout) {\n      if (prevCell) {\n        basicRow = prevCell && prevCell.row || 0;\n      } else {\n        basicRow = 0;\n      }\n    } else {\n      if (prevCell) {\n        basicRow = prevCell.row % 2 === 0 ? prevCell.row : prevCell.row - 1;\n      } else {\n        basicRow = 0;\n      }\n    }\n\n    return basicRow;\n  };\n\n  public isCellFree(row, col): any {\n    return !this.gridCells[row][col].elem;\n  };\n\n  public getCellIndex(srcCell): any {\n    const self = this;\n    let index;\n\n    this.gridCells.forEach((row, rowIndex) => {\n      index = _.findIndex(self.gridCells[rowIndex], (cell) => {\n        return cell === srcCell;\n      });\n\n      if (index !== -1) {\n        return;\n      }\n    });\n\n    return index !== -1 ? index : 0;\n  };\n\n  public reserveCells(start, end, elem) {\n    this.gridCells.forEach((row) => {\n      row.forEach((cell) => {\n        if (cell.row >= start.row && cell.row <= end.row &&\n          cell.col >= start.col && cell.col <= end.col) {\n          cell.elem = elem;\n        }\n      });\n    });\n  };\n\n  public clearElements() {\n    this.gridCells.forEach((row) => {\n      row.forEach((tile) => {\n        tile.elem = null;\n      });\n    });\n  };\n\n  public setAvailableColumns(columns): any {\n    this.isMobileLayout = columns === MOBILE_LAYOUT_COLUMNS;\n    this.columns = columns;\n\n    return this;\n  };\n\n  public generateGrid(singleTileWidth ? ): any {\n    const self = this,\n      tileWidth = singleTileWidth || this.opts.tileWidth,\n      offset = document.querySelector('.pip-draggable-group-title').getBoundingClientRect();\n    let colsInRow = 0,\n      rows = 0,\n      gridInRow = [];\n\n    this.gridCells = [];\n\n    this.tiles.forEach((tile, index, srcTiles) => {\n      const tileSize = tile.getSize();\n\n      generateCells(tileSize.colSpan);\n\n      if (srcTiles.length === index + 1) {\n        if (colsInRow < self.columns) {\n          generateCells(self.columns - colsInRow);\n        }\n\n        // Generate more cells for extends tile size to big\n        if (self.tiles.length * 2 > self.gridCells.length) {\n          Array.apply(null, Array(self.tiles.length * 2 - self.gridCells.length)).forEach(() => {\n            generateCells(self.columns);\n          });\n        }\n      }\n    });\n\n    function generateCells(newCellCount) {\n      Array.apply(null, Array(newCellCount)).forEach(() => {\n        if (self.columns < colsInRow + 1) {\n          rows++;\n          colsInRow = 0;\n\n          self.gridCells.push(gridInRow);\n          gridInRow = [];\n        }\n\n        let top = rows * self.opts.tileHeight + (rows ? rows * self.opts.gutter : 0) + offset.height;\n        let left = colsInRow * tileWidth + (colsInRow ? colsInRow * self.opts.gutter : 0);\n\n        // Describe grid cell size through block corners coordinates\n        gridInRow.push({\n          top: top,\n          left: left,\n          bottom: top + self.opts.tileHeight,\n          right: left + tileWidth,\n          row: rows,\n          col: colsInRow\n        });\n\n        colsInRow++;\n      });\n    }\n\n    return this;\n  };\n\n  public setTilesDimensions(onlyPosition, draggedTile): any {\n    const self = this;\n    let currIndex = 0;\n    let prevCell;\n\n    if (onlyPosition) {\n      self.clearElements();\n    }\n\n    this.tiles.forEach((tile) => {\n      const tileSize = tile.getSize();\n      let startCell;\n      let width;\n      let height;\n      let cells;\n\n      tile.updateElem('.pip-draggable-tile');\n      if (tileSize.colSpan === 1) {\n        if (prevCell && prevCell.elem.size.colSpan === 2 && prevCell.elem.size.rowSpan === 1) {\n          startCell = self.getCells(self.getCellByPosition(prevCell.row, prevCell.col - 1), 1, 1).start;\n        } else {\n          startCell = self.getCells(prevCell, 1, 1).start;\n        }\n\n\n        if (!onlyPosition) {\n          width = startCell.right - startCell.left;\n          height = startCell.bottom - startCell.top;\n        }\n\n        prevCell = startCell;\n\n        self.reserveCells(startCell, startCell, tile);\n\n        currIndex++;\n      } else if (tileSize.colSpan === 2) {\n        cells = self.getCells(prevCell, tileSize.rowSpan, tileSize.colSpan);\n        startCell = cells.start;\n\n        if (!onlyPosition) {\n          const gutter = this.isMobileLayout ? this.opts.gutter : 0;\n\n          width = cells.end.right - cells.start.left + gutter;\n          height = cells.end.bottom - cells.start.top;\n        }\n\n        prevCell = cells.end;\n\n        self.reserveCells(cells.start, cells.end, tile);\n\n        currIndex += 2;\n      }\n\n      // Render preview\n      // while tiles from group is dragged\n      if (draggedTile === tile) {\n        tile.setPreviewPosition({\n          left: startCell.left,\n          top: startCell.top\n        });\n\n        return;\n      }\n\n      if (!onlyPosition) {\n        tile.setSize(width, height);\n      }\n\n      tile.setPosition(startCell.left, startCell.top);\n    });\n\n    return this;\n  };\n\n  public calcContainerHeight(minHeight ?: number): any {\n    let maxHeightSize, maxWidthSize;\n\n    if (!this.tiles.length) {\n      if (minHeight) {\n        this.elem.style.height = minHeight + 40 + 'px';\n      }\n\n      return this;\n    }\n\n    maxHeightSize = _.maxBy(this.tiles, (tile) => {\n      const tileSize = tile['getSize']();\n      return tileSize.top + tileSize.height;\n    })['getSize']();\n\n    this.elem.style.height = maxHeightSize.top + maxHeightSize.height + 'px';\n\n    if (this.inline) {\n      maxWidthSize = _.maxBy(this.tiles, (tile) => {\n        const tileSize = tile['getSize']();\n        return tileSize.left + tileSize.width;\n      })['getSize']();\n\n      this.elem.style.width = maxWidthSize.left + maxWidthSize.width + 'px';\n    }\n\n    return this;\n  };\n\n  public getTileByNode(node): any {\n    const foundTile = this.tiles.filter((tile) => {\n      return node === tile.getElem();\n    });\n\n    return foundTile.length ? foundTile[0] : null;\n  };\n\n  public getTileByCoordinates(coords, draggedTile): any {\n    return this.tiles\n      .filter((tile) => {\n        const tileSize = tile.getSize();\n\n        return tile !== draggedTile &&\n          tileSize.left <= coords.left && coords.left <= (tileSize.left + tileSize.width) &&\n          tileSize.top <= coords.top && coords.top <= (tileSize.top + tileSize.height);\n      })[0] || null;\n  };\n\n  public getTileIndex(tile): any {\n    return _.findIndex(this.tiles, tile);\n  };\n\n  public swapTiles(movedTile, beforeTile): any {\n    const movedTileIndex = _.findIndex(this.tiles, movedTile);\n    const beforeTileIndex = _.findIndex(this.tiles, beforeTile);\n\n    this.tiles.splice(movedTileIndex, 1);\n    this.tiles.splice(beforeTileIndex, 0, movedTile);\n\n    return this;\n  };\n\n  public removeTile(removeTile): any {\n    let droppedTile;\n\n    this.tiles.forEach((tile, index, tiles) => {\n      if (tile === removeTile) {\n        droppedTile = tiles.splice(index, 1)[0];\n        return false;\n      }\n    });\n\n    return droppedTile;\n  };\n\n  public updateTileOptions(opts): any {\n    const index = _.findIndex(this.tiles, (tile) => {\n      return tile['getOptions']() === opts;\n    });\n\n    if (index !== -1) {\n      this.tiles[index].setOptions(opts);\n      return true;\n    }\n\n    return false;\n  };\n}\n\n\nangular\n  .module('pipDraggableTilesGroup')\n  .service('pipTilesGrid', function () {\n    return function (tiles, options, columns, elem) {\n      const newGrid = new TilesGridService(tiles, options, columns, elem);\n\n      return newGrid;\n    }\n  });","angular\n    .module('pipDraggableTilesGroup', []);\n\nimport './TileGroupDirective';\nimport './TileGroupService';","import { IDashboardProvider, IDashboardTileTypeOptions, IDashboardService } from './IDashboardService';\n\n{\n    class DashboardProvider implements IDashboardProvider {\n        private tilesTypes: IDashboardTileTypeOptions[] = [];\n        private _service: IDashboardService;\n\n        constructor( ) { }\n\n        public registerTileType(newTileTypeOptions: IDashboardTileTypeOptions) {\n            let newControllerName: string;\n            let newTemplateUrl: string;\n\n            if (typeof newTileTypeOptions.controller !== 'string') {\n                newControllerName = 'pip' + newTileTypeOptions.name.substr(0, 1).toUpperCase() + newTileTypeOptions.name.substr(1) + 'Tile';\n\n                angular.module('pipDashboard').controller(newControllerName, <angular.IControllerConstructor>newTileTypeOptions.controller);\n            }\n\n            if (!newTileTypeOptions.templateUrl && newTileTypeOptions.template) {\n                newTemplateUrl = 'pip' + newTileTypeOptions.name.substr(0, 1).toUpperCase() + newTileTypeOptions.name.substr(1) + 'Tile.html';\n            }\n\n            this.tilesTypes.push({\n                name: newTileTypeOptions.name,\n                controller: newControllerName || newTileTypeOptions.controller,\n                templateUrl: newTemplateUrl || newTileTypeOptions.templateUrl,\n                controllerAs: newTileTypeOptions.controllerAs,\n                template: newTileTypeOptions.template,\n                class: newTileTypeOptions.class\n            });\n        }\n\n        public $get($templateCache) {\n            \"ngInject\";\n\n            if (this._service == null)\n                this._service = new DashboardService(this.tilesTypes, $templateCache);\n\n            return this._service;\n        }\n    }\n\n    class DashboardService {\n        constructor(\n            private tileTypes: IDashboardTileTypeOptions[],\n            private $templateCache: angular.ITemplateCacheService\n        ) {\n            this.putTemplates();\n        }\n\n        private putTemplates(): void {\n            _.each(this.tileTypes, (type: IDashboardTileTypeOptions) => {\n                if (type.template) this.$templateCache.put(type.templateUrl, type.template);\n            });\n        }\n\n        public getTileTypes(): IDashboardTileTypeOptions[] {\n            return this.tileTypes;\n        }\n\n        public getTypeByName(name: string): IDashboardTileTypeOptions {\n            return _.find(this.tileTypes, (type: IDashboardTileTypeOptions) => {\n                return type.name === name;\n            });\n        }\n    }\n\n    const config = function ($controllerProvider) {\n        let app = angular.module('pipDashboard');\n\n        (<any>app).controller = function (name: string, constructor: any): ng.IModule {\n            $controllerProvider.register(name, constructor);\n            return (this);\n        };\n    }\n\n    angular\n        .module('pipDashboard')\n        .config(config)\n        .provider('pipDashboard', DashboardProvider);\n}","export interface ITileTemplateService {\n    getTemplate(source, tpl ? , tileScope ? , strictCompile ? ): any;\n    setImageMarginCSS($element, image): void;\n} \n\n{\n    class tileTemplateService implements ITileTemplateService {\n        private _$interpolate: angular.IInterpolateService;\n        private _$compile: angular.ICompileService;\n        private _$templateRequest: angular.ITemplateRequestService;\n\n        constructor(\n            $interpolate: angular.IInterpolateService,\n            $compile: angular.ICompileService,\n            $templateRequest: angular.ITemplateRequestService\n        ) {\n            this._$interpolate = $interpolate;\n            this._$compile = $compile;\n            this._$templateRequest = $templateRequest;\n        }\n\n        public getTemplate(source, tpl ? , tileScope ? , strictCompile ? ): any {\n            const {\n                template,\n                templateUrl,\n                type\n            } = source;\n            let result;\n\n            if (type) {\n                const interpolated = tpl ? this._$interpolate(tpl)(source) : this._$interpolate(template)(source);\n                return strictCompile == true ?\n                    (tileScope ? this._$compile(interpolated)(tileScope) : this._$compile(interpolated)) :\n                    interpolated;\n            }\n\n            if (template) {\n                return tileScope ? this._$compile(template)(tileScope) : this._$compile(template);\n            }\n\n            if (templateUrl) {\n                this._$templateRequest(templateUrl, false).then((html) => {\n                    result = tileScope ? this._$compile(html)(tileScope) : this._$compile(html);\n                });\n            }\n\n            return result;\n        }\n\n        public setImageMarginCSS($element, image) {\n            let\n                containerWidth = $element.width ? $element.width() : $element.clientWidth,\n                containerHeight = $element.height ? $element.height() : $element.clientHeight,\n                imageWidth = (image[0] ? image[0].naturalWidth : image.naturalWidth) || image.width,\n                imageHeight = (image[0] ? image[0].naturalHeight : image.naturalWidth) || image.height,\n                margin = 0,\n                cssParams = {};\n\n            if ((imageWidth / containerWidth) > (imageHeight / containerHeight)) {\n                margin = -((imageWidth / imageHeight * containerHeight - containerWidth) / 2);\n                cssParams['margin-left'] = '' + margin + 'px';\n                cssParams['height'] = '' + containerHeight + 'px'; //'100%';\n                cssParams['width'] = '' + imageWidth * containerHeight / imageHeight + 'px'; //'100%';\n                cssParams['margin-top'] = '';\n            } else {\n                margin = -((imageHeight / imageWidth * containerWidth - containerHeight) / 2);\n                cssParams['margin-top'] = '' + margin + 'px';\n                cssParams['height'] = '' + imageHeight * containerWidth / imageWidth + 'px'; //'100%';\n                cssParams['width'] = '' + containerWidth + 'px'; //'100%';\n                cssParams['margin-left'] = '';\n            }\n\n            $(image).css(cssParams);\n        }\n    }\n\n    // image load directive TODO: remove to pipImageUtils\n    const ImageLoad = function ImageLoad($parse: ng.IParseService): ng.IDirective {\n        return {\n            restrict: 'A',\n            link: function (scope: ng.IScope, element: JQuery, attrs: any) {\n                const callback = $parse(attrs.pipImageLoad);\n\n                element.bind('load', (event) => {\n                    callback(scope, {\n                        $event: event\n                    });\n                });\n            }\n        }\n    }\n\n    angular\n        .module('pipDashboard')\n        .service('pipTileTemplate', tileTemplateService)\n        .directive('pipImageLoad', ImageLoad);\n}","(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('add_tile_dialog/AddTile.html',\n    '<md-dialog class=\"pip-dialog pip-add-component-dialog\"><md-dialog-content class=\"layout-column\"><div class=\"theme-divider p16 flex-auto\"><h3 class=\"hide-xs m0 bm16 theme-text-primary\" hide-xs=\"\">{{ \\'DASHBOARD_ADD_TILE_DIALOG_TITLE\\' | translate }}<md-input-container class=\"layout-row flex-auto m0 tm16\"><md-select class=\"flex-auto m0 theme-text-primary\" ng-model=\"dialogCtrl.activeGroupIndex\" placeholder=\"{{ \\'DASHBOARD_ADD_TILE_DIALOG_CREATE_NEW_GROUP\\' | translate }}\" aria-label=\"Group\"><md-option ng-value=\"$index\" ng-repeat=\"group in dialogCtrl.groups\">{{ group }}</md-option></md-select></md-input-container></h3></div><div class=\"pip-body pip-scroll p0 flex-auto\"><p class=\"md-body-1 theme-text-secondary m0 lp16 rp16\">{{ \\'DASHBOARD_ADD_TILE_DIALOG_USE_HOT_KEYS\\' | translate }}</p><md-list ng-init=\"groupIndex = $index\" ng-repeat=\"group in dialogCtrl.defaultTiles\"><md-list-item class=\"layout-row pip-list-item lp16 rp16\" ng-repeat=\"item in group\"><div class=\"icon-holder flex-none\"><md-icon md-svg-icon=\"icons:{{:: item.icon }}\"></md-icon><div class=\"pip-badge theme-badge md-warn\" ng-if=\"item.amount\"><span>{{ item.amount }}</span></div></div><span class=\"flex-auto lm24 theme-text-primary\">{{:: item.title }}</span><md-button class=\"md-icon-button flex-none\" ng-click=\"dialogCtrl.encrease(groupIndex, $index)\" aria-label=\"Encrease\"><md-icon md-svg-icon=\"icons:plus-circle\"></md-icon></md-button><md-button class=\"md-icon-button flex-none\" ng-click=\"dialogCtrl.decrease(groupIndex, $index)\" aria-label=\"Decrease\"><md-icon md-svg-icon=\"icons:minus-circle\"></md-icon></md-button></md-list-item><md-divider class=\"lm72 tm8 bm8\" ng-if=\"groupIndex !== (dialogCtrl.defaultTiles.length - 1)\"></md-divider></md-list></div></md-dialog-content><md-dialog-actions class=\"flex-none layout-align-end-center theme-divider divider-top theme-text-primary\"><md-button ng-click=\"dialogCtrl.cancel()\" aria-label=\"Cancel\">{{ \\'CANCEL\\' | translate }}</md-button><md-button ng-click=\"dialogCtrl.add()\" ng-disabled=\"dialogCtrl.totalTiless === 0\" arial-label=\"Add\">{{ \\'ADD\\' | translate }}</md-button></md-dialog-actions></md-dialog>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('common_tile/DynamicTile.html',\n    '<pip-tile-menu pip-menu=\"$ctrl.options.menu\" ng-if=\"!$ctrl.options.hideMenu\"></pip-tile-menu><div class=\"pip-tile-content {{ $ctrl.color }} layout-column\" ng-class=\"{ small: $ctrl.options.size.colSpan == 1 && $ctrl.options.size.rowSpan == 1, medium: $ctrl.options.size.colSpan == 2 && $ctrl.options.size.rowSpan == 1, big: $ctrl.options.size.colSpan == 2 && $ctrl.options.size.rowSpan == 2 }\"><pip-specific-template></pip-specific-template></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('config_tile_dialog/ConfigDialog.html',\n    '<md-dialog class=\"pip-dialog pip-tile-config-dialog {{ vm.params.dialogClass }}\" width=\"400\" md-theme=\"{{vm.theme}}\"><pip-tile-config-extend-component class=\"layout-column\" pip-dialog-scope=\"vm\" pip-extension-url=\"vm.extensionUrl\" pip-apply=\"vm.onApply(updatedData)\"></pip-tile-config-extend-component></md-dialog>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('config_tile_dialog/ConfigDialogExtendComponent.html',\n    '<h3 class=\"tm0 flex-none\">{{ \\'DASHBOARD_TILE_CONFIG_DIALOG_TITLE\\' | translate }}</h3><div class=\"pip-body pip-scroll p16 bp0 flex-auto\"><pip-extension-point></pip-extension-point><pip-toggle-buttons class=\"bm16\" ng-if=\"!$ctrl.hideSizes\" pip-buttons=\"$ctrl.sizes\" ng-model=\"$ctrl.sizeId\"></pip-toggle-buttons><pip-color-picker ng-if=\"!$ctrl.hideColors\" pip-colors=\"$ctrl.colors\" ng-model=\"$ctrl.color\"></pip-color-picker></div><div class=\"pip-footer flex-none\"><div><md-button class=\"md-accent\" ng-click=\"$ctrl.onCancel()\">{{ \\'CANCEL\\' | translate }}</md-button><md-button class=\"md-accent\" ng-click=\"$ctrl.onApply()\">{{ \\'APPLY\\' | translate }}</md-button></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('dashboard/Dashboard.html',\n    '<md-button class=\"md-accent md-raised md-fab layout-column layout-align-center-center\" aria-label=\"Add component\" ng-click=\"$ctrl.addComponent()\"><md-icon md-svg-icon=\"icons:plus\" class=\"md-headline centered-add-icon\"></md-icon></md-button><div class=\"pip-draggable-grid-holder\"><pip-draggable-grid pip-tiles-templates=\"$ctrl.groupedWidgets\" pip-tiles-context=\"$ctrl.widgetsContext\" pip-draggable-grid=\"$ctrl.draggableGridOptions\" pip-group-menu-actions=\"$ctrl.groupMenuActions\"></pip-draggable-grid><md-progress-circular md-mode=\"indeterminate\" class=\"progress-ring\"></md-progress-circular></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('draggable/Draggable.html',\n    '<div class=\"pip-draggable-holder\"><div class=\"pip-draggable-group\" pip-drop=\"true\" pip-drop-success=\"$ctrl.onDropListener($index, $event)\" pip-enter=\"$ctrl.onDropEnterListener($index, $event)\" pip-leave=\"$ctrl.onDropLeaveListener($index, $event)\" pip-deactive=\"$ctrl.onDropDeactivateListener($index, $event)\" ng-repeat=\"group in $ctrl.groups\" data-group-id=\"{{ $index }}\" pip-draggable-tiles=\"group.source\"><div class=\"pip-draggable-group-title layout-row layout-align-start-center\"><div class=\"title-input-container\" ng-click=\"$ctrl.onTitleClick(group, $event)\"><input ng-if=\"group.editingName\" ng-blur=\"$ctrl.onBlurTitleInput(group)\" ng-keypress=\"$ctrl.onKyepressTitleInput(group, $event)\" ng-model=\"group.title\"><div class=\"text-overflow flex-none\" ng-if=\"!group.editingName\">{{ group.title }}</div></div><md-button class=\"md-icon-button flex-none layout-align-center-center\" ng-show=\"group.editingName\" ng-click=\"$ctrl.cancelEditing(group)\" aria-label=\"Cancel\"><md-icon md-svg-icon=\"icons:cross\"></md-icon></md-button><md-menu class=\"flex-none layout-column\" md-position-mode=\"target-right target\" ng-show=\"!group.editingName\"><md-button class=\"md-icon-button flex-none layout-align-center-center\" ng-click=\"$mdOpenMenu(); groupId = $index\" aria-label=\"Menu\"><md-icon md-svg-icon=\"icons:dots\"></md-icon></md-button><md-menu-content width=\"4\"><md-menu-item ng-repeat=\"action in $ctrl.groupMenuActions\"><md-button ng-click=\"action.callback(groupId)\">{{ action.title }}</md-button></md-menu-item></md-menu-content></md-menu></div></div><div class=\"pip-draggable-group fict-group layout-align-center-center layout-column tm16\" pip-drop=\"true\" pip-drop-success=\"$ctrl.onDropToFictGroupListener($event)\" pip-enter=\"$ctrl.onDropEnterListener(null, $event)\" pip-leave=\"$ctrl.onDropLeaveListener(null, $event)\" pip-deactive=\"$ctrl.onDropDeactivateListener(null, $event)\"><div class=\"fict-group-text-container\"><md-icon md-svg-icon=\"icons:plus\"></md-icon>{{ \\'DROP_TO_CREATE_NEW_GROUP\\' | translate }}</div></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('event_tile/ConfigDialogExtension.html',\n    '<div class=\"w-stretch\"><md-input-container class=\"w-stretch bm0\"><label>Title:</label> <input type=\"text\" ng-model=\"$ctrl.title\"></md-input-container>Date:<md-datepicker ng-model=\"$ctrl.date\" class=\"w-stretch bm8\"></md-datepicker><md-input-container class=\"w-stretch\"><label>Description:</label> <textarea type=\"text\" ng-model=\"$ctrl.text\">\\n' +\n    '    </textarea></md-input-container>Backdrop\\'s opacity:<md-slider aria-label=\"opacity\" type=\"number\" min=\"0.1\" max=\"0.9\" step=\"0.01\" ng-model=\"$ctrl.opacity\" ng-change=\"$ctrl.onOpacitytest($ctrl.opacity)\"></md-slider></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('event_tile/EventTile.html',\n    '<img ng-if=\"$ctrl.options.image\" ng-src=\"{{$ctrl.options.image}}\" alt=\"{{$ctrl.options.title || $ctrl.options.name}}\"><div class=\"text-backdrop\" style=\"background-color: rgba(0, 0, 0, {{ $ctrl.opacity }})\"><div class=\"tile-heading layout-row layout-align-start-center flex-none\"><span class=\"tile-title flex-auto text-overflow\">{{ $ctrl.options.title || $ctrl.options.name }}</span></div><div class=\"text-container flex-auto pip-scroll\"><p class=\"date flex-none\" ng-if=\"$ctrl.options.date\">{{ $ctrl.options.date }}</p><p class=\"text flex-auto\">{{ $ctrl.options.text || $ctrl.options.description }}</p></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('menu_tile/MenuTile.html',\n    '<md-menu class=\"tile-menu\" md-position-mode=\"target-right target\"><md-button class=\"md-icon-button flex-none\" ng-click=\"$mdOpenMenu()\" aria-label=\"Menu\"><md-icon md-svg-icon=\"icons:vdots\"></md-icon></md-button><md-menu-content width=\"4\"><md-menu-item ng-repeat=\"item in $ctrl.menu\"><md-button ng-if=\"!item.submenu\" ng-click=\"item.action(item, $index)\">{{:: item.title }}</md-button><md-menu ng-if=\"item.submenu\"><md-button ng-click=\"item.action(item, $index)\">{{:: item.title }}</md-button><md-menu-content><md-menu-item ng-repeat=\"subitem in item.submenu\"><md-button ng-click=\"subitem.action(item, $index)\">{{:: subitem.title }}</md-button></md-menu-item></md-menu-content></md-menu></md-menu-item></md-menu-content></md-menu>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('note_tile/ConfigDialogExtension.html',\n    '<div class=\"w-stretch\"><md-input-container class=\"w-stretch bm0\"><label>Title:</label> <input type=\"text\" ng-model=\"$ctrl.title\"></md-input-container><md-input-container class=\"w-stretch tm0\"><label>Text:</label> <textarea type=\"text\" ng-model=\"$ctrl.text\">\\n' +\n    '    </textarea></md-input-container></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('note_tile/NoteTile.html',\n    '<div class=\"tile-heading layout-row layout-align-start-center flex-none\" ng-if=\"$ctrl.options.title || $ctrl.options.name\"><span class=\"tile-title flex-auto text-overflow\">{{ $ctrl.options.title || $ctrl.options.name }}</span></div><div class=\"text-container flex-auto pip-scroll\"><p>{{ $ctrl.options.text }}</p></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('picture_slider_tile/PictureSliderTile.html',\n    '<div class=\"tile-heading layout-row layout-align-start-center flex-none\"><span class=\"tile-title flex-auto text-overflow\">{{ $ctrl.options.title || $ctrl.options.name }}</span></div><div class=\"slider-container\"><div pip-image-slider=\"\" pip-animation-type=\"\\'fading\\'\" pip-animation-interval=\"$ctrl.animationInterval\" ng-if=\"$ctrl.animationType == \\'fading\\'\"><div class=\"pip-animation-block\" ng-repeat=\"slide in $ctrl.options.slides\"><img ng-src=\"{{ slide.image }}\" alt=\"{{ slide.image }}\" pip-image-load=\"$ctrl.onImageLoad($event)\"><p class=\"slide-text\" ng-if=\"slide.text\">{{ slide.text }}</p></div></div><div pip-image-slider=\"\" pip-animation-type=\"\\'carousel\\'\" pip-animation-interval=\"$ctrl.animationInterval\" ng-if=\"$ctrl.animationType == \\'carousel\\'\"><div class=\"pip-animation-block\" ng-repeat=\"slide in $ctrl.options.slides\"><img ng-src=\"{{ slide.image }}\" alt=\"{{ slide.image }}\" pip-image-load=\"$ctrl.onImageLoad($event)\"><p class=\"slide-text\" ng-if=\"slide.text\">{{ slide.text }}</p></div></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('position_tile/ConfigDialogExtension.html',\n    '<div class=\"w-stretch\"><md-input-container class=\"w-stretch bm0\"><label>Location name:</label> <input type=\"text\" ng-model=\"$ctrl.locationName\"></md-input-container></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('position_tile/PositionTile.html',\n    '<div class=\"tile-heading lp16 rp8 layout-row layout-align-end-center flex-none\" ng-if=\"$ctrl.options.locationName\"><span class=\"flex tile-title text-overflow\">{{ $ctrl.options.locationName }}</span></div><pip-location-map class=\"flex\" ng-if=\"$ctrl.showPosition\" pip-stretch=\"true\" pip-rebind=\"true\" pip-location-pos=\"$ctrl.options.location\"></pip-location-map>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('statistics_tile/StatisticsTile.html',\n    '<div class=\"tile-heading layout-row layout-align-start-center flex-none\"><span class=\"tile-title flex-auto text-overflow\">{{ $ctrl.options.title || $ctrl.options.name }}</span></div><div class=\"flex-auto layout-row layout-align-center-center\" ng-if=\"$ctrl.options.series && !$ctrl.reset\"><pip-pie-chart pip-series=\"$ctrl.options.series\" ng-if=\"!$ctrl.options.chartType || $ctrl.options.chartType == \\'pie\\'\" pip-donut=\"true\" pip-pie-size=\"$ctrl.chartSize\" pip-show-total=\"true\" pip-centered=\"true\"></pip-pie-chart></div>');\n}]);\n})();\n\n//# sourceMappingURL=pip-webui-dashboard-html.min.js.map\n"]}